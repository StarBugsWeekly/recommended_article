{
  "version": "https://jsonfeed.org/version/1",
  "title": "StarBugs Weekly",
  "home_page_url": "https://starbugs-blog.netlify.app",
  "feed_url": "https://starbugs-blog.netlify.app/feed/feed.json",
  "description": "StarBugs Weekly",
  "author": {
    "name": "StarBugs Weekly",
    "url": ""
  },
  "items": [{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/180/larry-180/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/180/larry-180/",
      "title": "第 180 期 後端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 後端開發</h2>\n<h3 id=\"%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B-grafana-k6-%E5%A3%93%E5%8A%9B%E6%B8%AC%E8%A9%A6%E5%B7%A5%E5%85%B7\"><a class=\"direct-link\" href=\"#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B-grafana-k6-%E5%A3%93%E5%8A%9B%E6%B8%AC%E8%A9%A6%E5%B7%A5%E5%85%B7\">#</a> <a href=\"https://blog.miniasp.com/post/2023/08/01/Getting-Started-with-Grafana-k6-Load-testing-tool\">快速上手 Grafana k6 壓力測試工具</a></h3>\n<p>台灣的軟體工程師應該沒有人不知道保哥。保哥這篇文章介紹了一款超簡單、超方便、五分鐘就能學會的壓力測試工具 k6，而且壓力測試的邏輯還是用 JavaScript 寫的。如果你從來沒有試過壓力測試工具，那可以參考看看這篇文章，應該很快就能學會了～</p>\n<h3 id=\"top-6-message-queues-for-distributed-architectures\"><a class=\"direct-link\" href=\"#top-6-message-queues-for-distributed-architectures\">#</a> <a href=\"https://icepanel.medium.com/top-6-message-queues-for-distributed-architectures-a3cbabf08993\">Top 6 message queues for distributed architectures</a></h3>\n<p>Message Queue 在後端領域中是非常重要的工具，但 MQ 那麼多種，究竟該怎麼挑呢？這篇文章從開源的 RabbitMQ、Kafka 講到雲端的 Amazon SQS 跟 GCP Pub/Sub，每一種都有其獨特的優勢和要面臨挑戰。如果你還不太確定這些工具之間有什麼差別，那這篇文章很適合你讀～</p>\n<h3 id=\"how-to-design-a-scalable-rate-limiting-algorithm-with-kong-api\"><a class=\"direct-link\" href=\"#how-to-design-a-scalable-rate-limiting-algorithm-with-kong-api\">#</a> <a href=\"https://konghq.com/blog/engineering/how-to-design-a-scalable-rate-limiting-algorithm\">How to Design a Scalable Rate Limiting Algorithm with Kong API</a></h3>\n<p>身為後端工程師，當然要知道怎麼做 Rate Limiting。這篇文章說明了幾種比較常見方法的優缺點，以及怎麼在分散式系統中做 Rate Limiting（還有幫自家產品打一下廣告XD）。如果你平時很常在開發 API，這篇文章絕對值得你一讀。</p>\n",
      "date_published": "2023-08-08T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/180/gqsm-180/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/180/gqsm-180/",
      "title": "第 180 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"react-server-components-%E2%80%93-how-and-why-you-should-use-them-in-your-code\"><a class=\"direct-link\" href=\"#react-server-components-%E2%80%93-how-and-why-you-should-use-them-in-your-code\">#</a> <a href=\"https://www.freecodecamp.org/news/how-to-use-react-server-components/\">React Server Components – How and Why You Should Use Them in Your Code</a></h3>\n<p>這篇文章先是介紹了當前 React 的 component 面臨到哪些瓶頸，像是因為非同步請求產生的 render 問題，或是可維護性方面的狀況。接著會開始介紹 react client component 和 react server component 各是什麼，還會講解 react server component 的限制，以及該如何利用 react server component 與 react client component 建立更好的結構！最後還有提供範例，真的很讚！</p>\n<!-- summary -->\n<h3 id=\"mastering-javascript-shorthands\"><a class=\"direct-link\" href=\"#mastering-javascript-shorthands\">#</a> <a href=\"https://hackernoon.com/mastering-javascript-shorthand-tips-for-beginners?source=rss\">Mastering JavaScript Shorthands</a></h3>\n<p>在 JavaScript 裡面，會有許多方便的寫法可以讓開發者避免寫下許多條件判斷，讓程式碼更精簡（當然是在合理範圍內的精簡 😂），例如：物件的解構、透過短路來決定是否執行方法，和問號判斷 null 及 undefined 都非常好用！那還有什麼其他的簡寫方式呢？快看看文章中還列了哪些吧！</p>\n<h3 id=\"chrome-debugger-is-easier-to-use-than-you-might-think\"><a class=\"direct-link\" href=\"#chrome-debugger-is-easier-to-use-than-you-might-think\">#</a> <a href=\"https://dev.to/this-is-learning/chrome-debugger-is-easier-to-use-than-you-might-think-c8\">Chrome Debugger is easier to use than you might think</a></h3>\n<p>雖然目前已經很少在用 debugger 配合 Chrome 的開發者工具來除錯了，但是記得剛從 <a href=\"http://asp.net\">asp.net</a> 轉到前端工程師時，真的很懷念那可以讓我一行一行執行，然後看每個變數現在值是什麼，以及現在跑到哪的中斷點。也許現在都較習慣用 console.log，不過有時候在找 bug 時就是需要一些靈感，所以將這些工具都先放到包包裡，總會有某個靈機一動的時機讓你想起來還有它！</p>\n",
      "date_published": "2023-08-08T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/179/smalltown-179/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/179/smalltown-179/",
      "title": "第 179 期 GenAI 推薦文章",
      "content_html": "<!-- summary -->\n<h2 id=\"genai\"><a class=\"direct-link\" href=\"#genai\">#</a> GenAI</h2>\n<h3 id=\"%E5%81%87%E5%A6%82%E7%94%9F%E6%88%90%E5%BC%8F-ai-%E7%94%A2%E7%94%9F%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC%E9%83%BD%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E7%9A%84%E8%A9%B1...\"><a class=\"direct-link\" href=\"#%E5%81%87%E5%A6%82%E7%94%9F%E6%88%90%E5%BC%8F-ai-%E7%94%A2%E7%94%9F%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC%E9%83%BD%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E7%9A%84%E8%A9%B1...\">#</a> <a href=\"https://blog.blackhc.net/2022/12/llm_software_engineering/\">假如生成式 AI 產生的程式碼都可以直接使用的話...</a></h3>\n<p>雖然自己有透 GitHub Copilot 和 ChatGPT 來增加生產力，但其實他產生出來的程式碼還是需要人工來檢查、修改，才能真正使用。最近看到一個叫做 LLM Strategy 工具提出來的想法滿不錯的，當工程師在撰寫 Python 時，只需要在程式碼上面加上 Decorator，例如: @llm_strategy(OpenAI(max_tokens=256))，那麼在接下來的 Class Method 中就只需要寫上需求註解，不需要撰寫程式碼，GenAI 就會幫你把需要的程式碼補完 (看附圖應該可以更好理解)<br>\n或許在不久的將來，當 GenAI 產生的程式碼都可以直接使用時，工程師就可以專注在需求上，而不需要花時間在撰寫程式碼上，寫程式的門檻也會更低！</p>\n<!-- summary -->\n<h3 id=\"%E6%9C%89%E6%B2%92%E6%9C%89-on-premise-%E7%9A%84-chatgpt-%E5%95%8A%EF%BC%9F%EF%BC%81\"><a class=\"direct-link\" href=\"#%E6%9C%89%E6%B2%92%E6%9C%89-on-premise-%E7%9A%84-chatgpt-%E5%95%8A%EF%BC%9F%EF%BC%81\">#</a> <a href=\"https://github.com/imartinez/privateGPT\">有沒有 On Premise 的 ChatGPT 啊？！</a></h3>\n<p>在雲端世界的解決方案中，企業常常因為資料安全性的考量，而不願意將資料上傳到雲端，這時候就會需要採購 On Premise 的版本，那在生成式 AI 的領域裡有沒有類似 ChatGPT 的 On Premise 的版本呢？<br>\n答案當然是肯定的，目前有看到幾個比較多人使用的專案，分別是 ColossalChat, privateGPT,  localGPT，其中 privateGPT 使用的 LLM 為 GPT4All，localGPT 則是使用 Vicuna-7B，推薦給有類似需求的人</p>\n<ul>\n<li><a href=\"https://github.com/hpcaitech/ColossalAI/tree/main/applications/Chat\">ColossalChat</a></li>\n<li><a href=\"https://github.com/imartinez/privateGPT\">privateGPT</a></li>\n<li><a href=\"https://github.com/PromtEngineer/localGPT\">localGPT</a></li>\n</ul>\n<h3 id=\"%E9%96%8B%E7%99%BC-ai-%E6%87%89%E7%94%A8%E6%9C%8D%E5%8B%99%E8%A6%81%E6%80%8E%E9%BA%BC%E6%8A%93%E8%9F%B2%3F\"><a class=\"direct-link\" href=\"#%E9%96%8B%E7%99%BC-ai-%E6%87%89%E7%94%A8%E6%9C%8D%E5%8B%99%E8%A6%81%E6%80%8E%E9%BA%BC%E6%8A%93%E8%9F%B2%3F\">#</a> <a href=\"https://blog.langchain.dev/announcing-langsmith/\">開發 AI 應用服務要怎麼抓蟲?</a></h3>\n<p>一般來說，開發 Web 或是 Mobile App 時，都會使用諸如 Sentry 或是 Rollbar 的服務來協助追蹤程式遇到的問題，那在開發 AI App 時，要怎麼抓蟲和監控問題的發生呢?</p>\n<p>在生成式 AI 開發框架中，相信不少人都是使用 #LangChain，而其實它也有推出類似的服務產品，也就是今天要提到的 #LangSmith，底下將介紹他所提供的重要功能</p>\n<ul>\n<li>Debugging: 視覺化使用者與 AI App 互動過程中每一個步驟輸入以及輸出 AI Model 的資訊，同時還會給出不預期的結果，錯誤，延遲時間，Token 的使用量，讓開發者有線索可以去找出可能是哪個地方出了問題；並且讓開發者可以直接從 LangSmith 的 UI 去做範例的測試，不用再複製貼上去 OpenAI Playground</li>\n<li>Testing: 軟體測試最直接的方式，不外乎就是修改程式碼，然後把資料丟進去後觀察輸出有沒有符合預期，而 AI App 測試時，會需要比較多的輸入資料，LangSmith 讓開發者可以快速從正在追蹤的問題，或是透過手動上傳的方式來建立資料集，開發者就可以立刻輕鬆的使用他們來測試撰寫的 Chain 和 Prompt 是否符合預期</li>\n<li>Monitoring: 程式當然不會再開發完成就結束了，當服務在線上持續運行時，時時刻刻監控其狀態是相當重要的，透過 LangSmith 可以去監控 AI App 的運行效能，例如延遲和成本，同時也要追蹤 Model 和 Chain 的運行效能，並且可以建立儀表板來了解目前使用者的使用狀況與體驗</li>\n</ul>\n",
      "date_published": "2023-07-25T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/179/larry-179/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/179/larry-179/",
      "title": "第 179 期 Golang 推薦文章",
      "content_html": "<h2 id=\"golang\"><a class=\"direct-link\" href=\"#golang\">#</a> Golang</h2>\n<h3 id=\"caching-golang-tests-in-ci\"><a class=\"direct-link\" href=\"#caching-golang-tests-in-ci\">#</a> <a href=\"https://www.airplane.dev/blog/caching-golang-tests-in-ci\">Caching Golang tests in CI</a></h3>\n<p>這篇文章作者的公司 Airplane 用 Go 來開發產品，並且在每次有新 commit 時就在 Github Action 上跑單元測試。但因為單元測試跑得時間太久了（可能測試寫太多了，真是一間好公司XD），因此他們用了 cache 來大幅加速。如果你的公司也有測試太多要跑很久的問題，那也可以參考看看這篇文章的做法哦～</p>\n<h3 id=\"built-in-functions-in-go-1.21\"><a class=\"direct-link\" href=\"#built-in-functions-in-go-1.21\">#</a> <a href=\"https://antonz.org/go-1-21-builtins/\">Built-in functions in Go 1.21</a></h3>\n<p>Go 從版本 1.21 開始又多了 min、max、clear 三個內建函數，這篇文章用很簡短的幾個例子帶你看看他們，以後寫程式的時候就可以直接拿來用啦！</p>\n<h3 id=\"random-testing-in-go\"><a class=\"direct-link\" href=\"#random-testing-in-go\">#</a> <a href=\"https://bitfieldconsulting.com/golang/random-testing\">Random testing in Go</a></h3>\n<p>這一系列講 Go Fuzzing Test 的四篇文章終於寫完啦，看完這四篇，除了會對 Fuzzing Test 有基本的認識之外，應該也會知道怎麼用他來找出一些奇怪的 bug。如果你對 Go 的基本語法還有單元測試已經非常熟悉，那現在來學 Fuzzing Test 剛剛好。</p>\n",
      "date_published": "2023-07-25T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/179/gqsm-179/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/179/gqsm-179/",
      "title": "第 179 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"the-end-of-front-end-development\"><a class=\"direct-link\" href=\"#the-end-of-front-end-development\">#</a> <a href=\"https://www.joshwcomeau.com/blog/the-end-of-frontend-development/\">The End of Front-End Development</a></h3>\n<p>近幾年來 AI 急速成長，有許多前端工程師都會認為自己會被 AI 所取代，因為他們甚至能夠根據畫在紙上的 UI，產生對應的 HTML、CSS 和 JavaScript，這聽起來非常可怕，也讓許多前端工程師開始焦慮自己是否要繼續走下去。但是作者在這篇文章中指出，早在 CSS 誕生後的兩年內，第一個號稱不需要寫任何程式碼就能建構網站的 Homestead 就誕生了，但是現在前端工程師絕種了嗎？並沒有。而作者也有從其他面向去討論 AI 對軟體工程師的影響，最推薦的是最後一段寫給有熱忱的開發者的一段話。早上醒來看完這篇文章，心裡的暖都分不清到底是來自於作者的文字還是夏天的太陽。</p>\n<h3 id=\"the-modern-way-of-serving-images\"><a class=\"direct-link\" href=\"#the-modern-way-of-serving-images\">#</a> <a href=\"https://kurtextrem.de/posts/modern-way-of-img\">The modern way of serving images</a></h3>\n<p>文章中一開始用數據表示，從 HTTP Archive 收集到的資訊當中，至少 70% 的網站都利用當作網站裡最吸引人的部分，但只有 34% 使用了 <code>&lt;img srcset&gt;</code> 建立響應式和高效能的圖片顯示。作者會在文章中解釋為什麼我們會需要建立響應式的圖片，以及我們要如何利用 <code>&lt;img srcset&gt;</code> 和 <code>&lt;picture&gt;</code> 改善顯示或載入圖片時，在網頁遇到的常見問題以及使用者體驗！</p>\n<h3 id=\"zedux%3A-is-this-the-one%3F\"><a class=\"direct-link\" href=\"#zedux%3A-is-this-the-one%3F\">#</a> <a href=\"https://omnistac.github.io/zedux/blog/zedux-is-this-the-one\">Zedux: Is this the one?</a></h3>\n<p>Zedux 是為最自由的 React 所建立的狀態管理工具，它潛伏了 5 年多仔細研究 React 狀態管理工具的生態，然後將各種狀態管理工具的優點全部 all for one 到自己身上。Zedux 中的 atom 參考了 Recoil，也吸收了 React Query 擁有簡單版本的 query 和 mutation，其中也包含 Redux 和 Jotai 的所有功能。那看來只要學習這套，之後怎麼鬼轉其他狀態管理工具都沒問題了。 😂</p>\n",
      "date_published": "2023-07-25T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/178/gqsm-178/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/178/gqsm-178/",
      "title": "第 179 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"the-case-against-self-closing-tags-in-html\"><a class=\"direct-link\" href=\"#the-case-against-self-closing-tags-in-html\">#</a> <a href=\"https://jakearchibald.com/2023/against-self-closing-tags-in-html/\">The case against self-closing tags in HTML</a></h3>\n<p>作者喜歡 Prettier，但他對於 Prettier 中的自我關閉 <code>/&gt;</code> 感到相當不認同，認為這並非純 HTML 下的產物，只是因為歷史沿革而產生的一種通融，也對於其他人支持的「<code>/&gt;</code> 讓初學者不必學習哪種標籤為自動關閉」的意見回應了自己的看法，也用了較相似了例子 JSX 進來比較，或是從編譯的角度來看待 <code>/&gt;</code>。是一篇很有趣的文章！</p>\n<h3 id=\"how-react-18-improves-application-performance\"><a class=\"direct-link\" href=\"#how-react-18-improves-application-performance\">#</a> <a href=\"https://vercel.com/blog/how-react-18-improves-application-performance\">How React 18 Improves Application Performance</a></h3>\n<p>文章一開始會先從 JavaScript 的 Main thread 和 Long tasks 開始說起，解釋有哪些因素會影響到效能，也有稍微介紹一些 web 指標，將讀者帶入效能對使用者的影響層面。接著就開始介紹 React 18 做的 Transitions、Suspense 和 React Server Components 等相關功能是如何提高應用程序性能的！文章裡面的圖片遠遠大於範例的程式碼內容，非常容易理解！</p>\n<h3 id=\"tailwind-css-tips-and-tricks-worth-knowing\"><a class=\"direct-link\" href=\"#tailwind-css-tips-and-tricks-worth-knowing\">#</a> <a href=\"https://www.builder.io/blog/tailwind-css-tips-and-tricks\">Tailwind CSS Tips and Tricks Worth Knowing</a></h3>\n<p>這篇文章會提到許多在使用 tailwind CSS 的一些技巧，和你可能採到坑的部分，我覺得非常適合剛剛在學習 tailwind CSS 的讀者閱讀！像是文章一開始提到的動態顏色，因為 tailwind 會幫你移除沒用到的樣式名稱，讓 CSS 在打包過後的 size 較小，所以動態顏色就不能這麼做 <code>className={</code>bg-${color}-500<code>}</code>，你必須得讓完整的樣式名稱能夠被 tailwind 抓到。</p>\n",
      "date_published": "2023-07-25T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/178/larry-178/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/178/larry-178/",
      "title": "第 178 期 職涯規劃 推薦文章",
      "content_html": "<h2 id=\"%E8%81%B7%E6%B6%AF%E8%A6%8F%E5%8A%83\"><a class=\"direct-link\" href=\"#%E8%81%B7%E6%B6%AF%E8%A6%8F%E5%8A%83\">#</a> 職涯規劃</h2>\n<h3 id=\"%E5%8D%9A%E5%BC%88%E5%85%AC%E5%8F%B8%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%94%9F%E6%B4%BB%EF%BC%9A%E6%8F%AD%E9%96%8B%E7%A5%9E%E7%A7%98%E9%9D%A2%E7%B4%97%EF%BC%8C%E6%A9%9F%E6%9C%83%E8%88%87%E6%8C%91%E6%88%B0%E4%B8%A6%E5%AD%98\"><a class=\"direct-link\" href=\"#%E5%8D%9A%E5%BC%88%E5%85%AC%E5%8F%B8%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%94%9F%E6%B4%BB%EF%BC%9A%E6%8F%AD%E9%96%8B%E7%A5%9E%E7%A7%98%E9%9D%A2%E7%B4%97%EF%BC%8C%E6%A9%9F%E6%9C%83%E8%88%87%E6%8C%91%E6%88%B0%E4%B8%A6%E5%AD%98\">#</a> <a href=\"https://israynotarray.com/other/20230626/4076164354/\">博弈公司的工程師生活：揭開神秘面紗，機會與挑戰並存</a></h3>\n<p>對博弈產業倒底在做什麼很好奇嗎？六角學院的 Ray 以自身經驗和朋友的見聞，揭開了這個神秘產業的面紗。從工作內容、技術需求，再到待遇和風險，都有詳細的解釋和分析。如果你對博弈產業有興趣，這篇文章非常值得一讀！</p>\n<h3 id=\"how-to-have-a-successful-software-engineering-internship\"><a class=\"direct-link\" href=\"#how-to-have-a-successful-software-engineering-internship\">#</a> <a href=\"https://www.yangshuntay.com/blog/how-to-have-successful-software-engineering-internship\">How to have a Successful Software Engineering Internship</a></h3>\n<p>好不容易拿到了在軟體公司實習的機會，但又怕自己的表現不好嗎？這篇文章提供了一系列實用的建議，如果最近正好在暑假實習，那也許可以參考看看文中的作法，讓自己在實習過程中可以學到最多的東西。</p>\n<h3 id=\"%E6%83%B3%E6%8F%90%E5%8D%87%E6%BC%94%E7%AE%97%E6%B3%95%E9%9D%A2%E8%A9%A6%E7%9A%84%E5%AF%A6%E5%8A%9B%E5%97%8E%EF%BC%9F%E4%BE%86%E5%8F%83%E5%8A%A0%E7%A8%8B%E5%BC%8F%E7%AB%B6%E8%B3%BD%E5%90%A7%EF%BC%81\"><a class=\"direct-link\" href=\"#%E6%83%B3%E6%8F%90%E5%8D%87%E6%BC%94%E7%AE%97%E6%B3%95%E9%9D%A2%E8%A9%A6%E7%9A%84%E5%AF%A6%E5%8A%9B%E5%97%8E%EF%BC%9F%E4%BE%86%E5%8F%83%E5%8A%A0%E7%A8%8B%E5%BC%8F%E7%AB%B6%E8%B3%BD%E5%90%A7%EF%BC%81\">#</a> <a href=\"https://link.medium.com/xHT5OxIbFAb\">想提升演算法面試的實力嗎？來參加程式競賽吧！</a></h3>\n<p>如果想要讓自己的演算法實力大幅提升，以通過面試中的 coding test，那不妨參加看看演算法競賽。但作者在文中也提到，雖然演算法競賽和 coding test 看似相似，但其實有很大的差異，特別是在溝通和表達能力上。因此除了把演算法練扎實之外，還是得花一些時間練習表達自己的思路，才可以在面試中過關斬將。</p>\n",
      "date_published": "2023-07-11T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/177/larry-177/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/177/larry-177/",
      "title": "第 177 期 System Design 推薦文章",
      "content_html": "<h2 id=\"system-design\"><a class=\"direct-link\" href=\"#system-design\">#</a> System Design</h2>\n<h3 id=\"redis-%E8%88%87%E4%BD%9C%E8%80%85-antirez-%E7%9A%84%E6%95%85%E4%BA%8B\"><a class=\"direct-link\" href=\"#redis-%E8%88%87%E4%BD%9C%E8%80%85-antirez-%E7%9A%84%E6%95%85%E4%BA%8B\">#</a> <a href=\"https://blog.brachiosoft.com/redis\">Redis 與作者 antirez 的故事</a></h3>\n<p>軟體考古系列又來啦！這次的主角是大家都和熟悉的 Redis。這篇文章就像一部電影，帶你走過 antirez 的早年生活，看他如何從一個資料庫的門外漢，變成創造出 Redis 的英雄。如果你對資料庫有興趣，或者你也是一個狂熱的 Redis 迷，那千萬不能錯過這篇文章！</p>\n<h3 id=\"system-design-%E2%80%94-scaling-from-zero-to-millions-of-users\"><a class=\"direct-link\" href=\"#system-design-%E2%80%94-scaling-from-zero-to-millions-of-users\">#</a> <a href=\"https://medium.com/geekculture/system-design-scaling-from-zero-to-millions-of-users-deca270ef784\">System Design — Scaling from Zero to Millions Of Users</a></h3>\n<p>從單一 user 到數百萬 user，這篇文章將帶你一步步了解如何水平擴展你的系統。不管是 Cache、CDN 還是 Message Queue，在這篇文章都有很清楚的解釋跟例子。如果你對系統設計完全沒有概念，那從這篇文章開始讀剛剛好！</p>\n<h3 id=\"migrating-netflix-to-graphql-safely\"><a class=\"direct-link\" href=\"#migrating-netflix-to-graphql-safely\">#</a> <a href=\"https://netflixtechblog.com/migrating-netflix-to-graphql-safely-8e1e4d4f1e72\">Migrating Netflix to GraphQL Safely</a></h3>\n<p>這篇文章出自 Netflix 的技術部落格，裡面說到 Netflix 是怎麼在 zero downtime 的情況下，將他的架構從 Falcor migrate 到 GraphQL，並分享了 migrate 過程中遇到的問題。如果你對 migration 或是 Netflix 用到的技術又興趣，那一定要讀讀這篇文章！</p>\n",
      "date_published": "2023-06-27T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/177/gqsm-177/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/177/gqsm-177/",
      "title": "第 177 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"reducing-complexity-in-front-end-development\"><a class=\"direct-link\" href=\"#reducing-complexity-in-front-end-development\">#</a> <a href=\"https://css-irl.info/reducing-complexity-in-front-end-development/\">Reducing Complexity in Front End Development</a></h3>\n<p>這篇文章主要是在分享作者在 <a href=\"https://heypresents.com/conferences/2023\">All Day Hey</a> 裡面最喜歡的一個議程 <a href=\"https://heypresents.com/talks/abstractions-complexities-and-off-ramps\">Abstractions, complexities and off-ramps</a>，議程內容主要是在說，現代開發都會傾向於尋找現有的解決方案，然後從 npm 把第三方套件下載下來使用，但如此一來前端的專案其實是失去掌控的，因為在那些第三方套件中有太多複雜性，你不確定他何時和什麼原因會使專案出錯。此議程會帶你分析這些複雜性，以及提供你能夠逐步解決的方式。推薦大家可以點進文章看看！如果有時間也可以看完整個議程！ 🙌</p>\n<h3 id=\"usehooks\"><a class=\"direct-link\" href=\"#usehooks\">#</a> <a href=\"https://usehooks.com/\">useHooks</a></h3>\n<p>相信有在使用 React 的開發者，對於自己寫 hooks 來說應該是家常便飯了，而這個意外看到的 repository 就是將各種常用的操作，像是 debounce、toggle、mouse 等等，然後把它們的邏輯包成方便使用的 Hooks！且網站中的每個 hooks 都有對應的 Demo 和程式碼，如果不想要下載整個套件也可以直接複製到專案用！</p>\n<h3 id=\"%F0%9F%91%8B-say-goodbye-to-spread-operator%3A-use-default-composer\"><a class=\"direct-link\" href=\"#%F0%9F%91%8B-say-goodbye-to-spread-operator%3A-use-default-composer\">#</a> <a href=\"https://aralroca.com/blog/default-composer\">👋 Say Goodbye to Spread Operator: Use Default Composer</a></h3>\n<p>在 JavaScript 裡面使用解構產生新的物件賦值是很常見的操作，還能夠用一個有預設值的物件搭配有值的物件做到組合的效果，產生出一個「有更新值就用新值，沒有的話就用預設值」的物件出來，但如果是單層的物件還好操作，如果是巢狀的物件就會有點麻煩了，這篇文章就是在介紹 <a href=\"https://github.com/aralroca/default-composer\">default-composer</a> 這個第三方套件，讓我們可以更容易地做到相同的事情。</p>\n",
      "date_published": "2023-06-27T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/176/luka-176/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/176/luka-176/",
      "title": "第 176 期 Backend 推薦文章",
      "content_html": "<h2 id=\"backend-%26-data-engineering\"><a class=\"direct-link\" href=\"#backend-%26-data-engineering\">#</a> Backend &amp; Data Engineering</h2>\n<h3 id=\"%5B%E4%B8%AD%5D-backend-for-front-end-(bff)\"><a class=\"direct-link\" href=\"#%5B%E4%B8%AD%5D-backend-for-front-end-(bff)\">#</a> <a href=\"https://lukatw.medium.com/dc8fdcae1208\">[中] Backend for Front-End (BFF)</a></h3>\n<p>在過去，應用程式相對簡單，瀏覽器向網路應用程式端點發送請求，後者從資料庫中擷取資料並回傳響應。然而，隨著移動客戶端與其他應用程式整合，這種簡單性被打破。本文介紹了一種處理這種複雜性的解決方案。</p>\n<p>傳統方法中，應用程式返回所有資料，然後由各個客戶端過濾不需要的部分。然而，移動客戶端的頻寬有限，且不是所有手機都支援高速網路。因此，這種過度提取的方法不可行。</p>\n<p>面對這個問題，提出了面向前端的後端（BFF）的解決方案。BFF 將每個微服務中的邏輯移至一個專用的部署端點。這個端點負責從所需的微服務中擷取資料，過濾相關部分，將它們聚合並以符合特定客戶端需求的格式回傳。</p>\n<p>BFF 的概念是由負責前端的團隊開發和管理，這樣可以在提高開發速度的同時，提供與微服務相同的彈性。BFF 可以被視為獨立部署單元或 API 網關的一部分，取決於組織的需求。</p>\n<p>在性能方面，與巨石應用程式相比，使用 BFF 會增加額外的請求時間，但這些請求可以並行處理，因此對使用者體驗的影響相對較小。</p>\n<p>然而，每個組織都有不同的需求和情況，實施 BFF 之前應該仔細考慮系統架構、團隊組織和性能目標。</p>\n<h3 id=\"%5B%E4%B8%AD%5D-%E8%B3%87%E6%96%99%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9C%8B%E5%8F%B0%E7%81%A3%E8%81%B7%E5%A0%B4%E8%A7%80%E5%AF%9F%E8%88%87%E5%9B%9E%E9%A1%A7%EF%BC%9Adata-engineering-%E6%98%AF%E5%80%8B%E6%9C%89%E6%8C%91%E6%88%B0%EF%BC%86%E8%AE%8A%E5%8C%96%E7%9A%84%E9%A0%98%E5%9F%9F\"><a class=\"direct-link\" href=\"#%5B%E4%B8%AD%5D-%E8%B3%87%E6%96%99%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9C%8B%E5%8F%B0%E7%81%A3%E8%81%B7%E5%A0%B4%E8%A7%80%E5%AF%9F%E8%88%87%E5%9B%9E%E9%A1%A7%EF%BC%9Adata-engineering-%E6%98%AF%E5%80%8B%E6%9C%89%E6%8C%91%E6%88%B0%EF%BC%86%E8%AE%8A%E5%8C%96%E7%9A%84%E9%A0%98%E5%9F%9F\">#</a> <a href=\"https://www.technice.com.tw/experience/5349/\">[中] 資料工程師看台灣職場觀察與回顧：Data Engineering 是個有挑戰＆變化的領域</a></h3>\n<p>這篇文章是一位台灣資料工程師經歷的精彩冒險！作者畢業於國立大學資工系，對人工智慧充滿興趣。儘管在畢業專題時自學了類神經網路，卻被評為效果平平。然而，一年後回到現實世界，作者驚訝地發現最新潮的 Deep Learning 原來就是類神經網路的延伸應用！這讓他對資料和機器學習領域充滿了熱情。</p>\n<p>大學時期，作者曾在朋友的幫助下接案開發網站，但工作一年後，他感到了一絲索然無味。於是，他開始追逐自己對資料和機器學習領域的熱愛，經過一段時間的自學後，他慶幸地得到了布丁大大的賞識，並成功轉職為一名資料工程師！從此展開了他精彩刺激的職業生涯。</p>\n<p>資料工程師這個新興領域的範圍非常廣泛，從基礎服務到資料處理應用，甚至連分析和視覺化也可能涉及其中。每家公司對於資料工程師的需求都各不相同，有些想要一個能點石成金的魔法石，有些需要一個能治百病的仙丹，還有些只是需要一個能大肆宣傳的廣告看板。</p>\n<p>相較於後端工程師，資料工程師更像是一位水管工，主要負責串接和維護資料管線。然而，資料工程師的工作並不像後端工程師那樣龐大，而是由許多小元件組成一個完整的架構。不同的資料類型和後續應用對整體架構都有很大的影響，因此沒有一個簡單的最佳實踐方法。不過，近年來各大雲服務提供商提供了越來越完整的相關服務，為起步選擇提供了不錯的選項。</p>\n<p>作者提到，成為一名優秀的資料工程師需要不斷學習和探索，保持對新技術的敏感度。除了技術上的挑戰外，溝通和合作也是非常重要的，因為資料工程師往往需要與不同團隊合作，並將資料轉化為有價值的洞察。</p>\n<p>這位資料工程師的職業生涯展示了一個從追求熱愛到實現夢想的故事，並且強調了資料工程師的重要性和多樣性。無論是對資料和機器學習充滿興趣，還是尋求一個充滿挑戰和成就感的職業，資料工程師都是一個令人嚮往的選擇！</p>\n<h3 id=\"%5B%E4%B8%AD%5D-%E6%8A%8A-rabbitmq-%E6%8F%9B%E6%88%90-postgresql-%E7%9A%84%E9%82%A3%E7%AF%87%E6%96%87%E7%AB%A0\"><a class=\"direct-link\" href=\"#%5B%E4%B8%AD%5D-%E6%8A%8A-rabbitmq-%E6%8F%9B%E6%88%90-postgresql-%E7%9A%84%E9%82%A3%E7%AF%87%E6%96%87%E7%AB%A0\">#</a> <a href=\"https://blog.gslin.org/archives/2023/04/12/11138/%E6%8A%8A-rabbitmq-%E6%8F%9B%E6%88%90-postgresql-%E7%9A%84%E9%82%A3%E7%AF%87%E6%96%87%E7%AB%A0/\">[中] 把 RabbitMQ 換成 PostgreSQL 的那篇文章</a></h3>\n<p>這篇摘要的文章是從 Hacker News 引用的，原文標題為「SQL Maxis: Why We Ditched RabbitMQ and Replaced It with a Postgres Queue」，作者在文章中討論了將 RabbitMQ 替換為 PostgreSQL 的原因和結果。</p>\n<p>文章中指出了一些值得吐槽的點，並且這些點在 Hacker News 上也被提到。其中有人指出他們遇到了一個錯誤（或特性），但沒有解決該錯誤，而是選擇直接改寫程式碼，將其改為使用 PostgreSQL 解決，這種做法很奇怪。另一個吐槽的點是關於量的部分，如果處理的量不大，降低技術堆疊使用 PostgreSQL 可能是一個不錯的決定。然而，有人質疑為什麼一開始要使用 RabbitMQ。同一個討論串中也有人提到處理的量實在太小，甚至開玩笑地說可以使用 Jenkins 來處理。</p>\n<p>此外，一位名叫 Simon Willison 的人提到了 RabbitMQ 到目前為止仍然不支援 ACID 等級的工作排程，特別是耐久性的部分。他認為使用 PostgreSQL 作為佇列的好處是可以利用事務，只有在相關資料已經完全寫入資料庫且不可能發生佇列記錄未寫入的情況下才將工作放入佇列。同時他還推薦使用資料庫中的交易性「暫存」佇列，然後由另一個獨立的過程將其寫入實際佇列。</p>\n<p>總結來說，原文中的公司在遇到 RabbitMQ 消費者程式庫和設定的問題時，決定換成 PostgreSQL，而不是解決問題。這引起了一些討論，並且有人對這種做法表示懷疑。同時，原文還提到了使用 PostgreSQL 作為佇列後端的優勢，特別是能夠利用事務來確保資料的完整性。然而，人們也提出了一些關於處理量和選擇技術堆疊的問題。</p>\n",
      "date_published": "2023-06-13T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/176/larry-176/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/176/larry-176/",
      "title": "第 176 期 Golang 推薦文章",
      "content_html": "<h2 id=\"golang\"><a class=\"direct-link\" href=\"#golang\">#</a> Golang</h2>\n<h3 id=\"solid-principles-with-go-examples-every-developer-should-master\"><a class=\"direct-link\" href=\"#solid-principles-with-go-examples-every-developer-should-master\">#</a> <a href=\"https://towardsdev.com/solid-principles-with-go-examples-every-developer-should-master-6bc6f9f2b6ab\">SOLID Principles with Go Examples Every Developer Should Master</a></h3>\n<p>大家應該都聽過 SOLID 中的五個原則，他們目的就是為了讓你的程式碼更好維護。但知道歸知道，能不能實際運用又是另外一回事，所以這篇文章就用了超多例子來講解怎麼在 Go 中符合 SOLID 的程式碼。雖然 Go 不是一個典型 OOP 的語言也沒有所謂繼承，但用 interface 還有 composition 還是一樣可以寫出很漂亮的程式碼！</p>\n<h3 id=\"chatgpt%2C-wardley-and-go\"><a class=\"direct-link\" href=\"#chatgpt%2C-wardley-and-go\">#</a> <a href=\"https://blog.owulveryck.info/2023/05/30/chatgpt-wardley-and-go.html\">ChatGPT, Wardley and Go</a></h3>\n<p>自從 ChatGPT 開放 plugin 功能之後，各種 plugin 就如雨後春筍般一直冒出來，而這篇文章正是教你怎麼用 Go 寫一個自己的 plugin。看完這篇文章後，你就能知道 ChatGPT 跟 plugin 的溝通流程，還有怎麼在 ChatGPT 上面畫圖XD，是非常有趣的一篇文章～</p>\n<h3 id=\"finding-the-best-go-project-structure\"><a class=\"direct-link\" href=\"#finding-the-best-go-project-structure\">#</a> <a href=\"https://avivcarmi.com/finding-the-best-go-project-structure-part-1/\">Finding The Best Go Project Structure</a></h3>\n<p>關於怎麼規劃專案的目錄結構，一直以來都是個沒有標準答案的問題，而這個系列文嘗試比較了各種目錄結構的優缺點，如果你最近有打算開一個新專案的話，可以先參考看看這個系列文，讓你的程式碼更好管理。</p>\n",
      "date_published": "2023-06-13T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/175/luka-175/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/175/luka-175/",
      "title": "第 175 期 Backend 推薦文章",
      "content_html": "<h2 id=\"backend\"><a class=\"direct-link\" href=\"#backend\">#</a> Backend</h2>\n<h3 id=\"postgresql-%E6%8A%80%E8%A1%93%E7%AD%86%E8%A8%98%3A-%E8%B7%9F%E7%96%BE%E7%AE%A1%E7%BD%B2%E6%B2%92%E6%9C%89%E9%97%9C%E4%BF%82%E7%9A%84-cdc\"><a class=\"direct-link\" href=\"#postgresql-%E6%8A%80%E8%A1%93%E7%AD%86%E8%A8%98%3A-%E8%B7%9F%E7%96%BE%E7%AE%A1%E7%BD%B2%E6%B2%92%E6%9C%89%E9%97%9C%E4%BF%82%E7%9A%84-cdc\">#</a> <a href=\"https://medium.com/dcardlab/218e27eb363d\">PostgreSQL 技術筆記: 跟疾管署沒有關係的 CDC</a></h3>\n<p>本文介紹了 Dcard 中使用 PostgreSQL CDC（Change Data Capture）的運作原理。Dcard 的系統架構中，許多服務元件使用 PostgreSQL 進行資料儲存。為了避免直接使用生產資料庫對效能和安全性造成影響，Dcard 採用了 Microservices 架構，將不同服務獨立部署在各自的 PostgreSQL 資料庫中。</p>\n<p>為了方便管理和查詢，Dcard 的開發團隊開發了一個 OfflineDB Proxy 服務，通過該服務可以使用特定的 on-demand 服務來存取和管理 PostgreSQL 複本資料庫。在此基礎上，開發了 PostgreSQL CDC 技術，使複本資料庫能夠提供近乎即時的資料。通過 CDC 服務，許多其他服務元件可以通過數據流的方式獲取資料庫的異動資料，從而保證了服務間的流程設計的完整性，提供更可靠和穩定的 Dcard 服務。</p>\n<p>文章介紹了各個模組間的設計概念，包括 OfflineDB Proxy、Snapshot Rotate Job、Postgres Protocol Handle 和 Resource Controller 等。此外，還介紹了使用 PostgreSQL Replication 機制來獲取異動資料，以及使用 Apache Pulsar 作為儲存 Change Data 的消息隊列服務。文章還提到了 pg2pulsar 和 pulsar2pg 兩個程序，用於處理 Change Data 的儲存和同步。最後，介紹了 CDC Stream Gateway，通過這個服務可以簡化應用程式與消息隊列之間的處理，提供給各種不同的流式應用程式使用。</p>\n<p>整個系統的架構和流程如圖所示，包括 OfflineDB Proxy、CDC、和 Stream Gateway。通過這些模塊的搭建和運作，可以實現 Dcard 的即時性和異動資料的同步更新，並提供給各種不同的應用程式使用。</p>\n<p>文章最後提到，目前 Dcard 已經在數十個 CDC Stream 應用中使用了這些技術，並且不斷進行優化和探索。同時，Dcard 還在計劃和開發其他類型資料庫的 CDC 服務，如 MongoDB 等。</p>\n<p>（文章中有多張圖片，請參閱原文瞭解詳細內容）</p>\n<h3 id=\"%E8%AA%B2%E7%A8%8B%E7%AD%86%E8%A8%98---%E5%8D%B3%E4%BD%BF%E9%80%9A%E8%A8%8A%E8%88%87%E5%82%B3%E8%BC%B8%EF%BC%88realtime%E3%80%81streaming%E3%80%81websocket%EF%BC%89\"><a class=\"direct-link\" href=\"#%E8%AA%B2%E7%A8%8B%E7%AD%86%E8%A8%98---%E5%8D%B3%E4%BD%BF%E9%80%9A%E8%A8%8A%E8%88%87%E5%82%B3%E8%BC%B8%EF%BC%88realtime%E3%80%81streaming%E3%80%81websocket%EF%BC%89\">#</a> <a href=\"https://pjchender.dev/webdev/course-fem-realtime/\">課程筆記 - 即使通訊與傳輸（realtime、streaming、websocket）</a></h3>\n<p>本篇摘要整理自 Frontend Masters 的 &quot;Complete Intro to Real-Time&quot; 課程。</p>\n<p>簡介了以下主題：Long Polling（輪詢）、使用 setTimeout、requestAnimationFrame、Backoff and Retry（放棄或重試）、HTTP/2 Push、WebSocket、以及 <a href=\"http://Socket.IO\">Socket.IO</a>。</p>\n<p>在 Long Polling（輪詢）中，透過 AJAX 方式持續向服務器發送請求。使用 setTimeout 而非 setInterval 來進行輪詢，避免在 API 回應慢時打多次 API 請求。另外，也介紹了 requestAnimationFrame 來替代 setTimeout，以達到更好的性能和節能效果。</p>\n<p>在 Backoff and Retry（放棄或重試）中，介紹了當 API 請求失敗時的處理機制，建議使用 backoff and retry 的方式，即在每次失敗後延遲一段時間再重試，並逐漸增加延遲時間。</p>\n<p>在 HTTP/2 Push 中，說明了建立 WebSocket 連線的過程，包括使用 self-signed 的憑證、回傳特定的 headers 等。並介紹了如何在後端和前端進行相應的程式碼實現，以及如何處理資料的傳遞。</p>\n<p>在自己實作 WebSocket 部分，提到了使用 WebSocket 和 HTTP 之間的協定升級過程，以及如何在後端和前端進行程式碼的實現。還提到了 WebSocket 中資料交換的格式和解析方法。</p>\n<p>最後，介紹了使用 <a href=\"http://Socket.IO\">Socket.IO</a> 來進行即時通訊的方式，並且提到了 <a href=\"http://Socket.IO\">Socket.IO</a> 相對於 WebSocket 和 ws 套件的優勢，包括自動重新連線、兼容性等。</p>\n<p>以上是本篇摘要的內容概要。詳細內容可參考相應的課程和資料來源。</p>\n",
      "date_published": "2023-05-31T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/175/rico-175/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/175/rico-175/",
      "title": "第 175 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"4-tools-that-make-it-easy-to-manage-your-kubernetes-cluster\"><a class=\"direct-link\" href=\"#4-tools-that-make-it-easy-to-manage-your-kubernetes-cluster\">#</a> <a href=\"https://medium.com/@onai.rotich/4-tools-that-make-it-easy-to-manage-your-kubernetes-cluster-be252847cd85\">4 Tools that Make it Easy to manage your Kubernetes Cluster</a></h3>\n<p>作者介紹了四個 Kubernetes 工具，K8sgpt、K9s、Lens 和 Rancher。其中最吸引的莫過於 K8sgpt，他會掃描整個 Kubrenetes 叢集後給予人性化的 troubleshooting 解答，也可以讓非維運人員看懂哪裡出問題。</p>\n<!-- summary -->\n<h3 id=\"recover-your-amazon-ec2-instance-when-ssh-key-pair-is-lost\"><a class=\"direct-link\" href=\"#recover-your-amazon-ec2-instance-when-ssh-key-pair-is-lost\">#</a> <a href=\"https://awstip.com/recover-your-amazon-ec2-instance-when-ssh-key-pair-is-lost-fd0626d02c19\">Recover your Amazon EC2 instance when SSH key pair is lost</a></h3>\n<p>新手剛開始使用 AWS 有很高機率遺失 ssh key，這篇文章一步一步帶著讀者怎麼挽救，原理就是把原本機器上的硬碟掛載到另外一台機器上（中間有許多小障礙文章都有解法），之後把新的 .ssh/authorized_keys 複製到硬碟上，再把硬碟掛載回舊的機器即可用新的 ssh key 連線到舊機器了。</p>\n<h3 id=\"how-to-learn-linux-shell-scripting-for-devops%3F\"><a class=\"direct-link\" href=\"#how-to-learn-linux-shell-scripting-for-devops%3F\">#</a> <a href=\"https://devopscube.com/linux-shell-scripting-for-devops/\">How to Learn Linux Shell Scripting for DevOps?</a></h3>\n<p>Linux shell script 是到哪裡都很萬用的工具，作者彙整了有關 shell script 學習資源、現實場景的範例、可能需要 shell script 的場景或面試時可能會遇到的問題。</p>\n",
      "date_published": "2023-05-30T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/175/larry-175/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/175/larry-175/",
      "title": "第 175 期 Golang 推薦文章",
      "content_html": "<h2 id=\"golang\"><a class=\"direct-link\" href=\"#golang\">#</a> Golang</h2>\n<h3 id=\"step-up-your-go-app-testing-game-with-the-testify-framework\"><a class=\"direct-link\" href=\"#step-up-your-go-app-testing-game-with-the-testify-framework\">#</a> <a href=\"https://semaphoreci.com/blog/testify-go\">Step up Your Go App Testing Game With the Testify Framework</a></h3>\n<p>如果你才剛開始在學 Go，那你絕對不能不知道 Testify 這個好用的 testing library，他幫你簡化了很多常用的操作譬如說 <code>assert.Equal</code> 跟 <code>assert.noError</code> 等等，讓你可以更快寫出正確的測試。除此之外，他也讓你可以輕鬆的造出一個 mock object，所以別猶豫，趕快讓 Testify 成為你的好幫手，讓你的測試寫起來更漂亮！</p>\n<h3 id=\"go-%E7%95%B6%E4%B8%AD%E7%9A%84-sync-pattern\"><a class=\"direct-link\" href=\"#go-%E7%95%B6%E4%B8%AD%E7%9A%84-sync-pattern\">#</a> <a href=\"https://code-pilot.me/synchronization-patterns-in-go\">Go 當中的 sync pattern</a></h3>\n<p>這篇文章比較進階一點，文中從 Mutex、Semaphore 講到 Channel，帶你看看這些不同的 sync pattern 各自有什麼優缺點。看完這篇文章之後，你就會知道在 Go 裡面要怎麼解決各種 multi thread 的問題！</p>\n<h3 id=\"swissmap%3A-a-smaller%2C-faster-golang-hash-table\"><a class=\"direct-link\" href=\"#swissmap%3A-a-smaller%2C-faster-golang-hash-table\">#</a> <a href=\"https://www.dolthub.com/blog/2023-03-28-swiss-map/\">SwissMap: A smaller, faster Golang Hash Table</a></h3>\n<p>SwissMap 聽起來像某一款高級巧克力的名字，但實際上，他是一個 Go 的 Hash Table package。他號稱比 Go 內建的 map 更快、記憶體的使用量也更少，是 Dolt 為了解決自身的問題而設計出來的。這篇文章講解了他們是怎麼設計跟實作 SwissMap，而且也提供了 Benchmark 給你參考，證明他們設計的這個 Hash Table 真的很不錯。</p>\n",
      "date_published": "2023-05-30T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/175/kashiwa-175/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/175/kashiwa-175/",
      "title": "第 175 期 Backend 推薦文章",
      "content_html": "<h2 id=\"backend\"><a class=\"direct-link\" href=\"#backend\">#</a> Backend</h2>\n<h3 id=\"load-balancing---introduction\"><a class=\"direct-link\" href=\"#load-balancing---introduction\">#</a> <a href=\"https://samwho.dev/load-balancing/\">Load Balancing - Introduction</a></h3>\n<p>（由 <a href=\"https://kashiwachen.substack.com/\">Kashiwa</a> 推薦）這篇文章言簡意賅地介紹了負載均衡於網頁請求和返回之間的關係，並且分析了負載均衡所想要解決的問題：dropped request 和 latency。而且文章還有很多圖片跟動畫幫助你理解，如果想了解 Load Balancing 更多的話很推薦這篇文章</p>\n",
      "date_published": "2023-05-30T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/174/rico-174/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/174/rico-174/",
      "title": "第 174 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"4-core-principles-of-gitops\"><a class=\"direct-link\" href=\"#4-core-principles-of-gitops\">#</a> <a href=\"https://thenewstack.io/4-core-principles-of-gitops/\">4 Core Principles of GitOps</a></h3>\n<p>OpenGitOps 社群表示 GitOps 的四個核心原則：</p>\n<!-- summary -->\n<ol>\n<li>GitOps 是宣告式的</li>\n<li>GitOps 是有版本控管且不可變動的。期望的狀態是要能夠歷史追蹤的</li>\n<li>GitOps 的服務能夠自動拉式部署的（GitOps 很多都是 pull-based 的方式部署）。例如使用 Flux 持續且漸進部署解決方案，而且兼具資安、迅速和可靠</li>\n<li>GitOps 的服務能夠持續性的和解（Reconciled）。能夠持續觀察系統狀態並且達到期望狀態，目前社群還在定義中，因為跟拉式部署的想法接近</li>\n</ol>\n<h3 id=\"kubernetes-community%3A-a-guide-to-open-source-localization\"><a class=\"direct-link\" href=\"#kubernetes-community%3A-a-guide-to-open-source-localization\">#</a> <a href=\"https://thenewstack.io/kubernetes-community-a-guide-to-open-source-localization/\">Kubernetes Community: A Guide to Open Source Localization</a></h3>\n<p>軟體技術的確還是以英文為大宗，在推廣的過程中語言仍是個隔閡，除了打破語言的限制，在地化也十分重要，而 Kubernetes 在地化就給大家很好的例子學習。</p>\n<h3 id=\"introducing-%22implement-dns-in-a-weekend%22\"><a class=\"direct-link\" href=\"#introducing-%22implement-dns-in-a-weekend%22\">#</a> <a href=\"https://jvns.ca/blog/2023/05/12/introducing-implement-dns-in-a-weekend/\">Introducing &quot;Implement DNS in a Weekend&quot;</a></h3>\n<p>作者用 Python 實作了 DNS 域名解析的小工具，從中複習 DNS 本身是怎麼運作的，而為了練習，只有用到標準的函式庫。作者也有開放大家下載程式碼，大約 200 多行。</p>\n",
      "date_published": "2023-05-16T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/174/larry-174/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/174/larry-174/",
      "title": "第 174 期 Golang 推薦文章",
      "content_html": "<h2 id=\"golang\"><a class=\"direct-link\" href=\"#golang\">#</a> Golang</h2>\n<h3 id=\"the-go-1.19-atomic-wrappers-and-why-to-use-them\"><a class=\"direct-link\" href=\"#the-go-1.19-atomic-wrappers-and-why-to-use-them\">#</a> <a href=\"https://medium.com/@deckarep/the-go-1-19-atomic-wrappers-and-why-to-use-them-ae14c1177ad8\">The Go 1.19 Atomic Wrappers and why to use them</a></h3>\n<p>自從 Go 1.19 開始，就有像是 <code>atomic.Int64</code> 這樣的型別，可以防止有人對變數做不是 atomic 的操作。譬如程式碼中有一個 <code>var counter atomic.Int64</code>，但你的同事忘記這個 <code>counter</code> 會被多個 goroutine 共用，所以他寫了 <code>counter++</code>，這時候 Go compiler 就會噴錯告訴你不可以這樣用，要乖乖寫 <code>counter.Add(1)</code> 才可以避免 data race，真的是很不錯的新功能～</p>\n<h3 id=\"6-tips-on-high-performance-go-%E2%80%94-advanced-go-topics\"><a class=\"direct-link\" href=\"#6-tips-on-high-performance-go-%E2%80%94-advanced-go-topics\">#</a> <a href=\"https://link.medium.com/H1s1blbsJzb\">6 Tips on High Performance Go — Advanced Go Topics</a></h3>\n<p>想要寫出更高效能的 Go 程式碼嗎？這篇文章講了幾個技巧跟工具，譬如說內建的 profiling tool 跟 benchmark，幫助你找出 Go 程式中潛在的效能問題。如果想讓你的 Go 功力更上一層樓，那可以看看這篇文章。</p>\n<h3 id=\"go-generic-repo\"><a class=\"direct-link\" href=\"#go-generic-repo\">#</a> <a href=\"https://link.medium.com/RNYVq0x56yb\">Go Generic Repo</a></h3>\n<p>Go 從 1.18 開始支援泛型，但在實務上還是不常看到泛型的運用。而這篇文章給了一個很不錯的例子，用非常少的程式碼寫出一個通用的 Repository 跟 Model，不只寫起來漂亮，而且也非常好維護呢～</p>\n",
      "date_published": "2023-05-16T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/174/gqsm-174/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/174/gqsm-174/",
      "title": "第 174 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"css-blend-modes\"><a class=\"direct-link\" href=\"#css-blend-modes\">#</a> <a href=\"https://garden.bradwoods.io/notes/css/blend-modes\">CSS Blend Modes</a></h3>\n<p>CSS 的應用一直是開發 Web 時很迷人的部分，在寫 CSS 的時候都會有種自己是藝術家而不是工程是的錯覺。這篇文章介紹了 CSS 中的 <code>background-blend-mode</code> 和 <code>mix-blend-mode</code> 語法，他們能夠讓你去混合兩個元素重疊的像素，讓原圖擁有新的效果，有點像 <code>filter</code> 但效果又更強了！</p>\n<!-- summary -->\n<h3 id=\"naming%3A-every-developer's-nightmare\"><a class=\"direct-link\" href=\"#naming%3A-every-developer's-nightmare\">#</a> <a href=\"https://dev.to/samuel-braun/naming-every-developers-nightmare-3ge8\">Naming: Every Developer's Nightmare</a></h3>\n<p>這篇文章主要在討論命名的重要性，也有提供一個他在工作上遇到的例子，以及如何去改善。其中作者也有提供他自己整理的命名規則給大家參考，只要有個模式去思考命名，就不會每次要命名的時候都要苦惱很久。</p>\n<h3 id=\"the-most-common-mistakes-when-using-react\"><a class=\"direct-link\" href=\"#the-most-common-mistakes-when-using-react\">#</a> <a href=\"https://claritydev.net/blog/the-most-common-mistakes-when-using-react\">The Most Common Mistakes When Using React</a></h3>\n<p>文章中介紹幾個剛在學習 React 的時候常會碰到的一些誤區，如果不小心踩到的話還可能會影導致 bug 或是網頁直接 crash，如果你曾經踩過幾個 React 的雷，不如看一下文章中還有沒有自己可能漏掉的部分。</p>\n",
      "date_published": "2023-05-16T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/173/rico-173/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/173/rico-173/",
      "title": "第 173 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"no-one-should-ever-write-a-single-line-of-terraform-code\"><a class=\"direct-link\" href=\"#no-one-should-ever-write-a-single-line-of-terraform-code\">#</a> <a href=\"https://medium.com/@mike_tyson_cloud/no-one-should-ever-write-a-single-line-of-terrafom-code-5488d95211a8\">No one should ever write a single line of Terraform code</a></h3>\n<p>標題下「不應該有人撰寫任何一行 Terraform 程式碼」真是直擊我心，作者介紹 Terraform Cloud 的限制，並介紹用圖像表示 infra 的 <a href=\"https://www.brainboard.co/\">Brainboard</a>，可以讓非專攻 infra 的人可以一目了然整個架構，降低溝通的高牆。</p>\n<!-- summary -->\n<h3 id=\"kubecon-panel%3A-how-platform-engineering-benefits-developers\"><a class=\"direct-link\" href=\"#kubecon-panel%3A-how-platform-engineering-benefits-developers\">#</a> <a href=\"https://thenewstack.io/kubecon-panel-how-platform-engineering-benefits-developers/\">KubeCon Panel: How Platform Engineering Benefits Developers</a></h3>\n<p>在歐洲舉辦的 KubeCon + CloudNativeCon 其中議程探討 platform engineering（平台工程）如何幫助開發人員，大方向依舊是替企業創造價值，讓開發人員隨心所欲，但是一切都符合 security、企業合規和公司文化等等的要求，甚至 GiaLab 自己用的 platform 就是產品本身，以身作則。最近 platform engineering 在這三年崛起，是時候擁抱這股趨勢。</p>\n<h3 id=\"cloud-native-projects-usage-stats-in-2022-based-on-cncf-survey-data\"><a class=\"direct-link\" href=\"#cloud-native-projects-usage-stats-in-2022-based-on-cncf-survey-data\">#</a> <a href=\"https://blog.palark.com/cncf-cloud-native-projects-usage-stats-2022/\">Cloud-native projects usage stats in 2022 based on CNCF Survey data</a></h3>\n<p>CNCF 基金會調查市場 Cloud Native 專案使用狀況，執得一提的是 CloudEvents 從 6.8% 升到 21.8% 的 production 環境使用率，這次的成長或許會影響台灣對工具的選擇。而不用說 Kubernetes, Helm 和 Prometheus 使用率還是非常的高，而 security 相關的專案使用率都偏低，也看得出大家對 security 的優先順序是偏低的。</p>\n",
      "date_published": "2023-05-02T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/173/larry-173/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/173/larry-173/",
      "title": "第 173 期 TypeScript 推薦文章",
      "content_html": "<h2 id=\"typescript\"><a class=\"direct-link\" href=\"#typescript\">#</a> TypeScript</h2>\n<h3 id=\"%E8%BB%9F%E9%AB%94%E8%80%83%E5%8F%A4%E7%B3%BB%E5%88%97%EF%BC%9Ajson-%E7%9A%84%E6%95%85%E4%BA%8B\"><a class=\"direct-link\" href=\"#%E8%BB%9F%E9%AB%94%E8%80%83%E5%8F%A4%E7%B3%BB%E5%88%97%EF%BC%9Ajson-%E7%9A%84%E6%95%85%E4%BA%8B\">#</a> <a href=\"https://www.ptt.cc/bbs/Soft_Job/M.1681181114.A.E85.html\">軟體考古系列：JSON 的故事</a></h3>\n<p>前陣子在 PTT Soft_Job 版上看到一個軟體考古系列覺得很有趣，這篇是在講說 JSON 這個世界通用的資料格式究竟是怎麼出現的，而且文中也有講到 JavaScript 跟 Java 到底是什麼關係。雖然沒有什麼技術含量，但偶爾看一些軟體業的江湖軼事還滿好玩的XD。</p>\n<h3 id=\"6-advanced-typescript-tricks-for-clean-code\"><a class=\"direct-link\" href=\"#6-advanced-typescript-tricks-for-clean-code\">#</a> <a href=\"https://link.medium.com/WAobjk8nazb\">6 Advanced TypeScript tricks for Clean Code</a></h3>\n<p>TypeScript 在前後端領域的生態已經非常成熟，現在甚至很少聽到有公司是直接寫 JavaScript 的了。而身為 TS 的開法者，如果你想要讓自己對於 TypeScript 的掌握度更高、寫出更好維護的程式碼，那這篇文章講解了 TS 裡面比較進階的幾個小技巧。保證可以讓你寫出來的程式碼更漂亮！</p>\n<h3 id=\"handling-errors-like-a-pro-in-typescript\"><a class=\"direct-link\" href=\"#handling-errors-like-a-pro-in-typescript\">#</a> <a href=\"https://engineering.udacity.com/handling-errors-like-a-pro-in-typescript-d7a314ad4991\">Handling errors like a pro in TypeScript</a></h3>\n<p>要把錯誤處理做得漂亮一直以來都不是容易的事，這篇文章的作者以他多年的經驗，提出了一套設計模式來幫助你把 TypeScript 中的錯誤處理寫得更漂亮，雖然不一定適合每個人的使用情境，但還是可以參考看看。</p>\n",
      "date_published": "2023-05-02T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/172/luka-172-js/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/172/luka-172-js/",
      "title": "第 172 期 JavaScript 推薦文章",
      "content_html": "<h2 id=\"javascript\"><a class=\"direct-link\" href=\"#javascript\">#</a> JavaScript</h2>\n<h3 id=\"%5B%E8%8B%B1%5Djavascript-%E7%AD%89%E6%96%BC%E7%AD%89%E6%96%BC%E8%B8%A9%E5%9C%B0%E9%9B%B7%E9%81%8A%E6%88%B2\"><a class=\"direct-link\" href=\"#%5B%E8%8B%B1%5Djavascript-%E7%AD%89%E6%96%BC%E7%AD%89%E6%96%BC%E8%B8%A9%E5%9C%B0%E9%9B%B7%E9%81%8A%E6%88%B2\">#</a> <a href=\"https://eqeq.js.org/\">[英]JavaScript 等於等於踩地雷遊戲</a></h3>\n<p>在提醒了 JavaScript 的 == 的恐懼之後，踩地雷遊戲將感覺像在公園散步一樣輕鬆。如果您需要深入瞭解，ECMAScript 規範的 7.2.14 節將對您有所幫助，否則呢？除非您有充分的理由，否則請使用三個等號（===）。</p>\n<h3 id=\"%5B%E8%8B%B1%5D2023-web-framework-performance-report-%7C-astro\"><a class=\"direct-link\" href=\"#%5B%E8%8B%B1%5D2023-web-framework-performance-report-%7C-astro\">#</a> <a href=\"https://astro.build/blog/2023-web-framework-performance-report/\">[英]2023 Web Framework Performance Report | Astro</a></h3>\n<p>此報告的目的是通過現實世界的數據來更好地了解框架選擇、性能和實際用戶體驗在 Web 上的關係。我們將嘗試回答一些關鍵問題：</p>\n<ul>\n<li>現代 Web 框架在現實使用和性能方面的比較如何？</li>\n<li>框架選擇是否會影響網站的核心 Web 視覺效果？</li>\n<li>框架選擇與 JavaScript 載荷大小有多大關聯，以及其影響如何？</li>\n</ul>\n<p>為此，我們查看了三個不同的公開可用數據集：</p>\n<ul>\n<li><a href=\"https://developer.chrome.com/docs/crux/\">Chrome 用戶體驗報告（CrUX）</a> 提供了有關實際 Chrome 用戶在 Web 上體驗熱門目的地的用戶體驗指標。</li>\n<li><a href=\"https://httparchive.org/\">HTTP 存檔</a> 通過定期收集 Lighthouse 性能數據來跟踪和報告超過 1500 萬個網站的性能。</li>\n<li><a href=\"https://discuss.httparchive.org/t/new-dashboard-the-core-web-vitals-technology-report/2178\">核心 Web 視覺效果技術報告</a> 收集了前兩個數據集中的有用見解。</li>\n</ul>\n<h3 id=\"%5B%E8%8B%B1%5Da-business-case-for-sveltekit\"><a class=\"direct-link\" href=\"#%5B%E8%8B%B1%5Da-business-case-for-sveltekit\">#</a> <a href=\"https://elliscs.hashnode.dev/a-business-case-for-sveltekit\">[英]A Business Case for SvelteKit</a></h3>\n<p>這篇文章講述了作者在 XtendOps 工作期間，如何將公司的技術堆棧轉換為 SvelteKit 框架的過程。文章詳細介紹了作者在評估 SvelteKit 可行性時需要解決的問題，並分享了他們如何應對這些問題的解決方案。通過使用 SvelteKit，作者的團隊成功地實現了更好的開發體驗和技術性能，並且對公司的業務產生了實際影響。文章最後還提供了一些有用的建議，以協助其他公司在轉換到 SvelteKit 時取得成功。</p>\n",
      "date_published": "2023-04-18T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/172/luka-172-ai/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/172/luka-172-ai/",
      "title": "第 172 期 AI 推薦文章",
      "content_html": "<h2 id=\"ai\"><a class=\"direct-link\" href=\"#ai\">#</a> AI</h2>\n<h3 id=\"%5B%E8%8B%B1%5Delon-musk-%E6%82%84%E6%82%84%E5%95%9F%E5%8B%95%E6%96%B0%E7%9A%84%E4%BA%BA%E5%B7%A5%E6%99%BA%E6%85%A7%E5%85%AC%E5%8F%B8-x.ai%EF%BC%8C%E6%8C%91%E6%88%B0-openai\"><a class=\"direct-link\" href=\"#%5B%E8%8B%B1%5Delon-musk-%E6%82%84%E6%82%84%E5%95%9F%E5%8B%95%E6%96%B0%E7%9A%84%E4%BA%BA%E5%B7%A5%E6%99%BA%E6%85%A7%E5%85%AC%E5%8F%B8-x.ai%EF%BC%8C%E6%8C%91%E6%88%B0-openai\">#</a> <a href=\"https://venturebeat.com/ai/elon-musk-quietly-starts-x-ai-a-new-artificial-intelligence-company-to-challenge-openai/\">[英]Elon Musk 悄悄啟動新的人工智慧公司 X.AI，挑戰 OpenAI</a></h3>\n<p>根據最新報導，特斯拉創始人 Elon Musk 將推出一家名為 <a href=\"http://X.AI\">X.AI</a> 的新人工智慧（AI）初創公司，直接競爭 OpenAI。據《金融時報》報導，Musk 已經開始組建 AI 研究和工程師團隊，並與 SpaceX 和 Tesla 的幾位投資者談過支持他的新 AI 初創公司的事宜。此外，他還購買了約 1 萬個圖形處理單元（GPU）來為新的 AI 項目提供支持。然而，這一決定引起了 OpenAI 聯合創始人 Sam Altman 的擔憂。此前，Musk 在 OpenAI 的董事會上辭職，並批評該組織追求人工通用智慧（AGI）的做法。這次，Musk 的新冒險是在他表達對人工智慧潛在危險的擔憂和對監管和監督的需要之後而進行的。</p>\n<h3 id=\"%5B%E8%8B%B1%5D-%E7%82%BA%E4%BB%80%E9%BA%BC%E8%B2%A0%E8%B2%AC%E4%BB%BB%E7%9A%84-ai-%E5%B0%8E%E8%87%B4%E6%9B%B4%E6%BA%96%E7%A2%BA%E5%92%8C%E6%9C%89%E6%95%88%E7%9A%84-ai-%E6%A8%A1%E5%9E%8B%EF%BC%9F\"><a class=\"direct-link\" href=\"#%5B%E8%8B%B1%5D-%E7%82%BA%E4%BB%80%E9%BA%BC%E8%B2%A0%E8%B2%AC%E4%BB%BB%E7%9A%84-ai-%E5%B0%8E%E8%87%B4%E6%9B%B4%E6%BA%96%E7%A2%BA%E5%92%8C%E6%9C%89%E6%95%88%E7%9A%84-ai-%E6%A8%A1%E5%9E%8B%EF%BC%9F\">#</a> <a href=\"https://venturebeat.com/ai/algorithms-auditing-algorithms-gpt-4-responsible-ai-beyond-human-scale/\">[英] 為什麼負責任的 AI 導致更準確和有效的 AI 模型？</a></h3>\n<p>負責任的 AI 定義了在設計、開發和部署 AI 模型時確保安全、公平和道德的承諾。通過確保模型按預期運行 - 並且不會產生不良結果 - 負責任的 AI 可以幫助增加信任，保護免受損害，並提高模型表現。</p>\n<p>為了負責，AI 必須是可理解的。這已經不是人類規模的問題了；我們需要算法來幫助我們理解算法。</p>\n<p><a href=\"https://openai.com/research/gpt-4\">GPT-4</a>，OpenAI 的 <a href=\"https://venturebeat.com/ai/whats-next-in-large-language-model-llm-research-heres-whats-coming-down-the-ml-pike/\">大型語言模型（LLM）</a> 的最新版本，是基於互聯網的文本和圖像進行訓練的，而我們都知道，互聯網充滿了不精確之處，從小的錯誤說法到完全的杜撰。儘管這些錯誤本身可能很危險，但它們也必然產生不太準確和智能的 AI 模型。負責任的 AI 可以幫助我們解決這些問題，並朝著開發更好的 AI 前進。具體而言，負責任的 AI 可以：</p>\n<ol>\n<li>** 減少偏見 **：負責任的 AI 專注於解決開發過程中可能被建立到 AI 模型中的偏見。通過積極努力在數據收集、訓練和實施過程中消除偏見，AI 系統變得更加準確，為更廣泛的用戶提供更好的結果。</li>\n<li>** 增強普遍性 **：負責任的 AI 鼓勵開發在不同情境和不同人群中表現良好的模型。通過確保 AI 系統在各種情況下進行測試和驗證，可以增強這些模型的普遍性，從而產生更有效和適應性的解決方案。</li>\n<li>** 確保透明度 **：負責任的 AI 強調 AI 系統的透明度的重要性，使用戶和利益相關者更容易理解決策是如何做出的以及 AI 的運作方式。這包括提供算法、數據來源和潛在限制的可理解解釋。通過促進透明度，負責任的 AI 促進了信任和責任，使用戶能夠做出知情決策，促進了對 AI 模型的有效評估和改進。</li>\n</ol>\n<h3 id=\"%5B%E8%8B%B1%5Dopenai-%E7%9A%84%E9%A6%96%E5%B8%AD%E5%9F%B7%E8%A1%8C%E5%AE%98%E8%A1%A8%E7%A4%BA%EF%BC%8C%E5%B7%A8%E5%9E%8B-ai-%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%99%82%E4%BB%A3%E5%8D%B3%E5%B0%87%E7%B5%90%E6%9D%9F%EF%BC%9Bgpu-%E5%8D%B1%E6%A9%9F%E5%8F%AF%E8%83%BD%E6%98%AF%E5%85%B6%E4%B8%AD%E4%B8%80%E5%80%8B%E5%8E%9F%E5%9B%A0%E3%80%82\"><a class=\"direct-link\" href=\"#%5B%E8%8B%B1%5Dopenai-%E7%9A%84%E9%A6%96%E5%B8%AD%E5%9F%B7%E8%A1%8C%E5%AE%98%E8%A1%A8%E7%A4%BA%EF%BC%8C%E5%B7%A8%E5%9E%8B-ai-%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%99%82%E4%BB%A3%E5%8D%B3%E5%B0%87%E7%B5%90%E6%9D%9F%EF%BC%9Bgpu-%E5%8D%B1%E6%A9%9F%E5%8F%AF%E8%83%BD%E6%98%AF%E5%85%B6%E4%B8%AD%E4%B8%80%E5%80%8B%E5%8E%9F%E5%9B%A0%E3%80%82\">#</a> <a href=\"https://venturebeat.com/ai/openai-chief-says-age-of-giant-ai-models-is-ending-a-gpu-crisis-could-be-one-reason-why/\">[英]OpenAI 的首席執行官表示，巨型 AI 模型的時代即將結束；GPU 危機可能是其中一個原因。</a></h3>\n<p>OpenAI CEO Sam Altman 認為，人工智能模型不斷變大的時代即將結束。Skyworth AI 應用研發技術中心副總經理陳瑩認為，在大數據時代，人工智能的「三高」問題——高成本、高門檻和高風險——是制約人工智能發展的主要阻礙。成本問題是人工智能發展的瓶頸之一。如今，隨著大數據的快速增長，人工智能的計算需求越來越高，計算成本也不斷增加。目前，以 Nvidia 為代表的 GPU 廠商正在推出一系列面向人工智能的 GPU。這些 GPU 的價格高昂，單價甚至可以達到 3 萬美元以上。此外，GPU 的使用壽命也較短，需要不斷更新。</p>\n",
      "date_published": "2023-04-18T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/172/larry-172/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/172/larry-172/",
      "title": "第 172 期 System Design 推薦文章",
      "content_html": "<h2 id=\"system-design\"><a class=\"direct-link\" href=\"#system-design\">#</a> System Design</h2>\n<h3 id=\"restful-api%3A-how-to-design-paths-and-identify-resources\"><a class=\"direct-link\" href=\"#restful-api%3A-how-to-design-paths-and-identify-resources\">#</a> <a href=\"https://homuchen.com/posts/restful-api-how-to-design-paths-and-identify-resources/\">RESTful API: How to design paths and identify resources</a></h3>\n<p>設計 RESTful API 應該已經是後端工程師的必備技能了，這篇文章會教你怎麼從「資源」的角度下去進行設計，讓 Client 在使用時更加方便、符合直覺。</p>\n<h3 id=\"instagram-system-design\"><a class=\"direct-link\" href=\"#instagram-system-design\">#</a> <a href=\"https://link.medium.com/YigXEzFQEyb\">Instagram System Design</a></h3>\n<p>大家應該都用過 Instagram，如果想要自己寫一個 Instagram，那你會怎麼實作呢？這篇文章講了怎麼設計一個類似 Instagram 的 App，另外，文中也有提到怎麼進行容量估算、以及如何做資料庫的設計等等，如果對於大型系統的設計有興趣，那一定要看看這篇文章！</p>\n<h3 id=\"blue-green-deployment-for-node.js-without-kubernetes\"><a class=\"direct-link\" href=\"#blue-green-deployment-for-node.js-without-kubernetes\">#</a> <a href=\"https://semaphoreci.com/blog/blue-green-deployment-nodejs\">Blue Green Deployment for Node.js Without Kubernetes</a></h3>\n<p>如果你對於怎麼用 CI/CD 來做藍綠部署有興趣，那你來對地方了！這篇文章介紹了藍綠部署的基本原理，並且跟你說在沒有 K8s 的情況下，要怎麼自己把藍綠部署的流程串起來，不管是理論還是實務方面都講得非常完整哦～</p>\n",
      "date_published": "2023-04-18T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/171/luka-171/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/171/luka-171/",
      "title": "第 171 期 JavaScript 推薦文章",
      "content_html": "<h2 id=\"javascript\"><a class=\"direct-link\" href=\"#javascript\">#</a> JavaScript</h2>\n<h3 id=\"%E5%8A%A0%E9%80%9F-javascript-%E7%9A%84%E7%94%9F%E6%85%8B%E7%B3%BB%E7%B5%B1%EF%BC%9Anpm-scripts\"><a class=\"direct-link\" href=\"#%E5%8A%A0%E9%80%9F-javascript-%E7%9A%84%E7%94%9F%E6%85%8B%E7%B3%BB%E7%B5%B1%EF%BC%9Anpm-scripts\">#</a> <a href=\"https://javascriptweekly.com/link/137370/web\">加速 JavaScript 的生態系統：npm Scripts</a></h3>\n<p>這是一系列關於提升 JavaScript 生態系統性能的有趣系列的最新作品。作者 Marvin 這樣解釋：</p>\n<blockquote>\n<p><code>npm scripts</code> 是 JavaScript 開發人員經常執行的。<br>\n儘管它們使用頻率很高，但它們沒有進行，而且增加了約 400 毫秒的開銷。<br>\n在本文中，我們將其降低到了約 22 毫秒。</p>\n</blockquote>\n<p>Marvin 在這裡所做的是所有開發人員都應該學習的一項寶貴技能。- from JS Weekly</p>\n<h3 id=\"playwright-v1.32-%E2%80%93-%E7%8F%BE%E5%9C%A8%E6%9C%89-ui-%E6%A8%A1%E5%BC%8F%E4%BA%86\"><a class=\"direct-link\" href=\"#playwright-v1.32-%E2%80%93-%E7%8F%BE%E5%9C%A8%E6%9C%89-ui-%E6%A8%A1%E5%BC%8F%E4%BA%86\">#</a> <a href=\"https://javascriptweekly.com/link/137372/web\">Playwright v1.32 – 現在有 UI 模式了</a></h3>\n<p>這個熱門的 Web 測試和自動化框架正在向 Cypress 等，前端測試工具，提供更多的基礎建設。最新的「UI 模式」，讓你在 UI 環境中探索、運行和調試測試。<a href=\"https://javascriptweekly.com/link/137373/web\">▶️ 這個影片</a> 提供了一個很好的介紹。- from JS Weekly</p>\n<h3 id=\"%E6%88%91%E5%80%91%E7%82%BA%E4%BB%80%E9%BA%BC%E8%A6%81%E6%B7%BB%E5%8A%A0%E5%B0%8D-deno-%E4%B8%AD%E7%9A%84-package.json-%E7%9A%84%E6%94%AF%E6%8C%81\"><a class=\"direct-link\" href=\"#%E6%88%91%E5%80%91%E7%82%BA%E4%BB%80%E9%BA%BC%E8%A6%81%E6%B7%BB%E5%8A%A0%E5%B0%8D-deno-%E4%B8%AD%E7%9A%84-package.json-%E7%9A%84%E6%94%AF%E6%8C%81\">#</a> <a href=\"https://javascriptweekly.com/link/137374/web\">我們為什麼要添加對 Deno 中的 <code>package.json</code> 的支持</a></h3>\n<p><a href=\"https://javascriptweekly.com/link/137375/web\">Deno 1.32</a> 已經發布，改進了 <code>package.json</code> 的支持和更多內容。Deno 與 Node.js 有一些相似之處，但直到最近，它還沒有專注於支持 npm 模塊等 Node 功能。但隨著 Node 和 npm 的兼容性開始改善，團隊面臨了關於運行時優先級的問題。Ryan Dahl 在這裡闡述了更多關於他們的思想。 - from JS Weekly</p>\n",
      "date_published": "2023-04-04T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/171/larry-171/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/171/larry-171/",
      "title": "第 171 期 Go 推薦文章",
      "content_html": "<h2 id=\"golang\"><a class=\"direct-link\" href=\"#golang\">#</a> Golang</h2>\n<h3 id=\"defer-your-mutex-unlocks\"><a class=\"direct-link\" href=\"#defer-your-mutex-unlocks\">#</a> <a href=\"https://www.ribice.ba/defer-mutex-unlocks/\">Defer your mutex Unlocks</a></h3>\n<p>不得不說 Go 的 defer 真的是一個很好用的功能，除了避免不小心忘記釋放資源，如果 function 在執行的過程中意外發生了 panic，defer 還是會在正確的時間執行，所以不管在什麼情況下，只要是要釋放資源，都推薦使用 defer。</p>\n<h3 id=\"uber-go-style-guide\"><a class=\"direct-link\" href=\"#uber-go-style-guide\">#</a> <a href=\"https://github.com/uber-go/guide/blob/master/style.md\">Uber Go Style Guide</a></h3>\n<p>想知道大組織怎麼管理他們的程式碼風格嗎？這份文件是 Uber 在公司內實施的 Go guideline，透過這些規範可以讓他們避免一些常見的可讀性以及效能問題。</p>\n<h3 id=\"solid-principles%3A-explained-with-golang-examples\"><a class=\"direct-link\" href=\"#solid-principles%3A-explained-with-golang-examples\">#</a> <a href=\"https://dev.to/ansu/solid-principles-explained-with-golang-examples-5eh\">SOLID Principles: Explained with Golang Examples</a></h3>\n<p>SOLID 原則應該大家都聽過，但如果要應用到 Go 裡面，會有哪些地方需要注意呢？這篇文章舉了非常多例子，教你怎麼寫出 SOLID 的 Go 程式碼。為了在三個月後還看得懂自己寫的程式碼，當然要趕快學起來！</p>\n",
      "date_published": "2023-04-04T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/170/rico-170/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/170/rico-170/",
      "title": "第 170 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"how-to-build%2C-test-and-deploy-your-application-using-azure-and-github\"><a class=\"direct-link\" href=\"#how-to-build%2C-test-and-deploy-your-application-using-azure-and-github\">#</a> <a href=\"https://devblogs.microsoft.com/devops/how-to-build-test-and-deploy-your-application-using-azure-and-github/\">How to build, test and deploy your application using Azure and GitHub</a></h3>\n<p>當你使用的 git repository 是 GitHub、雲服務用 Azure 且剛好是用 Go 語言的話可以看看這篇入門部署教學，豐富詳盡的圖文手把手部署教學保證可以快速上手。</p>\n<!-- summary -->\n<h3 id=\"linkerd-and-ingress-controllers%3A-bringing-the-outside-world-in\"><a class=\"direct-link\" href=\"#linkerd-and-ingress-controllers%3A-bringing-the-outside-world-in\">#</a> <a href=\"https://www.cncf.io/blog/2023/03/15/linkerd-and-ingress-controllers-bringing-the-outside-world-in/\">Linkerd and ingress controllers: bringing the outside world in</a></h3>\n<p>Kubernetes Ingress 選擇繁多，為何 Linkerd 可以嶄露頭角呢？他帶來了無痛的 Service Mesh 使用體驗，但為了看到 client IP 我們還是得設定 <code>skip-incoming-ports</code> 不然就會看到 Linkerd 為連線的源頭。Linkerd 也會把封包送往 <code>Service</code> IP 而非 <code>Pod</code>，除非另外設定直接送往 <code>Pod</code> IP。文末也有提供 Linkerd 與其他受歡迎的 Ingress 工具比較，但不外乎都要設定的概念都大同小異。</p>\n<h3 id=\"how-to-use-kubernetes-events-for-effective-alerting-and-monitoring\"><a class=\"direct-link\" href=\"#how-to-use-kubernetes-events-for-effective-alerting-and-monitoring\">#</a> <a href=\"https://www.cncf.io/blog/2023/03/13/how-to-use-kubernetes-events-for-effective-alerting-and-monitoring/\">How to use Kubernetes events for effective alerting and monitoring</a></h3>\n<p>Kubernetes <code>Events</code> 是常用但比較少探討的主題（就代表是直觀好用的設計），這些可以靠 Grafana agent + Loki 做監控，而 <code>Events</code> 常見的有：</p>\n<ol>\n<li>狀態改變：像是 <code>Pod</code> 有生成新的、pending、確定產生成功或失敗</li>\n<li>設定改變：像是節點水平擴張、垂直擴張的增加記憶體或硬碟等等</li>\n<li>調度：像是是否能夠下載容器 image、容器有沒有足夠的 cpu or memory 或容器 liveness or readiness 探針採樣失敗</li>\n</ol>\n<p>Events 的種類則有：</p>\n<ol>\n<li>失敗</li>\n<li>驅逐</li>\n<li>調度失敗</li>\n<li>硬碟</li>\n<li>節點</li>\n</ol>\n",
      "date_published": "2023-03-21T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/170/larry-170/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/170/larry-170/",
      "title": "第 170 期 後端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 後端開發</h2>\n<h3 id=\"%E8%87%AA%E5%8B%95%E5%8D%87%E7%B4%9A%E6%9B%B4%E6%96%B0%E5%9F%B7%E8%A1%8C%E4%B8%AD%E7%9A%84-docker-%E5%AE%B9%E5%99%A8%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88---watchtower\"><a class=\"direct-link\" href=\"#%E8%87%AA%E5%8B%95%E5%8D%87%E7%B4%9A%E6%9B%B4%E6%96%B0%E5%9F%B7%E8%A1%8C%E4%B8%AD%E7%9A%84-docker-%E5%AE%B9%E5%99%A8%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88---watchtower\">#</a> <a href=\"https://blog.wu-boy.com/2023/02/automating-docker-container-base-image-updates-cht/\">自動升級更新執行中的 Docker 容器解決方案 - watchtower</a></h3>\n<p>之前就有用過 watchtower 這個小工具，他會定期去幫你檢查 DockerHub（或其他 registry）是不是有新的 image 可以用，如果有的話他就會幫你拉下來重新啟動 container，所以他可以讓你的 container 隨時保持在最新的狀態。因此，我們可以用他來簡化部署流程：先把 watchtower 跑在你的 remote server 上，從此只要把新的 image 上傳到 registry 上，就會自動被部署到 production 上，真的很方便哦。</p>\n<h3 id=\"%E6%B7%BA%E8%AB%87%E5%90%84%E7%A8%AE%E8%B3%87%E6%96%99%E5%BA%ABcache%E7%AD%96%E7%95%A5%3A-cache-aside%E3%80%81read-through%E3%80%81write-through%E3%80%81write-back\"><a class=\"direct-link\" href=\"#%E6%B7%BA%E8%AB%87%E5%90%84%E7%A8%AE%E8%B3%87%E6%96%99%E5%BA%ABcache%E7%AD%96%E7%95%A5%3A-cache-aside%E3%80%81read-through%E3%80%81write-through%E3%80%81write-back\">#</a> <a href=\"https://homuchen.com/posts/databse-chache-strategies/\">淺談各種資料庫cache策略: cache aside、read through、write through、write back</a></h3>\n<p>以前跟 cache 還不熟的時候，從來沒有想過後端的 cache 有這麼多種可能。這篇文章簡單介紹了 cache aside、read through、write through、write back 這四種策略，並且比較他們各自的優缺點（一致性、讀取效能、寫入效能等等），如果你已經用過 Redis/Memcached，想更深入了解他們在各種情境的使用方式，那這篇文章一定要看看！</p>\n<h3 id=\"the-technology-behind-github%E2%80%99s-new-code-search\"><a class=\"direct-link\" href=\"#the-technology-behind-github%E2%80%99s-new-code-search\">#</a> <a href=\"https://github.blog/2023-02-06-the-technology-behind-githubs-new-code-search/\">The technology behind GitHub’s new code search</a></h3>\n<p>這篇文章的技術含量滿高的，在講 Github 後端是怎麼是怎麼做 code search 的功能，因為他們儲存了非常大量的程式碼，所以必須用特別的方式去儲存，才能很快地把結果搜尋出來～</p>\n",
      "date_published": "2023-03-21T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/170/gqsm-170/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/170/gqsm-170/",
      "title": "第 170 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"introducing-react.dev\"><a class=\"direct-link\" href=\"#introducing-react.dev\">#</a> <a href=\"https://react.dev/blog/2023/03/16/introducing-react-dev\">Introducing react.dev</a></h3>\n<p>React 團隊籌備已久的新文件總算是上線了！新的文件裡面移除了舊文件中保留的 Class Component 的介紹，讓讀者可以直接從 Hooks 開始學習 React，且除了基本的介紹以外，還會有挑戰的區塊，讓你驗證理解內容是否正確，當然也不會少了漂亮的圖來幫助釐清難懂的部分！</p>\n<!-- summary -->\n<h3 id=\"6-css-snippets-every-front-end-developer-should-know-in-2023\"><a class=\"direct-link\" href=\"#6-css-snippets-every-front-end-developer-should-know-in-2023\">#</a> <a href=\"https://web.dev/6-css-snippets-every-front-end-developer-should-know-in-2023/\">6 CSS snippets every front-end developer should know in 2023</a></h3>\n<p>文章中提到了以下幾個 CSS 的用法，可以用更少的語法來達到一些特定的效果，文章裡除了 Demo 外，還有特別註記該用法的瀏覽器支援度：</p>\n<ol>\n<li>A container query</li>\n<li>Scroll snap</li>\n<li>Grid pile</li>\n<li>Quick circle</li>\n<li>Control variants with @layer</li>\n<li>Memorize less and reach more with logical properties</li>\n</ol>\n<h3 id=\"send-large-files-from-frontend-to-the-backend\"><a class=\"direct-link\" href=\"#send-large-files-from-frontend-to-the-backend\">#</a> <a href=\"https://hsnice16.medium.com/send-large-files-from-frontend-to-the-backend-2f5f2414cc7c\">Send large files from frontend to the backend</a></h3>\n<p>文章中介紹了前端工程師如何利用 JavaScript 的 FileReader，將大型檔案的內容切分小塊傳給後端。</p>\n",
      "date_published": "2023-03-21T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/169/rico-169/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/169/rico-169/",
      "title": "第 169 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"how-spotify-adopted-and-outsourced-its-platform-mindset\"><a class=\"direct-link\" href=\"#how-spotify-adopted-and-outsourced-its-platform-mindset\">#</a> <a href=\"https://thenewstack.io/how-spotlify-adopted-platform-engineering-culture/\">How Spotify Adopted and Outsourced Its Platform Mindset</a></h3>\n<p>Spotify 的 Platform Mission 團隊把全公司 6000 工程師連結起來合作更有效率，讓新員工更上軌道的資料、文件和工具其實都不是 Platform Mission 團隊創造的，都是輔助其他部門撰寫，行銷團隊也會行銷內部工具促成團隊之間的合作。也有關於每位員工的職責是什麼的文件好讓跨團隊合作，甚至也有內部的使用者體驗調查。</p>\n<!-- summary -->\n<h3 id=\"the-broker-pattern-%26-how-it-works\"><a class=\"direct-link\" href=\"#the-broker-pattern-%26-how-it-works\">#</a> <a href=\"https://blog.devgenius.io/clean-architecture-s-broker-pattern-10bc08f57753\">The Broker Pattern &amp; how it works</a></h3>\n<p>一個大型架構勢必會有 borker 的存在，此篇撰寫了 borker 介紹、使用時機、功能和優缺點。基本上 borker 在現在架構中扮演重要的角色，可以讓 client 和 server 之間做解藕，減少依賴性，增加擴充性。</p>\n<h3 id=\"introducing-patcher%2C-a-new-tool-for-keeping-infrastructure-code-up-to-date!\"><a class=\"direct-link\" href=\"#introducing-patcher%2C-a-new-tool-for-keeping-infrastructure-code-up-to-date!\">#</a> <a href=\"https://medium.com/gruntwork/introducing-patcher-a-new-tool-for-keeping-infrastructure-code-up-to-date-e65b0c203b6b\">Introducing Patcher, a new tool for keeping infrastructure code up-to-date!</a></h3>\n<p>IaC 使用套件的管理是鮮少人探討的，例如 Terraform 使用的 modules，而 Gruntwork Patcher 會幫忙查找是否有新使用的套件版本後決定是否更新，之後使用者可以審視變更並且部署。</p>\n",
      "date_published": "2023-03-07T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/169/larry-169/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/169/larry-169/",
      "title": "第 169 期 資料庫 推薦文章",
      "content_html": "<h2 id=\"database\"><a class=\"direct-link\" href=\"#database\">#</a> Database</h2>\n<h3 id=\"%E6%B7%BA%E8%AB%87-database-partition.-centralized-and-distributed.\"><a class=\"direct-link\" href=\"#%E6%B7%BA%E8%AB%87-database-partition.-centralized-and-distributed.\">#</a> <a href=\"https://homuchen.com/posts/what-is-database-partition-sharding/\">淺談 Database Partition. Centralized and Distributed.</a></h3>\n<p>不得不說資料庫這領域真的是有很多學問，好幾年前我對資料庫還不太了解時，一直以為 sharding 跟 replication 是一樣的東西，反正就是開好幾台 DB instance 共同存放那些資料嘛XD。是後來慢慢深入了解後才知道兩個在概念上是完全不同的，如果你對 sharding、replication、partition 這些名詞還有點模糊的話，這篇文章解釋得很好哦～</p>\n<h3 id=\"database-%E4%B8%80%E4%BB%A3%E4%BB%A3%E7%9A%84%E6%BC%94%E5%8C%96%E5%92%8C%E5%82%B3%E6%89%BF\"><a class=\"direct-link\" href=\"#database-%E4%B8%80%E4%BB%A3%E4%BB%A3%E7%9A%84%E6%BC%94%E5%8C%96%E5%92%8C%E5%82%B3%E6%89%BF\">#</a> <a href=\"https://tachunwu.github.io/posts/db-history/\">Database 一代代的演化和傳承</a></h3>\n<p>早在電腦發明以前，就已經有儲存資料的需求，因此關於資料庫的理論從好幾十年前就開始有了。如果你對資料庫的演進有興趣的話，這篇文章會從 1980 年代的資料庫開始介紹起，一直講到近幾年比較新的資料庫，讓你知道每個時代的資料庫系統想要解決什麼問題，以及又有什麼相對應的優缺點。</p>\n<h3 id=\"is-offset-pagination-dead%3F-why-cursor-pagination-is-taking-over\"><a class=\"direct-link\" href=\"#is-offset-pagination-dead%3F-why-cursor-pagination-is-taking-over\">#</a> <a href=\"https://uxdesign.cc/why-facebook-says-cursor-pagination-is-the-greatest-d6b98d86b6c0\">Is offset pagination dead? Why cursor pagination is taking over</a></h3>\n<p>如果你有在後端實作過分頁功能，那你應該會知道有分成 offset based 跟 cursor based 兩種做法，這兩種做法各有他們的優缺點，如果你跟他們還不太熟悉的話，這篇文章有各種示意圖跟圖表，保證你看完就懂哦（這篇文真的寫得很好，但他是 member-only 的文章，所以可譨會需要開無痕模式來讀）</p>\n",
      "date_published": "2023-03-07T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/169/gqsm-169/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/169/gqsm-169/",
      "title": "第 169 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"css-tips-for-better-web-development\"><a class=\"direct-link\" href=\"#css-tips-for-better-web-development\">#</a> <a href=\"https://www.builder.io/blog/css-tips-for-better-web-development\">CSS Tips for Better Web Development</a></h3>\n<p>這篇文章列出一些 CSS 技巧，可以幫助開發者進一步優化網頁的設計和性能。以下是文章中提到的一些重點：</p>\n<ol>\n<li>使用 <code>scroll-snap</code> 來實作絲滑般的滑動輪播效果</li>\n<li>使用 <code>position</code> 和 <code>grid</code> 處理網頁的 header 和 footer</li>\n<li>利用 <code>position</code> 的 <code>sticky</code> 在捲軸時固定畫面中的某個區塊</li>\n<li>透過 <code>backdrop-filter</code> 處理圖片的各種濾鏡</li>\n<li>使用 <code>:before</code> 和 <code>:after</code> 的組合，或是 <code>clip-path</code> 裁切元素的任何形狀</li>\n</ol>\n<!-- summary -->\n<h3 id=\"scroll-animation\"><a class=\"direct-link\" href=\"#scroll-animation\">#</a> <a href=\"https://css-tricks.com/books/greatest-css-tricks/scroll-animation/\">Scroll Animation</a></h3>\n<p>本文講解了如何只用一個 JavaScript 的語法來提供當前頁面捲動的百分比，就能透過 CSS 實現隨著捲軸移動產生的動畫效果。一開先介紹如何通過 JavaScript 來設置 CSS 自定義屬性 <code>--scroll</code>，並且將這個值用於 CSS 中。接著展示如何使用 <code>animation-delay</code> 來實現圖像的旋轉，並通過調整 CSS 中的動畫延遲來實現基於捲動位置的動畫效果。最後也提供了一個範例，示範在 <code>:root</code> 中設置 <code>animation-delay</code> 屬性，控制頁面上的所有動畫。</p>\n<h3 id=\"debugging-javascript-like-a-pro%3A-tools-and-techniques-for-finding-and-fixing-bugs\"><a class=\"direct-link\" href=\"#debugging-javascript-like-a-pro%3A-tools-and-techniques-for-finding-and-fixing-bugs\">#</a> <a href=\"https://dev.to/iayeshasahar/debugging-javascript-like-a-pro-tools-and-techniques-for-finding-and-fixing-bugs-2lf5\">Debugging JavaScript Like a Pro: Tools and Techniques for Finding and Fixing Bugs</a></h3>\n<p>在文章裡提供了一些 JavaScript 的除錯工具和技巧，幫助開發者更快地找到和修復錯誤。作者分享的技巧和工具包括了瀏覽器開發者工具、console.log、debugger、linting 和單元測試等。除此之外還提到了常見的 JavaScript 錯誤，像是變數作用域、非同步問題等等，也提供解決這些問題的對應技巧。</p>\n",
      "date_published": "2023-03-07T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/168/rico-168/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/168/rico-168/",
      "title": "第 168 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"back-to-basics%3A-installing-nginx-open-source-and-nginx-plus\"><a class=\"direct-link\" href=\"#back-to-basics%3A-installing-nginx-open-source-and-nginx-plus\">#</a> <a href=\"https://www.nginx.com/blog/back-to-basics-installing-nginx-open-source-and-nginx-plus/\">Back to Basics: Installing NGINX Open Source and NGINX Plus</a></h3>\n<p>想必不少人對 Nginx 的設定依舊一知半解，官方提供的基礎影片以有結構的方式介紹 Nginx 本身與使用，是時候重溫基本功了。除了 open source 版本，也順便介紹 Nginx Plus 的付費版本。</p>\n<!-- summary -->\n<h3 id=\"how-do-you-gracefully-shut-down-pods-in-kubernetes\"><a class=\"direct-link\" href=\"#how-do-you-gracefully-shut-down-pods-in-kubernetes\">#</a> <a href=\"https://itnext.io/how-do-you-gracefully-shut-down-pods-in-kubernetes-fb19f617cd67\">How do you gracefully shut down pods in kubernetes</a></h3>\n<p>當你從 terminal 裡下達 kubectl delete pod 時會發生什麼事？發出 request 到 kube-apiserver 後移除 etcd 裡 IP 和 port 的網路資訊，etcd 再通知 CoreDNS、kube-proxy 或 Nginx-ingress 等等也要移除網路資訊。之後節點上的 kubelet 也會收到刪除 pod 的通知開始動作，會先看 preStop 、SIGTERM 最後才強制使用 SIGKILL。</p>\n<h3 id=\"secrets-management\"><a class=\"direct-link\" href=\"#secrets-management\">#</a> <a href=\"https://dzone.com/articles/secrets-management-1\">Secrets Management</a></h3>\n<p>密碼管理永遠是令人頭痛的點，此篇介紹一些該注意的點，不論是生產、測試、內部環境甚至服務本身以及 DevOps 相關的工具全部建議要有 RBAC、使用專門的密碼軟體和時常更新密碼，而且一個密碼軟體不太可能支援所有使用情境，所以選用正確的密碼軟體對應適當的情境。</p>\n",
      "date_published": "2023-02-21T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/168/larry-168/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/168/larry-168/",
      "title": "第 168 期 Golang 推薦文章",
      "content_html": "<h2 id=\"golang\"><a class=\"direct-link\" href=\"#golang\">#</a> Golang</h2>\n<h3 id=\"%E6%8A%8A-github-issue-%E7%95%B6%E6%88%90%E8%B3%87%E6%96%99%E5%BA%AB%E4%BE%86%E7%94%A8\"><a class=\"direct-link\" href=\"#%E6%8A%8A-github-issue-%E7%95%B6%E6%88%90%E8%B3%87%E6%96%99%E5%BA%AB%E4%BE%86%E7%94%A8\">#</a> <a href=\"https://www.evanlin.com/go-github-issue/\">把 Github Issue 當成資料庫來用</a></h3>\n<p>想要自己寫一個 Go Application 但又不想花錢租資料庫嗎？這邊提供一個把 Github Issue 拿來當資料庫的方法。只要你的流量不高，對於 DB read/write  的速度也不要太計較，那真的可以用 Github Issue 來當資料庫XD。</p>\n<h3 id=\"go-1.20-in-a-nutshell\"><a class=\"direct-link\" href=\"#go-1.20-in-a-nutshell\">#</a> <a href=\"https://appliedgo.com/blog/go-1-20-in-a-nutshell\">Go 1.20 in a nutshell</a></h3>\n<p>前幾週有分享一篇文章講 Go 1.20 有哪些新 feature，但那篇文章比較長，如果你懶得看太多細節，只想看懶人包了解一下 Go 1.20 的話XD，那可以看看這篇文章～</p>\n<h3 id=\"go-1.20-experiment%3A-memory-arenas-vs-traditional-memory-management\"><a class=\"direct-link\" href=\"#go-1.20-experiment%3A-memory-arenas-vs-traditional-memory-management\">#</a> <a href=\"https://pyroscope.io/blog/go-1-20-memory-arenas/\">Go 1.20 Experiment: Memory Arenas vs Traditional Memory Management</a></h3>\n<p>Go 在 1.20 推出的實驗性 feature - Memory Arenas 究竟能不能幫我們改善記憶體管理以及 GC 的效率呢？如果懶得自己研究的話，那我們來看看別人研究完的結果。結論是 Memory Arenas 在某些極端的情況下，確實可以幫你減少很多 overhead，但因為 Memory Arenas 仍然是實驗性的功能，如果要用在 Production 上的話還是要自己評估看看。</p>\n",
      "date_published": "2023-02-21T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/168/gqsm-168/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/168/gqsm-168/",
      "title": "第 168 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"moving-backgrounds\"><a class=\"direct-link\" href=\"#moving-backgrounds\">#</a> <a href=\"https://css-tricks.com/moving-backgrounds/\">Moving Backgrounds</a></h3>\n<p>相信各位平常在逛一些購物網站的時候，都會有一些產品的圖片可以看，且當你滑鼠移到圖片上面時，還可以根據目前滑鼠在的位置局部放大圖片，並且根據滑鼠移動改變放大的位置，這篇文章就是要來聊聊該如何實現這件事情！</p>\n<!-- summary -->\n<h3 id=\"use-maps-more-and-objects-less\"><a class=\"direct-link\" href=\"#use-maps-more-and-objects-less\">#</a> <a href=\"https://www.builder.io/blog/maps\">Use Maps more and Objects less</a></h3>\n<p>在 JavaScript 裡面，我們可以輕鬆的用 Object 來做到 key 和 value 的對照，但是即使這個方法很容易做到，也不代表你得這麼做。文章中介紹了 Map，可以在你需要操作類似 key 和 value 的對照時使用，並且從效能、使用限制、用 for 讀 key、內置排序等等許多面向探討 Map 與 Object 的不同。</p>\n<h3 id=\"advanced-typescript\"><a class=\"direct-link\" href=\"#advanced-typescript\">#</a> <a href=\"https://angularexperts.io/blog/advanced-typescript\">Advanced TypeScript</a></h3>\n<p>TypeScript 讓身為動態型別的 JavaScript 擁有更嚴禁的型別設定，但是該如何靈活定義這些型別也是需要一番功夫的。這篇文章就介紹了以下幾種設置以及限制型別的方式：</p>\n<ul>\n<li>Union and intersection types</li>\n<li>Keyof</li>\n<li>Typeof</li>\n<li>Conditional types</li>\n<li>Utility types</li>\n<li>Infer type</li>\n<li>Mapped types</li>\n</ul>\n<p>每一種方式都有給出範例的程式碼，並在程式碼中用註解來表示型別帶來的限制。</p>\n",
      "date_published": "2023-02-21T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/167/larry-167/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/167/larry-167/",
      "title": "第 167 期 Golang 推薦文章",
      "content_html": "<h2 id=\"golang\"><a class=\"direct-link\" href=\"#golang\">#</a> Golang</h2>\n<h3 id=\"designing-go-libraries%3A-the-talk%3A-the-article\"><a class=\"direct-link\" href=\"#designing-go-libraries%3A-the-talk%3A-the-article\">#</a> <a href=\"https://abhinavg.net/2022/12/06/designing-go-libraries/\">Designing Go Libraries: The Talk: The Article</a></h3>\n<p>如果你想要實作一個 Go library，不管是開源給外部使用者，還是作為內部 library 給公司專案用，這篇文章都很值得一讀。在這篇文章中有非常多的 case study，雖然文章很長，但讀完之後一定可以讓你設計出更好的 library。</p>\n<h3 id=\"what%E2%80%99s-new-in-go-1.20\"><a class=\"direct-link\" href=\"#what%E2%80%99s-new-in-go-1.20\">#</a> <a href=\"https://blog.carlmjohnson.net/post/2023/golang-120-arenas-errors-responsecontroller/\">What’s New in Go 1.20</a></h3>\n<p>Go 在今年的 2/1 發佈了新版本 1.20，在 Generic、Memory Management、Error Handling 等等方面都有一些改進，如果你跟我一樣是 Go 的粉絲，那麼一定不要錯過這次的更新！</p>\n<h3 id=\"writing-clean-and-efficient-table-driven-unit-tests-in-go\"><a class=\"direct-link\" href=\"#writing-clean-and-efficient-table-driven-unit-tests-in-go\">#</a> <a href=\"https://semaphoreci.com/blog/table-driven-unit-tests-go\">Writing Clean and Efficient Table-Driven Unit Tests in Go</a></h3>\n<p>大家都知道要寫測試，但要怎麼把測試寫漂亮呢？這篇文章介紹了 Table-Driven 這種撰寫測試的方式，並且教你怎麼寫出乾淨高效能的測試，如果你從來沒聽過 Table-Driven test 的話，這篇文章短短的而已可以簡單看一下～</p>\n",
      "date_published": "2023-02-07T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/167/gqsm-167/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/167/gqsm-167/",
      "title": "第 167 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"high-definition-css-color-guide\"><a class=\"direct-link\" href=\"#high-definition-css-color-guide\">#</a> <a href=\"https://developer.chrome.com/articles/high-definition-css-color-guide/\">High Definition CSS Color Guide</a></h3>\n<p>先說文長注意。CSS color 4 帶來了許多用來管理和處理顏色的工具，作者它寫了一篇指南涵蓋了這些新的功能。在指南中會學習到以下幾點：</p>\n<ul>\n<li>什麼是色域？</li>\n<li>人類的視覺範圍。</li>\n<li>什麼是色彩空間？</li>\n<li>如何使用更多顏色、新空間和嘗試結果。</li>\n<li>回顧典型的色彩空間。</li>\n<li>認識新的 Web 色彩空間。</li>\n<li>加權平均顏色。</li>\n<li>Gamut clamping（不知道怎麼翻 🥲）</li>\n<li>選擇色彩空間。</li>\n<li>轉換到 HD CSS 顏色。</li>\n<li>檢查色域和色彩空間支持。</li>\n<li>使用 Chrome DevTools 嘗試顏色。</li>\n</ul>\n<!-- summary -->\n<h3 id=\"why-react-isn't-dying\"><a class=\"direct-link\" href=\"#why-react-isn't-dying\">#</a> <a href=\"https://tkdodo.eu/blog/why-react-isnt-dying\">Why React isn't dying</a></h3>\n<p>文章中作者談論為何現在推特上正出現一些關於 React 正在枯萎，或是其他 Framework 比 React 更好的討論，其實比起文章我更喜歡第一則留言說，如果你不能放棄 100% 的向下相容，那你就會慢慢失去動力，這就是大家認為 React 已死的原因（遠望 Vue3）。</p>\n<h3 id=\"you%E2%80%99ve-got-options-for-removing-event-listeners\"><a class=\"direct-link\" href=\"#you%E2%80%99ve-got-options-for-removing-event-listeners\">#</a> <a href=\"https://www.macarthur.me/posts/options-for-removing-event-listeners\">You’ve Got Options for Removing Event Listeners</a></h3>\n<p>相信大家看到標題都直覺的想到了可以用 <code>removeEventListener</code> 來移除監聽的事件，但除此之外，文章裡還介紹了其他 3 種方法：</p>\n<ul>\n<li>使用 <code>addEventListener</code> 的第三個參數可以設置 once options。</li>\n<li>複製和替換整個節點。</li>\n<li>使用 <code>AbortController</code> 可修改複數的監聽事件。</li>\n</ul>\n<p>文末也有以上 4 種方式的選擇時機，大家可以參考看看！</p>\n",
      "date_published": "2023-02-07T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/166/rico-166/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/166/rico-166/",
      "title": "第 166 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"multi-cluster-management-for-kubernetes-with-cluster-api-and-argo-cd\"><a class=\"direct-link\" href=\"#multi-cluster-management-for-kubernetes-with-cluster-api-and-argo-cd\">#</a> <a href=\"https://aws.amazon.com/blogs/containers/multi-cluster-management-for-kubernetes-with-cluster-api-and-argo-cd/\">Multi-cluster management for Kubernetes with Cluster API and Argo CD</a></h3>\n<p>Cluster API 是個專門用來管理多種 Kubernetes 叢集的 CNCF 專案，而本篇介紹使用 Cluster API 和 Argo CD 管理多個 Kubernetes 叢集，示範的架構為在本機 Docker 裡建立 Kind 後安裝 Cluster API 和 Argo CD，並由它們管理背後多個 Kubernetes 叢集。裡面解釋了 AWS IAM 是怎麼授權、CNI 安裝情況以及最後部署簡單的 app。<!-- summary --></p>\n<h3 id=\"why-managing-wafs-at-scale-requires-centralized-visibility-and-configuration-management\"><a class=\"direct-link\" href=\"#why-managing-wafs-at-scale-requires-centralized-visibility-and-configuration-management\">#</a> <a href=\"https://www.nginx.com/blog/why-managing-wafs-at-scale-requires-centralized-visibility-and-configuration-management/\">Why Managing WAFs at Scale Requires Centralized Visibility and Configuration Management</a></h3>\n<p>現在越來越多企業等級的資訊團隊需要集中化式的 Web Application Firewall（WAF）管理監控工具，而 F5 NGINX Management Suite 可以快速以視覺化的方式排查分析，例如最嚴重的攻擊方式、機器人攻擊程度、使用的工具、被攻擊的機器或 CVEs 等等，除了分析外也可以快速集中式的部署新的 Policy 來阻擋攻擊。</p>\n<h3 id=\"source-code-management-best-practices\"><a class=\"direct-link\" href=\"#source-code-management-best-practices\">#</a> <a href=\"https://devops.com/source-code-management-best-practices/\">Source Code Management Best Practices</a></h3>\n<p>Source Code Management（SCM）已經是老生常談了，但還是再談一次最佳實踐給大家溫習。</p>\n<ul>\n<li>多 commit</li>\n<li>確保 repository 都是最新的</li>\n<li>詳細寫 commit message</li>\n<li>在 commit 之前先好好審視所有變更</li>\n<li>自動化 workflow 要設計好：前贅字要用 <code>feat</code> 或 <code>fix</code> 等等、使用者權限控管、誰有權限放行可以合併 commit</li>\n<li>資安的設計也不能馬乎：基本的使用者權限、視覺化呈現使用者活躍紀錄、災難復原計畫等等</li>\n</ul>\n",
      "date_published": "2023-01-24T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/166/larry-166/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/166/larry-166/",
      "title": "第 166 期 後端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 後端開發</h2>\n<h3 id=\"%E6%9B%B4%E5%A5%BD%E7%9A%84%E9%81%B8%E6%93%87%EF%BC%9F%E7%94%A8-jwt-%E5%8F%96%E4%BB%A3-session-%E7%9A%84%E9%A2%A8%E9%9A%AA\"><a class=\"direct-link\" href=\"#%E6%9B%B4%E5%A5%BD%E7%9A%84%E9%81%B8%E6%93%87%EF%BC%9F%E7%94%A8-jwt-%E5%8F%96%E4%BB%A3-session-%E7%9A%84%E9%A2%A8%E9%9A%AA\">#</a> <a href=\"https://blog.kenwsc.com/posts/2023/jwt-vs-session/\">更好的選擇？用 JWT 取代 Session 的風險</a></h3>\n<p>這篇是我們 Writer Ken 寫的文章，但我是看完才發現是他寫的XD。近年來很多 Web 應用開始用 JSON Web Token(JWT) 來驗證使用者身份，雖然使用 JWT 可以讓 API Server 更接近 Stateless，但並不是完全沒有缺點的，如果還不是很了解 JWT 跟傳統 session 的差異，這篇文章解釋得很不錯</p>\n<h3 id=\"how-to-create-a-public-notion-integration-using-python\"><a class=\"direct-link\" href=\"#how-to-create-a-public-notion-integration-using-python\">#</a> <a href=\"https://link.medium.com/gxOfVbyIcub\">How to Create a Public Notion Integration Using Python</a></h3>\n<p>最近使用 Notion 的公司好像越來越多了，如果你想要自己寫一個 Notion plugin 並且開放給大家使用，那這邊有一篇圖文並茂的教學。雖然這篇是用 Python 來寫，但概念懂了之後，不管用什麼語言來寫都沒有問題啦</p>\n<h3 id=\"discord-%E5%A6%82%E4%BD%95%E8%99%95%E7%90%86%E4%B8%80%E5%A4%A9%E6%95%B8%E5%84%84%E7%9A%84%E8%A8%8A%E6%81%AF\"><a class=\"direct-link\" href=\"#discord-%E5%A6%82%E4%BD%95%E8%99%95%E7%90%86%E4%B8%80%E5%A4%A9%E6%95%B8%E5%84%84%E7%9A%84%E8%A8%8A%E6%81%AF\">#</a> <a href=\"https://tachunwu.github.io/posts/discord-cassandra/\">Discord 如何處理一天數億的訊息</a></h3>\n<p>Discord 之前有寫過一篇文章講他們是怎麼每天處理一天好幾億則的訊息、以及儲存總共數十億則的訊息，而這篇文章把原文經過翻譯、總結，如果想間單了解一下 Discord 是怎麼做到的，那可以花個 5 - 10 分鐘看看這篇文章～</p>\n",
      "date_published": "2023-01-24T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/166/gqsm-166/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/166/gqsm-166/",
      "title": "第 166 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"a-cure-for-react-usestate-hell%3F\"><a class=\"direct-link\" href=\"#a-cure-for-react-usestate-hell%3F\">#</a> <a href=\"https://dev.to/builderio/a-cure-for-react-usestate-hell-1ldi\">A cure for React useState hell?</a></h3>\n<p>在 React 裡面，如果要為 component 定義自身的狀態，通常都會直接使用 <code>useState</code>，但如果 state 裡面是保管著物件狀態的話，那在使用 <code>set*</code> 的時候就特別注意要使全新的物件，如果物件裡有許多欄位，那每次更新時都得要注意這件事情。而文章中提到了可以使用 <code>useReducer</code> 改善操作資料的複雜度，也可以在同個地方驗證是否要更新狀態。</p>\n<!-- summary -->\n<h3 id=\"applying-solid-principles-to-typescript\"><a class=\"direct-link\" href=\"#applying-solid-principles-to-typescript\">#</a> <a href=\"https://blog.logrocket.com/applying-solid-principles-typescript/\">Applying SOLID principles to TypeScript</a></h3>\n<p>SOLID 原則分別是：</p>\n<ol>\n<li>強調一個類只負責一件事的單一責任</li>\n<li>程式碼應該對擴展開放，但對修改封閉的開放封閉</li>\n<li>子類別要遵從父類別設計的里氏替換</li>\n<li>類別應該只實現它所需要的介面的介面隔離</li>\n<li>用抽象介面解除高低層次模組間依賴關係的依賴反轉</li>\n</ol>\n<p>SOLID 是為了提高物件導向設計的可讀性，適應性，可擴展性和可維護性。文章裡使用 TypeScript 作為範例，說明如何將這幾個原則應用到 TypeScript 中。</p>\n<h3 id=\"a-complete-guide-to-css-grid\"><a class=\"direct-link\" href=\"#a-complete-guide-to-css-grid\">#</a> <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">A Complete Guide to CSS Grid</a></h3>\n<p>我知道你可能看過超過 100 篇在介紹關於如何使用 CSS 的 Grid 的文章，如果你沒有？那沒關係，我也是，但至少 10 篇應該也差不多了，但這篇關於 Grid 的推薦文章應該可以被稱作 Grid 百科，在文章中不只介紹基本用法、Gird 的一些專有名詞和屬性外，還包含程式碼、圖片和超過 60 篇的額外閱讀、6 篇影片和 9 個其他資源，建議存下來，然後可以拿來做前端外交，反正這大概是有生之年系列自己看也看不完。</p>\n",
      "date_published": "2023-01-24T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/165/rico-165/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/165/rico-165/",
      "title": "第 165 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"how-to-fix-any-memory-leak%3A-no-more-tears\"><a class=\"direct-link\" href=\"#how-to-fix-any-memory-leak%3A-no-more-tears\">#</a> <a href=\"https://blog.devgenius.io/how-to-fix-any-memory-leak-no-more-tears-3e7fc80342a7\">How To Fix Any Memory Leak: No More Tears</a></h3>\n<p>作者以 JAVA 為例帶讀者走一次當記憶體洩漏時該怎麼做，當事件發生時服務會有怎樣的症狀做判別。使用多種工具幫你抓漏，例如使用 Garbage Collector 的 log 機制、Garbage Collector viewer、開發時看 Visual VM 等等。當事件發生時，此文的流程可以作為參考。<!-- summary --></p>\n<h3 id=\"the-right-stuff-for-really-remote-edge-computing\"><a class=\"direct-link\" href=\"#the-right-stuff-for-really-remote-edge-computing\">#</a> <a href=\"https://thenewstack.io/the-right-stuff-for-really-remote-edge-computing/\">The Right Stuff for Really Remote Edge Computing</a></h3>\n<p>在同溫層很難感受到，但在某些工作場合其實網路非常不穩定甚至沒有，所以就有 Edge Computing 解決方案，運用 AWS Snowball 裝置、SpaceX Starlink 網路和 Couchbase NoSQL 資料庫平台做示範，並且比較有無使用 Edge Computing 架構的網路效能差異。</p>\n<h3 id=\"devops%3A-kubernetes-help-desk-or-self-driven-innovation%3F\"><a class=\"direct-link\" href=\"#devops%3A-kubernetes-help-desk-or-self-driven-innovation%3F\">#</a> <a href=\"https://thenewstack.io/devops-kubernetes-help-desk-or-self-driven-innovation/\">DevOps: Kubernetes Help Desk or Self-Driven Innovation?</a></h3>\n<p>身為 DevOps/SRE 工程師是否常被開發人員的出包煩惱過？親自下去修固然可以但很快就會內耗完畢，太過嚴格的檢查也會拖垮開發效率。文化上應該讓開發人員能夠自己解決問題，而 DevOps/SRE 則是使用劃清界線的 Policy-as-Code 和 CICD pipeline 的工具維持整體開發速度。</p>\n",
      "date_published": "2023-01-10T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/165/larry-165/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/165/larry-165/",
      "title": "第 165 期 軟體工程 推薦文章",
      "content_html": "<h2 id=\"%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B\"><a class=\"direct-link\" href=\"#%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B\">#</a> 軟體工程</h2>\n<h3 id=\"%E8%87%B3-2022-%E7%82%BA%E6%AD%A2%E5%80%8B%E4%BA%BA%E7%9A%84%E8%BB%9F%E9%AB%94%E6%8A%80%E8%A1%93%E8%A7%80%E5%AF%9F\"><a class=\"direct-link\" href=\"#%E8%87%B3-2022-%E7%82%BA%E6%AD%A2%E5%80%8B%E4%BA%BA%E7%9A%84%E8%BB%9F%E9%AB%94%E6%8A%80%E8%A1%93%E8%A7%80%E5%AF%9F\">#</a> <a href=\"https://blog.taiwolskit.com/2022-software-technology-development-observation\">至 2022 為止個人的軟體技術觀察</a></h3>\n<p>2022 年咻一下就過了！如果沒時間慢慢追新技術的話，這篇文章簡單整理了 Frontend、Backend、Cloud 等等領域最近的發展，讓你花個五分鐘就可以了解最新的技術潮流～</p>\n<h3 id=\"good-api-design%2C-bad-api-design\"><a class=\"direct-link\" href=\"#good-api-design%2C-bad-api-design\">#</a> <a href=\"https://levelup.gitconnected.com/good-api-design-bad-api-design-2405dcdde24c\">Good API design, bad API design</a></h3>\n<p>不管你寫的是什麼語言、跑在怎麼樣的環境，當你要讓外部的使用者使用你的服務時，就會需要提供 API。而這篇文章提到了一些在設計 REST API 時的 best practice，只要跟著做，基本上就不會寫出長得太奇怪的 API。</p>\n<h3 id=\"%E7%B5%A6%E6%96%B0%E6%89%8B%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E5%B9%BE%E9%BB%9E%E5%BB%BA%E8%AD%B0\"><a class=\"direct-link\" href=\"#%E7%B5%A6%E6%96%B0%E6%89%8B%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E5%B9%BE%E9%BB%9E%E5%BB%BA%E8%AD%B0\">#</a> <a href=\"https://codelove.tw/@tony/post/63rlq1\">給新手工程師的幾點建議</a></h3>\n<p>想要成為資深工程師不是程式寫得很好、LeetCode Hard 三分鐘 KO 就可以，而是要對於軟體開發有更宏觀的了解。這篇文章是一名資深的架構師 Jeroen De Dauw 給 Junior 工程師一些寫程式的建議，跟著這篇文章，一起往資深的路上前進吧！</p>\n",
      "date_published": "2023-01-10T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/165/gqsm-165/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/165/gqsm-165/",
      "title": "第 165 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"ditch-the-div-tag%3A-use-these-html-tags-instead\"><a class=\"direct-link\" href=\"#ditch-the-div-tag%3A-use-these-html-tags-instead\">#</a> <a href=\"https://dev.to/arafat4693/ditch-the-div-tag-use-these-tags-instead-2a3c\">Ditch the div Tag: Use These HTML Tags Instead</a></h3>\n<p>雖然 div 在 HTML 中超級萬用，可以劃分頁面中的任何區塊，但是如果在 HTML 裡面有其他標籤能夠為你提供更好的語義時，何不考慮看看呢？但是要記得！這並不是要你放棄或是不使用 div 哦！而是在適當的時候使用對的標籤，就像在對的人要在對的時間遇見一樣。</p>\n<!-- summary -->\n<h3 id=\"understanding-neumorphism-in-css\"><a class=\"direct-link\" href=\"#understanding-neumorphism-in-css\">#</a> <a href=\"https://blog.logrocket.com/understanding-neumorphism-css/\">Understanding neumorphism in CSS</a></h3>\n<p>Neumorphism 是一種設計風格，該風格會讓網頁中的物件看起來像是真實世界的 3D 物體，而這篇文章不只說明如何用 CSS 實踐 Neumorphism，也在最後提到了 Neumorphism 對無障礙網頁的影響。</p>\n<h3 id=\"getting-started-with-vite\"><a class=\"direct-link\" href=\"#getting-started-with-vite\">#</a> <a href=\"https://blog.openreplay.com/getting-started-with-vite/\">Getting Started With Vite</a></h3>\n<p>這篇文章介紹了如何用 Vite 建立一個 Vue 的專案，並處理了像是圖片的靜態資源，也將專案打包部署上 <a href=\"https://www.netlify.com/\">netlify</a>，如果還沒有碰過 Vite，但又想試試看的話可以跟著文章一起做，整個過程大概只需要十分鐘左右！</p>\n",
      "date_published": "2023-01-10T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/164/smalltown-164/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/164/smalltown-164/",
      "title": "第 164 期 DevOps 推薦文章",
      "content_html": "<!-- summary -->\n<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<h3 id=\"top-5-api-testing-tools-2022\"><a class=\"direct-link\" href=\"#top-5-api-testing-tools-2022\">#</a> <a href=\"https://dev.to/qbentil/top-5-api-testing-tools-2022-297j\">Top 5 API testing tools 2022</a></h3>\n<p>透過實作 API 可以在不重新設計應用程式的情況之下為 Web 或是 Mobile 應用添加功能，而開發完成的 API當然需要對其進行測試。本文首先提出選擇 API 測試工具的要點：</p>\n<ul>\n<li>Interoperability: 可以運行在不同的平台與作業系統，，並且可以與 CI Pipeline 整合</li>\n<li>API basic requirements: 要可以測試 API 的一般功能，效能與安全性</li>\n<li>Ease of use: 工具要容易上手，幫助使用者節省時間將其花費在測試上</li>\n<li>Cost: 負擔得起的價格，或是有免費的版本</li>\n<li>Multi-tasking: 可以透過非同步的方式執行多個測試來加速</li>\n</ul>\n<!-- summary -->\n<p>接著提到五個他推薦的 API 測試工具：</p>\n<ul>\n<li>API Tester</li>\n<li>Postman</li>\n<li>Thunder Client</li>\n<li>Insomnia</li>\n<li>SoapUI</li>\n</ul>\n<h3 id=\"infrastructure-as-code-vs-configuration-management-vs-infrastructure-provisioning\"><a class=\"direct-link\" href=\"#infrastructure-as-code-vs-configuration-management-vs-infrastructure-provisioning\">#</a> <a href=\"https://devopscube.com/infrastructure-as-code-configuration-management/\">Infrastructure as Code Vs Configuration Management Vs Infrastructure Provisioning</a></h3>\n<p>文章先從什麼是 Infrastructure as Code 開始介紹起，提到他有哪一些優點，工具，Idempotency 的觀念，以及 IaC 在整個系統中的開發與部署流程，接這開始提到 Infrastructure Provisioning 和 Configuration Management 分別是在做什麼，並且比較他們的不同之處，讓讀者對於如何自動化管理整個系統有更深且全面性的了解。</p>\n<h3 id=\"things-i-wish-i-knew-when-i-started-learning-cloud\"><a class=\"direct-link\" href=\"#things-i-wish-i-knew-when-i-started-learning-cloud\">#</a> <a href=\"https://dev.to/hellonehha/things-i-wish-i-knew-when-i-started-learning-cloud-3346\">Things I wish I knew when I started learning cloud</a></h3>\n<p>作者在幾年前是一個前端工程師，對於後端世界的理解有限，但他決定要增進自己的技能，所以在矇矇懂懂的狀況之下開始了他的雲端之旅，而這篇文章想要分享的是他在這段旅程中所學到的一些東西，讓讀者可以在開始學習雲端之前，先了解一些基本的概念</p>\n<ul>\n<li>熟悉哪一種程式語言並不重要</li>\n<li>知道系統是如何運作的，例如 Client, Server 和網路彼此之間的關係</li>\n<li>不需要學會所有的 Cloud Provider，只需要從一個開始學起即可</li>\n<li>只有理論是不夠的，必須要實際操作</li>\n<li>獲取證照是有幫助的，但不是必要的</li>\n<li>是一個持續學習的過程，要花不少時間</li>\n<li>再次重申，沒有任何事情可以取代 Hands-On 所獲得的經驗</li>\n<li>Cloud 無所不在</li>\n<li>有很豐富的學習資源，例如 udemy, youtue 與其他付費課程</li>\n<li>在 Hands-On 之前，記得預留一小筆預算</li>\n</ul>\n",
      "date_published": "2022-12-27T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/164/rico-164/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/164/rico-164/",
      "title": "第 164 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"github-api-flow-%E4%BB%8B%E7%B4%B9%E4%BB%A5%E5%8F%8A%E5%AF%A6%E6%96%BD\"><a class=\"direct-link\" href=\"#github-api-flow-%E4%BB%8B%E7%B4%B9%E4%BB%A5%E5%8F%8A%E5%AF%A6%E6%96%BD\">#</a> <a href=\"https://hazel.style/2022/07/16/GitHub-API-Flow-Introduction-and-Implementation\">GitHub API Flow 介紹以及實施</a></h3>\n<p>2022 年底最後一週 DevOps 推薦文章向大家力推技術圈扛壩子 Hazel 撰寫的三篇精彩文章。<!-- summary -->此篇使用 Github API 寫一套程式走一次 Github Flow 的流程，因為開發的關係也探討了 git 本身底層的實作原理，程式碼也不藏私的公開給大家，並且有技術做法選擇的探討，值得深讀。</p>\n<h3 id=\"terraform-provider-%E9%96%8B%E7%99%BC%E7%B4%80%E9%8C%84\"><a class=\"direct-link\" href=\"#terraform-provider-%E9%96%8B%E7%99%BC%E7%B4%80%E9%8C%84\">#</a> <a href=\"https://hazel.style/2022/12/06/Terraform-Provider-Development\">Terraform Provider 開發紀錄</a></h3>\n<p>Terraform 很多人都用過，但是自己創建一個 Terraform Provider 呢？本篇分享如何創建完整的 Terraform Provider 以及後續的 CICD pipeline。</p>\n<h3 id=\"aws-to-gcp-site-to-site-vpn-%E5%BB%BA%E7%BD%AE%E7%B4%80%E9%8C%84\"><a class=\"direct-link\" href=\"#aws-to-gcp-site-to-site-vpn-%E5%BB%BA%E7%BD%AE%E7%B4%80%E9%8C%84\">#</a> <a href=\"https://hazel.style/2022/06/23/AWS-to-GCP-site-to-site-VPN\">AWS to GCP site-to-site VPN 建置紀錄</a></h3>\n<p>本篇以兩個不同的 Cloud provider 的 Site-to-Site VPN 連線來模擬 Hybrid Cloud 兩個 Cloud 互相連線的設定情境，裡面以 AWS 和 GCP 作為範例，裡面也介紹了除了本文之外可以參考的教學文資訊。</p>\n",
      "date_published": "2022-12-27T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/164/larry-164/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/164/larry-164/",
      "title": "第 164 期 Node.js 推薦文章",
      "content_html": "<h2 id=\"node.js\"><a class=\"direct-link\" href=\"#node.js\">#</a> Node.js</h2>\n<h3 id=\"popular-node.js-patterns-and-tools-to-re-consider\"><a class=\"direct-link\" href=\"#popular-node.js-patterns-and-tools-to-re-consider\">#</a> <a href=\"https://practica.dev/blog/popular-nodejs-pattern-and-tools-to-reconsider/\">Popular Node.js patterns and tools to re-consider</a></h3>\n<p>在 Node.js 的生態系中，有很多我們慣用的第三方 package 或是常寫的一些 pattern，他們當初可能是為了解決某些問題才出現，但現在已經有點不合時宜。因此這篇文章列出了幾個在採用之前應該重新考慮的模式和工具，讓你在 npm install 之前想想是不是真的需要，或者有更好的替代方案。</p>\n<h3 id=\"guidelines-for-choosing-a-node.js-framework\"><a class=\"direct-link\" href=\"#guidelines-for-choosing-a-node.js-framework\">#</a> <a href=\"https://simonplend.com/guidelines-for-choosing-a-node-js-framework/\">Guidelines for choosing a Node.js framework</a></h3>\n<p>近年來 Node.js 用來寫 API Server 的框架越來越多了，除了最知名的 Express/Koa 之外，還有 Fastify、Hapi 等等強調速度、易用性的框架。而這篇文章並沒有直接跟你說要選什麼框架，而是跟你說在選擇的時候該考慮哪些問題，譬如說你需不需要 Websocket、有沒有打算用 TypeScript 等等，這些都會決定哪一個框架最適合你</p>\n<h3 id=\"best-practices-for-creating-a-modern-npm-package\"><a class=\"direct-link\" href=\"#best-practices-for-creating-a-modern-npm-package\">#</a> <a href=\"https://snyk.io/blog/best-practices-create-modern-npm-package/\">Best practices for creating a modern npm package</a></h3>\n<p>現在要發佈一個可靠的 npm package，可不是把幾個 function 包一包傳上去就好了，你可能還需要加上單元測試、同時支援 ESM 跟 CJS、做安全性檢查等等，這篇文章搜集了這些 best practice（順便推銷他們自己家的工具XD），讓你做為一個專案的維護者，可以發佈出更高品質的 package。</p>\n",
      "date_published": "2022-12-27T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/164/gqsm-164/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/164/gqsm-164/",
      "title": "第 164 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"css-style-queries\"><a class=\"direct-link\" href=\"#css-style-queries\">#</a> <a href=\"https://ishadeed.com/article/css-container-style-queries\">CSS Style Queries</a></h3>\n<p>Chrome 團隊最近發布了對 CSS 新查詢語法的實驗室支持！這可以讓我們去查詢 Container 大小和樣式！在文章裡面作者不只是介紹了語法，還給了滿滿的使用情境和 CodePen 的 Demo 可以開起來玩玩看！</p>\n<!-- summary -->\n<h3 id=\"walkincat-%E2%80%94-chatgpt-linebot-%E8%A3%BD%E4%BD%9C%E6%87%B6%E4%BA%BA%E5%8C%85\"><a class=\"direct-link\" href=\"#walkincat-%E2%80%94-chatgpt-linebot-%E8%A3%BD%E4%BD%9C%E6%87%B6%E4%BA%BA%E5%8C%85\">#</a> <a href=\"https://walkincat.notion.site/WalkinCat-ChatGPT-LineBot-82e6757b3a0b48858ca56478b8dbe06b\">WalkinCat — ChatGPT LineBot 製作懶人包 </a></h3>\n<p>如果最近有想要做個前端小作品的話，其實串接個 ChatGPT 來玩看看也是滿不錯的，尤其是接下來就要跨年了，如果你聖誕節已經沒有人陪的話，至少還有五天的時間拚一下，這樣跨年的那個晚上至少還有 AI 可以陪聊天，而且這篇文章還是用 Line 去做的機器人，更有聊天的真實感。</p>\n<h3 id=\"important-javascript-concepts-that-every-developer-should-know.\"><a class=\"direct-link\" href=\"#important-javascript-concepts-that-every-developer-should-know.\">#</a> <a href=\"https://madni.hashnode.dev/important-js-concepts\">Important JavaScript concepts that every developer should know.</a></h3>\n<p>文章內介紹了 11 個關於 JavaScript 的底層原理、開發觀念還有一些符合 JavaScript 語言特性的小用法，都算是滿基本的知識和名詞，如果有不熟的就多看看幾次，不知不覺中就會和它們變成好朋友了！</p>\n",
      "date_published": "2022-12-27T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/163/smalltown-163/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/163/smalltown-163/",
      "title": "第 163 期 Git 推薦文章",
      "content_html": "<!-- summary -->\n<h2 id=\"git\"><a class=\"direct-link\" href=\"#git\">#</a> Git</h2>\n<h3 id=\"monorepo-build-tools\"><a class=\"direct-link\" href=\"#monorepo-build-tools\">#</a> <a href=\"https://earthly.dev/blog/monorepo-tools/\">Monorepo Build Tools</a></h3>\n<p>最近在軟體開發的圈子中，使用 Monorepos 來管理程式碼有變流行的趨勢，Monorepos 指的是單一個 Repository 中包含著許多相關但是不同專案的程式碼，他有不少優點，但這樣的管理方式也帶來不少的挑戰，假設一個 Repo 中有數百個服務，彼此之間存在著相依性，當其中一個服務有變動時，如何讓其他的服務不會全部都被重新測試，編譯和部署？這時就可以依靠 Monorepos 專屬的工具來解決這個問題，在評估相關類型的工具時，通常會需要考慮以下幾個因素：</p>\n<!-- summary -->\n<ul>\n<li>Programming Language Support: 確認選擇的工具支援你目前以及未來所使用的程式語言</li>\n<li>Learning Curve: 每個工具的學習成本各有不同，評估工具的複雜度，確認是否適合你的團隊</li>\n<li>Caching: 一個理想的建構工具，對於同一個 Build 不應該被執行兩次，應該要選擇具備在遠端分散式環境執行與支援快取的工具</li>\n<li>Build Introspection: 能夠洞察被構建服務的流程和相依關係，允許工程師去查看構建圖，構建時哪個環節效率不佳，或是變更牽涉到哪一些專案</li>\n<li>Versatility: 構建以外的附加功能，例如相依套件如何被安裝？整合測試如何運行？測試資料庫如何被還原？換句話說，除了從程式碼構建 Artifact 之外的其他問題都需要被考慮進去</li>\n</ul>\n<p>而目前在這個領域中，作者介紹了四個工具供大家選擇，底下根據上面提的選擇要點來做比較 (不過這篇文章是 Earthly 所撰寫，所以不能全信XD):</p>\n<ul>\n<li>\n<p>Bazel:</p>\n<ul>\n<li>Programming Language Support: Java, C++, Python...等</li>\n<li>Learning Curve: 四個工具中最複雜</li>\n<li>Caching: 支援遠端快取和分散式執行 (開源 &amp; 商用版本)</li>\n<li>Build Introspection: 透過 <code>bazel query</code> 和其他相關指令提供強大的 Introspection 功能</li>\n<li>Versatility: 相當受限，只可以在 run 的階段執行整合測試，至於環境設定和自動構建方面則是被認為不在此工具的支援範圍內</li>\n</ul>\n</li>\n<li>\n<p>Pants:</p>\n<ul>\n<li>Programming Language Support: Go, Python, Java...等 (沒有 JavaScript)</li>\n<li>Learning Curve: 透過 Static Introspection，使得他比 Bazel 更易用一些</li>\n<li>Caching: 支援遠端快取和分散式執行 (開源 &amp; 商用版本)</li>\n<li>Build Introspection: 透過 <code>pants dependencies</code> 指令提供良好的 Introspection 功能</li>\n<li>Versatility: 相當受限，環境設定和自動構建方面也是被認為不在此工具的支援範圍內</li>\n</ul>\n</li>\n<li>\n<p>NX:</p>\n<ul>\n<li>Programming Language Support: Javascript, Go, Rust，還有 iOS 和 Android 執行器</li>\n<li>Learning Curve: 對於 JavaScript 開發者來說學習曲線最低</li>\n<li>Caching: 支援遠端快取和分散式執行 (商用版本)</li>\n<li>Build Introspection: 提供一些 Introspection 功能</li>\n<li>Versatility: 透過 npm 腳本支援不可快取的步驟和一次性的構建任務</li>\n</ul>\n</li>\n<li>\n<p>Earthly:</p>\n<ul>\n<li>Programming Language Support: 任何可以運行在 Linux 環境的東西</li>\n<li>Learning Curve: 有點類似 Dockerfile，使用一連串的 RUN 指令來構建，學習曲線最低</li>\n<li>Caching: 支援遠端快取和分散式執行 (開源 &amp; 商用版本)</li>\n<li>Build Introspection: 受限的 Introspection 功能</li>\n<li>Versatility: 透過包裝現有的工具來提供環境設定和自動構建的功能</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"the-wordcel's-guide-to-shape-rotation-using-the-git-commit-graph\"><a class=\"direct-link\" href=\"#the-wordcel's-guide-to-shape-rotation-using-the-git-commit-graph\">#</a> <a href=\"https://www.dolthub.com/blog/2022-12-14-wordcels-guide-to-git/\">The Wordcel's Guide to Shape Rotation using the Git Commit Graph</a></h3>\n<p>活在 2022 年快要結束的這個當下，應該沒有人會質疑 Git 在軟體開發領域的地位，幾乎每個人都需要使用它，但不一定每個人都真的了解他，這篇文章的作者坦承他一開始費了很大的勁去使用 Git，透過了很長時間的研究和練習之後才總算比較會使用一些，也才有辦法分享這篇文章給對於 Git 還不熟的人；文章中使用淺顯的例子加上容易理解的示意圖來解釋了 Git 常用的功能與知識，如 Git Commit, Branch, Merging, 至於 Rebase 呢？作者在最後説 Rebase 一個不被信任的黑暗工具，請大家使用 Merge 就好XD</p>\n<h3 id=\"how-to-close-a-pull-request---merge-commit-vs-squash-vs-rebase-on-github\"><a class=\"direct-link\" href=\"#how-to-close-a-pull-request---merge-commit-vs-squash-vs-rebase-on-github\">#</a> <a href=\"https://leonardomontini.dev/close-pr-strategy-merge-commit-squash-rebase/\">How to Close a Pull Request - Merge Commit vs Squash vs Rebase on GitHub</a></h3>\n<p>當要把 Pull Request Branch 合併到 Main Branch 的時會看到三個選項，分別是 <strong>&quot;Create a merge commit&quot;</strong>, <strong>&quot;Squash and merge&quot;</strong> 以及 <strong>&quot;Rebase and merge&quot;</strong>，這三個選項分別會如何將 PR Branch 合併到 Main Branch 呢？而究竟哪一個選項是最好的呢？</p>\n<ul>\n<li>\n<p>Create a Merge Commit: Merge Commit 是在 GitHub 最常用也是預設的選項，也是執行 <code>git merge</code> 時的預設行為，PR Branch 中的所有 Commit 歷史都完整地被保留在 Main Branch 中，然後會有一個額外的 Commit 將 PR Branch 的所有變更內容合併到 Main Branch；優點就是可以很容易追蹤到被修改的那一行程式碼是在哪一個 Commit 中，缺點就是當有很多的 Commit 在很多不同的 Branch 時，最終整個 Commit 的歷史紀錄會變得很雜亂，追蹤變更軌跡會是個相當大的挑戰</p>\n</li>\n<li>\n<p>Squash and Merge: 但你真的需要追蹤每一個變更的 Commit 嗎？包含打錯字，漏掉檔案，格式錯誤...等，假如答案是否定的，那你應該考慮使用 Squash Merge，他會忽略掉 PR Branch 中所有的 Commit，然後將所有的變更內容合併成一個 Commit 合併到 Main Branch 中，如此一來，你可以放心的在 PR Branch 中提送任何你想要的 Commit，因為最終只會有一個 Commit 被合併到 Main Branch 中</p>\n</li>\n<li>\n<p>Rebase and Merge: 當你不需要一個額外的 Commit 來得知 Merge 的發生時，而且希望最終所有的 Commit 都線性在單一個 Branch 中時，就可以使用 Rebase and Merge，他會保留所有的 Commit，而且在合併時不會有額外的 Commit；缺點就是在 Rebase 遇到合併衝突時，很容易在無意間遺失部分的程式碼，而且假如你需要追趕上多個 Commit 時，你最後可能需要為每一個 Commit 解決合併衝突，而不像其他的 Merge 選項，只需要解決一次合併衝突</p>\n</li>\n</ul>\n<p>而究竟要選擇哪一個比較好，作者覺得假如 PR Branch 不會開著很久的話，那麼 Squash Merge 是個不錯的選擇，而他本身並不是 Rebase 的粉絲，因為他覺得使用 Rebase 很容易造成失誤，但是在決定要採用哪一個之前，可以先想想看自己和團隊需要去看歷史 Commit 的頻率有多高，團隊中有多少個成員，使用的 CI 工具是否需要完整的 Commit 歷史</p>\n",
      "date_published": "2022-12-20T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/163/rico-163/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/163/rico-163/",
      "title": "第 163 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"how-doordash-secures-data-transfer-between-cloud-and-on-premise-data-centers\"><a class=\"direct-link\" href=\"#how-doordash-secures-data-transfer-between-cloud-and-on-premise-data-centers\">#</a> <a href=\"https://doordash.engineering/2022/11/29/how-doordash-secures-data-transfer-between-cloud-and-on-premise-data-centers/\">How DoorDash Secures Data Transfer Between Cloud and On-Premise Data Centers</a></h3>\n<p>處理底層網路一直都不是簡單的事，DoorDash 因為業務需要跟供應商做介接，但因為供應商敏感的資料不適合暴露於公開的網路，所以評估 AWS Site-to-Site VPN 和 Direct Connect。確定使用 Direct Connect 的實體光纖線路後，發現供應商防火牆的規則會擋掉所有來自內網的 CIDR 範圍，<!-- summary -->例如 10.0.0.0 到 10.255. 255.255 (Class A) 172.16.0.0 到 172.31. 255.255 (Class B) 192.168.0.0 到 192.168. 255.255 (Class C)，確保流量是來自外部。於是 DoorDash 只好使用 NAT Gateway 嘗試解決，但發現在 Virtual Private Gateway 時沒辦法抓到 NAT Gateway 的 Elastic IP，所以最後使用 <a href=\"https://docs.aws.amazon.com/whitepapers/latest/building-scalable-secure-multi-vpc-network-infrastructure/private-nat-gateway.html\">Private NAT Gateway</a> 才得以解決。然後 DoorDash 在靠 AWS Transit Gateway 把 Direct Connect 的環境以中心點串到各個 AWS 帳號去。</p>\n<h3 id=\"kubernetes-ci%2Fcd-pipelines-explained\"><a class=\"direct-link\" href=\"#kubernetes-ci%2Fcd-pipelines-explained\">#</a> <a href=\"https://thenewstack.io/kubernetes-ci-cd-pipelines-explained/\">Kubernetes CI/CD Pipelines Explained</a></h3>\n<p>我想大家或許對 Kubernetes CI/CD 工具已經很熟了，但本篇依舊介紹不錯的工具之外，也介紹了最佳實踐，以及推薦自動化、團隊合作、資安和監控工具。是一篇要入門建置 Kubernetes CI/CD pipeline 很不錯的起點文章。</p>\n<h3 id=\"how-to-build-a-fintech-app%3A-approach%2C-architecture%2C-and-scalability\"><a class=\"direct-link\" href=\"#how-to-build-a-fintech-app%3A-approach%2C-architecture%2C-and-scalability\">#</a> <a href=\"https://mobidev.biz/blog/how-to-build-fintech-app-approach-architecture-scalability\">How to Build a Fintech App: Approach, Architecture, and Scalability</a></h3>\n<p>做金融科技的服務要如何選架構？地點決定法規、商業模式影響系統負載、是否很在意延遲、服務需不需要即時性和系統可靠性容錯率有多少，又或者單體架構（Monolith）、服務導向架構（service-oriented architecture）或微服務架構（Microservices）。作者是建議業務一開始可以循序漸進，因為微服務架構會花很多開發時間，等腳步穩了再改進即可。</p>\n",
      "date_published": "2022-12-20T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/163/larry-163/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/163/larry-163/",
      "title": "第 163 期 Golang 推薦文章",
      "content_html": "<h2 id=\"golang\"><a class=\"direct-link\" href=\"#golang\">#</a> Golang</h2>\n<h3 id=\"new-in-go-1.20%3A-wrapping-multiple-errors\"><a class=\"direct-link\" href=\"#new-in-go-1.20%3A-wrapping-multiple-errors\">#</a> <a href=\"https://lukas.zapletalovi.com/posts/2022/wrapping-multiple-errors/\">New in Go 1.20: wrapping multiple errors</a></h3>\n<p>如果沒意外的話，Go 在明年二月就會發佈新版本 1.20。從 Go 1.20 開始，我們可以用 <code>errors.Join(err1, err2)</code> 把多個錯誤 join 成一個錯誤、而且 <code>fmt.Errorf</code> 也可以用來把多個錯誤格式化輸出成一個錯誤，讓 Go 的錯誤回傳、處理可以寫得更漂亮</p>\n<h3 id=\"test-parallelization-in-go%3A-understanding-the-t.parallel()-method\"><a class=\"direct-link\" href=\"#test-parallelization-in-go%3A-understanding-the-t.parallel()-method\">#</a> <a href=\"https://engineering.mercari.com/en/blog/entry/20220408-how_to_use_t_parallel/\">Test parallelization in Go: Understanding the t.Parallel() method</a></h3>\n<p>維持寫測試的習慣固然是好事，但隨著專案中的測試越來越多，每次跑測試所需要的時間也會越來越久。這篇文章介紹了 Go 的平行化測試功能，如果每個測試都是完全獨立、且不影響彼此，那可以試試看用 <code>t.Parallel()</code> 來同時執行多個 test case！</p>\n<h3 id=\"making-a-go-program-run-1.7x-faster-with-a-one-character-change\"><a class=\"direct-link\" href=\"#making-a-go-program-run-1.7x-faster-with-a-one-character-change\">#</a> <a href=\"https://hmarr.com/blog/go-allocation-hunting/\">Making a Go program run 1.7x faster with a one character change</a></h3>\n<p>在這篇文章中，作者介紹了他如何使用 Go 的 pprof 跟 flamegraphs 工具來分析效能，並且最後只改了一個字元（其實是兩個XD）就提升了 1.7 倍的效能。如果你已經有 Go 的開發經驗，又對效能最佳化感興趣，那麼這篇文章絕對值得一讀！</p>\n",
      "date_published": "2022-12-20T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/163/gqsm-163/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/163/gqsm-163/",
      "title": "第 163 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"optimize-interaction-to-next-paint\"><a class=\"direct-link\" href=\"#optimize-interaction-to-next-paint\">#</a> <a href=\"https://web.dev/optimize-inp/\">Optimize Interaction to Next Paint</a></h3>\n<p>Interaction to Next Paint (INP) 是用來測量回應速度的指標，如果使用者在網頁上進行操作但頁面沒有任何回應的話，那就這個使用者體驗就是差的。而 INP 就是要觀察頁面對使用者做的每一項操作回應的延遲時間。在這篇文章裡面會告訴你該如何測量、分析以及改善 INP 較差的問題。</p>\n<!-- summary -->\n<h3 id=\"vite-4.0-is-out!\"><a class=\"direct-link\" href=\"#vite-4.0-is-out!\">#</a> <a href=\"https://vitejs.dev/blog/announcing-vite4.html\">Vite 4.0 is out!</a></h3>\n<p>Vite 3 在發布之後，每週的下載量暴增到 250 萬，且根據今年 <a href=\"https://twitter.com/vite_js/status/1589665610119585793\">Jamstack Conf</a> 的問卷顯示，在社群內的使用率也提高到 32%，滿意度也維持在 9.7 高分。那在前作如此好評的狀況下，Vite 4 增修了以下幾點：</p>\n<ul>\n<li>瀏覽器的支援度</li>\n<li>將 .css 作為 string import</li>\n<li>如果環境變數中有 # 或 ` 則需要用 &quot; 包起來</li>\n<li>減少打包後的尺寸</li>\n<li>升級到 Vite Core</li>\n</ul>\n<p>更詳細的內容就快點進去官方的公告看看吧！</p>\n<h3 id=\"web-performance-calendar\"><a class=\"direct-link\" href=\"#web-performance-calendar\">#</a> <a href=\"https://calendar.perfplanet.com/2022/web-performance-apis-appreciation-post/\">Web Performance Calendar</a></h3>\n<p>這篇文章列舉了幾點在 Web 界用來處理效能的酷炫 API：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/renderBlockingStatus\">Render blocking status</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas\">OffscreenCanvas</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decoding\">Async image decoding</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decode\">Image decode()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/loading\">loading=lazy</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/fetchPriority\">fetchpriority</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/103\">103 Early Hints</a></li>\n</ul>\n<p>作者也有在每個 API 下快速介紹並附上目前的支援度，是一篇很好去吸收名詞的好文章！</p>\n",
      "date_published": "2022-12-20T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/162/smalltown-162/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/162/smalltown-162/",
      "title": "第 162 期 ChatGPT 推薦文章",
      "content_html": "<!-- summary -->\n<h2 id=\"chatgpt\"><a class=\"direct-link\" href=\"#chatgpt\">#</a> ChatGPT</h2>\n<h3 id=\"awesome-chatgpt\"><a class=\"direct-link\" href=\"#awesome-chatgpt\">#</a> <a href=\"https://github.com/humanloop/awesome-chatgpt\">Awesome ChatGPT</a></h3>\n<p>有不少人已經開始把 ChatGPT 整合到既有的工具與服務中，例如 Python SDK, Chrome Extension 顯示跟 Google 搜尋結果的對比，GitHub Action 幫忙 Code Review，VSCode extension 幫忙寫程式，各種 Chat Bot 如 Telegram, WhatsApp, Twitter...來回覆對話，所以 Awesome 系列的 GitHub Repository 也有啦！之後可以跑來這個 Repository 看看有什麼有趣的 ChatGPT 專案又被實作出來了!</p>\n<!-- summary -->\n<h3 id=\"chatgpt-for-google\"><a class=\"direct-link\" href=\"#chatgpt-for-google\">#</a> <a href=\"https://github.com/wong2/chat-gpt-google-extension\">ChatGPT for Google</a></h3>\n<p>最近看到大家都一直在討論 ChatGPT，把各種問題丟給他去回答，很多人已經開始叫他寫程式了，感覺 Stack Overflow 的地位岌岌可危🤣 也有開發者想到其實我們現在還很常去找答案的方式就是去問 Google，所以有人寫了這個 Chrome Extension，讓搜尋字串也直接餵給 ChatGPT，不知道再這樣下去，以後 ChatGPT 的回答內容是不是要開始有業配文跟置入性行銷了?!</p>\n<h3 id=\"introducing-chatgpt!\"><a class=\"direct-link\" href=\"#introducing-chatgpt!\">#</a> <a href=\"https://kozyrkov.medium.com/introducing-chatgpt-aa824ad89623\">Introducing ChatGPT!</a></h3>\n<p>Google 的 Chief Decision Scientist &quot;Cassie Kozyrkov&quot; 寫了一篇揭秘 ChatGPT 的文章，文章開頭先解釋了 ChatGPT 的技術原理為 GAN (Generative Adversarial Networks)，接著稍微提了 GAN 的運作原理，然後花了相對多的篇幅來講述 ChatGPT 的回答其實只是碰觸到了部分的現實，其他則是他想像出來的，這聽起來很像是缺點，但這也正是他的強項，因為他不會受限於現實，可以回答出充滿創造力與在框架外的答案，例如你問 ChatGPT 假如他的飛的話他會做什麼，他可能會回答 &quot;我會像雄鷹一樣翱翔在天空，感受我翅膀下的風和飛行的自由&quot;；緊接著提到利用 ChatGPT 寫程式的體驗</p>\n<p>最恐怖的地方要來了，<strong>上面的內容是由 ChatGPT 所產生的，而且是錯誤的</strong>，作者是這樣跟 ChatGPT 說的 &quot;請用 Cassie Kozyrkov 的風格寫一篇揭秘 ChatGPT 的部落格文章，解釋為什麼 ChatGPT 有用，跟 GAN 有什麼關係，以及為什麼 ChatGPT 的回答只是部分切合現實&quot;；<strong>但其實 ChatGPT 根本就不是使用 GAN 實作出來的，他是 Generative Pretrained Transformer</strong>，但我相信假如不是對於這些背景知識很熟的人，應該都已經被騙了 🥲 沒錯，ChatGPT 所產生的部分回答是胡扯的，但他不算是騙子，因為所謂的騙子必須要先知道事情的真相並且去誤導人類，他只是不關心事情真相而胡說八道的角色，而這也是我們必須要先知道的最重要的重點</p>\n<p>其實除了 ChatGPT 不是 GAN 所實作出來的之後，作者其他的論點都是真的，也就是一開始所提的 ChatGPT 的回答只有部分切合現實，因此可以想像我們在接下來的生活中會處在一個比以往都充斥著更多虛假內容的時代，所以會需要對於事實查核投入更多的精力；ChatGPT 確實讓作者留下了深刻的印象，佩服 OpenAI 所取得的非凡成就，而作者也鼓勵大家去使用它，因為他在各個應用領域中都具有相當大的潛力且值得去關注，換言之，吹牛胡扯的人是有用的，只要你知道他們是在吹牛的人就行了😂 但作者也對人類容易相信別人，導致 AI 將為人類帶來的坎坷之旅感到憂心，人類以後必須對於所有的線上資源採用不同的信任方式，避免獲取一堆有意人士製作出來的虛假內容...</p>\n",
      "date_published": "2022-12-13T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/162/rico-162/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/162/rico-162/",
      "title": "第 162 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"serverless-vs.-kubernetes%3A-the-people%E2%80%99s-vote\"><a class=\"direct-link\" href=\"#serverless-vs.-kubernetes%3A-the-people%E2%80%99s-vote\">#</a> <a href=\"https://thenewstack.io/serverless-vs-kubernetes-the-peoples-vote/\">Serverless vs. Kubernetes: The People’s Vote</a></h3>\n<p>AWS Re:Invent 活動上舉辦了 Serverless vs Kubernetes 架構比賽，會依據多個分類角度做票選，分類的項目有：<!-- summary --></p>\n<ol>\n<li>維護性 - Serverless 勝</li>\n<li>成本 - Serverless 勝</li>\n<li>擴展性 - Serverless 勝</li>\n<li>開發友善度 - 雙方平手</li>\n<li>生態系 - Kubernetes 勝</li>\n<li>監控與日誌 - Kubernetes 勝</li>\n<li>資安 - Kubernetes 勝</li>\n</ol>\n<h3 id=\"buildrock%3A-a-build-platform-at-slack\"><a class=\"direct-link\" href=\"#buildrock%3A-a-build-platform-at-slack\">#</a> <a href=\"https://slack.engineering/buildrock-a-build-platform-at-slack/\">BuildRock: A Build Platform at Slack</a></h3>\n<p>Slack 一開始的 Jenkins 就和大家的 Jenkins 一樣隨心所欲導致愈來愈多技術債，經過一連串的考量後決定繼續使用 Jenkins，並且開始做左移的測試，在 Kubernetes 上使用臨時的 Jenkins agent，並且用外掛硬碟保存狀態，標準和抽象化讓使用 Jenkins 的體驗好一點，另外也引入 GitOps 概念禁止人們手動改動，改善設定管理，以及放權 ownership 讓 service owner 參與建置 pipeline。</p>\n<h3 id=\"looking-to-the-future-of-developer-experience\"><a class=\"direct-link\" href=\"#looking-to-the-future-of-developer-experience\">#</a> <a href=\"https://devops.com/looking-to-the-future-of-developer-experience/\">Looking to the Future of Developer Experience</a></h3>\n<p>開發體驗就跟使用者體驗一樣非常重要，減輕開發人員精神上的打擊讓生產力能夠提升。打從一開始入職開始、開發、部署時和維護就要時時刻刻注意開發體驗，像是在入職時創帳號時會自動生產需要的密鑰，使用開發工具如 <a href=\"https://fig.io/\">Fig</a>、<a href=\"https://github.com/features/copilot\">Github Copilot</a>、low-code 的軟體或者一些自動化工具如 <a href=\"https://github.com/features/actions\">Githube Action</a>，而維護需要注意的是 dependencies 要能夠自動檢查。</p>\n",
      "date_published": "2022-12-13T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/162/larry-162/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/162/larry-162/",
      "title": "第 162 期 TypeScript 推薦文章",
      "content_html": "<h2 id=\"typescript\"><a class=\"direct-link\" href=\"#typescript\">#</a> TypeScript</h2>\n<h3 id=\"migrating-millions-of-lines-of-code-to-typescript\"><a class=\"direct-link\" href=\"#migrating-millions-of-lines-of-code-to-typescript\">#</a> <a href=\"https://stripe.com/blog/migrating-to-typescript\">Migrating millions of lines of code to TypeScript</a></h3>\n<p>大家應該多少有聽過 Stripe 這間公司，他們在今年把他們最大的 JS codebase 總計數百萬行的程式碼從 Flow migrate 到 TypeScript。這篇文章簡單分享了他們為何要這麼做、以及他們 migration 的過程和結果，如果你手上也有專案在考慮要不要為了好維護 migrate 到 TypeScript，這篇文章可以當作一個參考。</p>\n<h3 id=\"use-typescript-record-types-for-better-code\"><a class=\"direct-link\" href=\"#use-typescript-record-types-for-better-code\">#</a> <a href=\"https://itnext.io/use-typescript-record-types-for-better-code-ce1768c6cb53\">Use TypeScript Record Types for Better Code</a></h3>\n<p>其實我以前跟 TypeScript 裡面的 Record/Pick/Omit 那些對型別進行運算、運算的 utility 很不熟，是前陣子仔細去讀了 TypeScript 的官方文件後才發現這些東西真是太好用了。而這篇文章就是介紹了 Record 的用法，推薦給跟我一樣的型別苦手們。</p>\n<h3 id=\"type-safe-typescript-with-type-narrowing\"><a class=\"direct-link\" href=\"#type-safe-typescript-with-type-narrowing\">#</a> <a href=\"https://betterprogramming.pub/type-safe-typescript-with-type-narrowing-649450d708df\">Type-Safe TypeScript With Type Narrowing</a></h3>\n<p>TypeScript 寫久了，遲早有一天會覺得 TypeScript 怎麼那麼笨，「我這邊明明就不可能是 XX 型別啊，你一直噴錯是怎樣？」。別氣別氣，只要你懂 TypeScript 的型別推論，你就可以用 type narrowing 把你的程式碼變得更加安全、而且可讀性也更高。不過這算是比較進階的技巧，如果你對 TypeScript 的型別還不是很熟悉，那可以先把這篇文章存起來，過個一年半載再回來看。</p>\n",
      "date_published": "2022-12-13T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/162/gqsm-162/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/162/gqsm-162/",
      "title": "第 162 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"typescript%3A-advanced-and-esoteric\"><a class=\"direct-link\" href=\"#typescript%3A-advanced-and-esoteric\">#</a> <a href=\"https://levelup.gitconnected.com/typescript-advanced-and-esoteric-d88560f51767\">TypeScript: advanced and esoteric</a></h3>\n<p>作者列出了一些較少人知道的 TypeScript 用法，文章裡面分成兩個部分，第一部分會介紹如何利用泛型建立動態的型別，在這部分會包含幾個用法：</p>\n<ul>\n<li>Property accessors</li>\n<li>Conditional types</li>\n<li>Type inferring</li>\n<li>Recursive types</li>\n</ul>\n<p>第二個部分則是會介紹如何將上述四個用法做實際應用。</p>\n<!-- summary -->\n<h3 id=\"an-introduction-to-javascript-maps\"><a class=\"direct-link\" href=\"#an-introduction-to-javascript-maps\">#</a> <a href=\"https://blog.openreplay.com/an-introduction-to-javascript-maps/\">An Introduction To JavaScript Maps</a></h3>\n<p>在 JavaScript 中，有時候我們會使用 object 來做 key 和 value 之間的對照，但其實早在 ES6 出現的 map 就能更讚的實現這件事情，因為不論是 object 或是 function 都可以拿來當作 key 去對應另一個 value。如果你還不曉得 Map 或是他的更多優點，不妨從這篇文章開始了解它一下吧！</p>\n<h3 id=\"what-should-a-modern-css-boilerplate-look-like%3F\"><a class=\"direct-link\" href=\"#what-should-a-modern-css-boilerplate-look-like%3F\">#</a> <a href=\"https://blog.logrocket.com/what-should-modern-css-boilerplate-look-like/\">What should a modern CSS boilerplate look like?</a></h3>\n<p>在寫 Web 的時候，通常都會使用一段 CSS 先重置不同瀏覽器之間的初始樣式差異，但有許多自定義重置的 CSS 裡說不定都包含許多多餘的程式碼（雖然應該也多不到哪裡 😂），因此好好了解在重置時需要和不需要什麼的理由是很重要的，這篇文章介紹了幾個重置某些 CSS 屬性時所考慮的事情。</p>\n",
      "date_published": "2022-12-13T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/161/smalltown-161/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/161/smalltown-161/",
      "title": "第 161 期 Kubernetes 推薦文章",
      "content_html": "<!-- summary -->\n<h2 id=\"kubernetes\"><a class=\"direct-link\" href=\"#kubernetes\">#</a> Kubernetes</h2>\n<h3 id=\"kubernetes-1.26-%E2%80%93-what%E2%80%99s-new%3F\"><a class=\"direct-link\" href=\"#kubernetes-1.26-%E2%80%93-what%E2%80%99s-new%3F\">#</a> <a href=\"https://sysdig.com/blog/kubernetes-1-26-whats-new/\">Kubernetes 1.26 – What’s new?</a></h3>\n<p>K8s 1.26 也差不多要正式發佈了，讓我們跟著 sysdig 來看看這一版有什麼重要更新吧！ 這一版有 37 個增強功能，對比於 1.25 有 40 個，1.24 有 46 個，這 37 個裡面有 11 個會升到穩定版本，10 個的功能還需要持續改善，16 個全新的功能，其中底下幾個是 sysdig 覺得比較重要的更新，更詳細內容可以參閱內文：</p>\n<!-- summary -->\n<ul>\n<li>儲存功能: 透過 VolumeSnapshot 功能，從不同 Namespace 的儲存快照建立新的儲存空間</li>\n<li>驗證功能: 構築於 1.25 引進用來驗證 CRD 的 Common Expression Language (CEL)，現在 admission controller 多了一個 ValidatingAdmissionPolicy 型別，讓使用者可以在沒有 webhook 的情況下達成驗證機制</li>\n<li>監控功能: 不再需要透過 Prometheus Exporter，可以直接在 /metrics/slis 提供 Kubernetes 的 SLI Metric</li>\n<li>監控功能: 開始從 CRI API 來獲取 Container 的資訊 (例如 CPU, Memory 使用量)，而不是 cAdvisor，這也意味著會慢慢的將 cAdvisor 給淘汰掉，畢竟 Container Runtime 才是最清楚知道 Container 運行狀況的角色</li>\n<li>管理功能: 既有的 Resource Management 只能針對 CPU 和 Memory 去設定 Limit 和 Request (之後還可以針對 Storage)，不過對於需要做初始化和清理的硬體資源，如 FPGA，或是想要限制硬體資源被存取，如共享的 GPU，這次新增了新的 ResourceClaimTemplate 和 ResourceClass 物件來達成這些需求，讓資源更動態地去分配</li>\n<li>管理功能: 讓 Topology Manager 對於 multi-NUMA (NUMA: non-uniform memory access) 的 Kubernetes 節點有更好的控制權，例如透過控制使用哪一顆實體的 CPU 核心來避免 Memory 在不同晶片暫存或是 Socket 間跳躍，用以獲得大幅度的效能改善</li>\n<li>管理功能: StatefulSet 多了掌控起始 Replica 數目的設定 (spec.ordinals.start)，主要的應用情境會是在跨 Namespace 或是叢集搬遷 StatefulSet 可以達成 0 Downtime 的需求 (建議同時搭配 PodDistruptionBudgets 去做使用)</li>\n<li>管理功能: 讓 Kubernetes 的使用者可以透過 Auth API 獲得自己的使用者資訊，例如有什麼樣的權限，位於哪一些群組...等</li>\n<li>效能改善: 讓 kubernetes-apiserver 提供 API 的完整清單，這樣一來呼叫 kubernetes-apiserver 的 client 就不用自己去查找有哪一些 API 和這些 API 有哪一些版本可以使用</li>\n</ul>\n<h3 id=\"kubernetes-labels%3A-expert-guide-with-10-best-practices\"><a class=\"direct-link\" href=\"#kubernetes-labels%3A-expert-guide-with-10-best-practices\">#</a> <a href=\"https://cast.ai/blog/kubernetes-labels-expert-guide-with-10-best-practices/\">Kubernetes Labels: Expert Guide with 10 Best Practices </a></h3>\n<p>透過 Kubernetes 於資源內所下的 Label，可以讓管理者更快地查找問題，一次將組態變更集體套用到多個資源，用來監控資源的使用狀況與成本，所以這篇文章要跟大家介紹 10 個使用 Label 的最佳實踐</p>\n<ul>\n<li>使用 Kubernetes 本身推薦的 Label (<a href=\"https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/#labels\">Reference</a>) 來對物件分群: K8s 推薦使用 <a href=\"http://app.kubernetes.io/name\">app.kubernetes.io/name</a> 和 <a href=\"http://app.kubernetes.io/instance\">app.kubernetes.io/instance</a> 來代表應用程式的名稱和實例；假如是公司內部的應用服務，就可以使用自己公司的 subdomain 來取代 <a href=\"http://app.kubernetes.io\">app.kubernetes.io</a> 然後來客製化對應的 Label</li>\n<li>注意 Label 的語法正確性: Label 是 Key Value 的組合，你必須使用 <code>&lt;Prefix&gt;/&lt;Name&gt;</code> 的格式來命名，其中 Prefix 是選擇性的，但假如要使用的話，要注意它必須是 DNS Subdomain 的格式，字數限制為 253 個字元，他可以讓團隊使用多個 Label 而不會產生命名衝突 (試想那些存在於第三方套件的 Label...)，其中 <a href=\"http://kubernetes.io\">kubernetes.io</a> 和 <a href=\"http://k8s.io\">k8s.io</a> 是 Kubernetes 針對內部核心元件所保留的 Prefix；Name 就是 Label 屬性名稱，例如可以使用 environment 來代表運行的環境，值得部分就可以用 production 或是 testing，Name 有一些使用需求，例如他不能是空的，字數限制為 63 個字元，開頭和結尾必須使用字母與數字 ([a-z0-9A-Z])，中間可以使用字母與數字和 -, _, . 符號混合</li>\n<li>標準化的 Label 命名規則: 不同的團隊間必須要使用一致性的命名規則，不然花在維護 Label 的努力將會白費掉</li>\n<li>避免不必要的 Label 變更: Label 是用來識別和選擇 K8s 中的資源用以達成排程，部署或是管理的目的，所以變更 Label 會造成深遠和不可預見的影響，例如你把某一群 Pod 的 App Label 從值 frontend 修改成 backend，K8s 就會認為你要把這些 Pod 重新部署到 backend 的節點上，這有可能會造成這些 Pod 開始 Crach，最終無法被存取；所以只要在絕對必要時才去修改 Label，並且在進行任何修改之前仔細的評估可能造成的後果，避免遭遇到不可預期的狀況</li>\n<li>使用 Label Selector 來選擇資源: 透過使用相等性或是集合的操作來對資源做選擇，以相等性來說， = 和 == 都代表相等，!= 代表不相等，也可以透過逗號 , 將添加的多個 Label 區隔開來一起使用；而集合的操作有點像是 SQL 語法中的 IN，例如 app in (frontend, backend) 代表 app Label 擁有 frontend 或是 backend 的資源都會被選擇出來</li>\n<li>不要將應用程式的資訊寫入 Label: K8s Label 主要是用來儲存物件的 Metadata，而不是用來當作應用程式的資料儲存區，因為 K8s 的資源的使用時間通常很短，而且跟應用程式沒有緊密的關係，Label 很快就會變的不同步而毫無用處</li>\n<li>不要將機敏資訊寫入 Label: 假如有心人士可以存取你的 K8s 叢集，而你又把諸如密碼， API Credential 或是其他的機敏資訊寫入了 Label，那麼這些資訊就可以在明碼的情況下被輕易取得；建議應該要存放在 K8s Secret 而不是 Label 內，因為在 Secret 內至少是被編碼過的，而且只有需要的 Pod 才能夠去取得它，這樣一來，即使有心人士可以存取你的 K8s 叢集，也不會有機會直接看到這些儲存於 Secret 的機敏資訊 (自己覺得 K8s Secret 還是不夠安全，建議整合第三方的 Secret Management 工具，如 HashiCorp Vault)</li>\n<li>將 Label 加到 Pod Template: 將必要的 Label 添加到運行資源的 Pod Template 中，如此一來 K8s Controller 便可以如你所期望地建立 Pod；目標是只建立對團隊可以帶來價值的 Label 就好，而不是浮濫的建立一堆沒有用處的 Label，建議從小處著手，一開始先在 Template 中建立一個必要 Label 的清單，例如用來識別資源的擁有者，資源運行的環境以及發布資訊</li>\n<li>將 Label 的添加過程自動化: 自動化可以節省大量時間，當然對於標籤的管理也不例外，假如平常就有在使用 CI/CD Pipeline 的話，就可以輕鬆自動化為某些 Label 做橫向的管理工作；使用 CD 工具來添加 Label 是很明智的選擇，因為它可以確保 Label 的一致性，並且提高工程師的生產力，除此之外，也建議通過 CI 工作來檢查 Label 是否正確無誤，當 Label 遺失時就應該讓 CI 工作失敗並且通知相關負責的團隊來處理</li>\n<li>使用 Label 來做成本監控: 標籤對於了解 K8s 的雲端使用成本很有幫助，其實不管是成本監控，資源分配和管理其實都仰賴著妥切的 Label 策略；當多個團隊共享同一個 K8s Cluster 時 (Multi-Tenant)，你就會需要使用相關 Label 來建立成本分佈報告，因為這樣做才可以獲知特定團隊，服務或是應用服務所耗費的成本，這對調查突然激增的使用成本相當地有幫助</li>\n</ul>\n<h3 id=\"deploying-kubernetes-resources-in-a-specific-order-using-helm-or-werf\"><a class=\"direct-link\" href=\"#deploying-kubernetes-resources-in-a-specific-order-using-helm-or-werf\">#</a> <a href=\"https://blog.werf.io/deploying-kubernetes-resources-in-a-specific-order-using-helm-or-werf-f8eb8c1a08\">Deploying Kubernetes resources in a specific order using Helm or werf</a></h3>\n<p>假如希望部署 K8s 資源時可以使用某種順序去部署的話，通常是有點挑戰性的，有時候甚至必須要等待外部資源準備完成，假設今天你要部署一個應用服務好了，那就要先等一個外部的 Operator 建立好動態的 K8s Secret，再來開始初始化和設置資料庫，最後才能夠部署應用服務，這篇文章就要跟大家介紹如何使用 Helm 或是 werf 來解決這個問題</p>\n<ul>\n<li>使用 Helm: 主要是透過 initContainers 來達成，透過 init container 來讓不同的元件之間有順序性的部署，講白話一點就是有個插入一個 until xxx; do sleep 1 done 的 shell script，這個 script 會一直去檢查某個相依資源是否存在，如果存在就會可以部署主體資源，如果不存在就會一直等待，直到相依資源存在為止，這樣就可以達到等待某個相依資源的目的</li>\n<li>使用 werf: 首先必須要在 K8s 資源定義中加入 werf 相關的 annotations，這些 annotations 會告訴 werf 這些資源的權重，werf 會根據這些權重來決定資源的部署順序，這樣就可以達到資源部署的順序性</li>\n</ul>\n",
      "date_published": "2022-12-06T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/161/rico-161/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/161/rico-161/",
      "title": "第 161 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"how-we-use-terraform-at-slack\"><a class=\"direct-link\" href=\"#how-we-use-terraform-at-slack\">#</a> <a href=\"https://slack.engineering/how-we-use-terraform-at-slack/\">How We Use Terraform At Slack</a></h3>\n<p>Slack 使用 Terraform 時也是早期從單一個 AWS 帳號逐漸擴展，也會把大型服務拆成多個 Terraform state files 管理，也會分配不同 AWS IAM 權限來提供 sandbox 環境，使用文法檢查工具來輔助 Terraform 多版本讓環境可以逐一升級<!-- summary -->，Terraform module 從原本相對路徑逐漸改成用 git 抓下來到最後開發工具只可惜更難做測試，也開發了 Terraform Smart Planner 讓還沒 merge 的測試結果印出 output 讓 reviewer 更好審視。這篇文章的結語也說們的 Terraform 之旅離完美還很遠，也不忘在文章最後偷偷徵才。</p>\n<h3 id=\"how-to-mentor-interns-to-become-skillful-engineers\"><a class=\"direct-link\" href=\"#how-to-mentor-interns-to-become-skillful-engineers\">#</a> <a href=\"https://slack.engineering/how-to-mentor-interns-to-become-skillful-engineers/\">How to Mentor Interns to Become Skillful Engineers</a></h3>\n<p>如何讓讓實習生快速進入狀況也是 DevOps 的一環，Slack 就分享除了要注意分配給實習生要做什麼專案外，他的 onboarding 流程跟資源是否能讓他快速進入狀況？如何測量實習生的實習成效是成功的？如果實習生有多位 mentors 該怎麼確保他可以溝通順暢？文章對於制定這些計畫有個詳細的紀錄，即使用在正職員工上也很受用。</p>\n<h3 id=\"a-day-in-the-life-of-a-cloud-engineer-at-slack-australia\"><a class=\"direct-link\" href=\"#a-day-in-the-life-of-a-cloud-engineer-at-slack-australia\">#</a> <a href=\"https://slack.engineering/a-day-in-the-life-of-a-cloud-engineer-at-slack-australia/\">A Day in the Life of a Cloud Engineer at Slack Australia</a></h3>\n<p>在澳洲的 Slack 的雲端工程師分享他的一天行程，Slack 的雲端團隊有三種分別是 Foundation、VM 和 containers，在 VM 團隊的他表示在每週開會時可以了解其他團隊的事務。公司的溝通風格基本上還是以非同步為主，code review 也是如此，這也有助於跟北美的同事做溝通。</p>\n",
      "date_published": "2022-12-06T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/161/larry-161/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/161/larry-161/",
      "title": "第 161 期 Backend 推薦文章",
      "content_html": "<h2 id=\"backend\"><a class=\"direct-link\" href=\"#backend\">#</a> Backend</h2>\n<h3 id=\"prevent-http-ddos-with-cloudflare---%E9%BB%91%E4%BA%94%E6%AA%94%E6%9C%9F-ddos-%E9%98%B2%E7%A6%A6%E7%AD%86%E8%A8%98\"><a class=\"direct-link\" href=\"#prevent-http-ddos-with-cloudflare---%E9%BB%91%E4%BA%94%E6%AA%94%E6%9C%9F-ddos-%E9%98%B2%E7%A6%A6%E7%AD%86%E8%A8%98\">#</a> <a href=\"https://blog.markkulab.net/prevent-ddos-part2/\">Prevent Http Ddos With Cloudflare - 黑五檔期 Ddos 防禦筆記</a></h3>\n<p>最近黑五的檔期剛過，而在這段時間，作者的公司網站也遭遇了 DDoS 攻擊。所以作者在文章中提到了他是怎麼設定 Cloudflare 來防禦 DDoS，整篇文章圖文並茂講解得非常詳細，如果你的產品也有遇到 DDoS 攻擊，可以參考一下這篇文章。</p>\n<h3 id=\"6-simple-and-useful-postgresql-features-that-i-wish-i-knew-when-i-started\"><a class=\"direct-link\" href=\"#6-simple-and-useful-postgresql-features-that-i-wish-i-knew-when-i-started\">#</a> <a href=\"https://it.badykov.com/blog/2022/09/12/simple-and-usefull-postgresql-features/\">6 Simple and Useful PostgreSQL Features that I wish I knew when I started</a></h3>\n<p>這篇文章介紹了 PostgreSQL 幾個比較少人知道的功能，這些功能都是作者在使用的過程中發現的，而且這些功能都非常實用，不管你是正要開始學習怎麼用 PostgreSQL 或是已經使用有一段時間了，都很推薦這篇文章～</p>\n<h3 id=\"mysql%F0%9F%90%AC-innodb-%E6%95%99%E6%88%91%E7%9A%84%E4%BA%8B%EF%BC%9A-%E6%9C%80%E8%BF%91%E6%9C%80%E5%B0%91%E4%BD%BF%E7%94%A8-lru-%E4%B8%B2%E5%88%97%E7%9A%84%E5%84%AA%E5%8C%96\"><a class=\"direct-link\" href=\"#mysql%F0%9F%90%AC-innodb-%E6%95%99%E6%88%91%E7%9A%84%E4%BA%8B%EF%BC%9A-%E6%9C%80%E8%BF%91%E6%9C%80%E5%B0%91%E4%BD%BF%E7%94%A8-lru-%E4%B8%B2%E5%88%97%E7%9A%84%E5%84%AA%E5%8C%96\">#</a> <a href=\"https://medium.com/%E7%A8%8B%E5%BC%8F%E7%8C%BF%E5%90%83%E9%A6%99%E8%95%89/mysql-innodb-%E6%95%99%E6%88%91%E7%9A%84%E4%BA%8B-%E6%9C%80%E8%BF%91%E6%9C%80%E5%B0%91%E4%BD%BF%E7%94%A8-lru-%E4%B8%B2%E5%88%97%E7%9A%84%E5%84%AA%E5%8C%96-fb1781cdc90e\">MySQL🐬 InnoDB 教我的事： 最近最少使用 LRU 串列的優化</a></h3>\n<p>這篇文章分享了 MySQL 的儲存引擎 InnoDB 內部是怎麼對 LRU(Least Recently Used) 演算法做最佳化，雖然涉及演算法難度比較高一點，不過如果你對 MySQL 的儲存引擎有興趣，可以看看這篇文章。</p>\n",
      "date_published": "2022-12-06T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/161/gqsm-161/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/161/gqsm-161/",
      "title": "第 161 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"the-state-of-frontend-in-2022\"><a class=\"direct-link\" href=\"#the-state-of-frontend-in-2022\">#</a> <a href=\"https://newsletter.pragmaticengineer.com/p/state-of-frontend-2022\">The State of Frontend in 2022</a></h3>\n<p>2022 又要過了，在一年如十年的前端領域中，不曉得前端工程師們都過得如何，在文章中分別從「哪些前端工程師做了問券」、「前端工程師的工作環境」、「工程實作」、「技術」、「工具」和「Vendors」等種類整理許多精彩的問題，裡面也包含了作者對結果的分析。</p>\n<!-- summary -->\n<h3 id=\"an-interactive-guide-to-flexbox\"><a class=\"direct-link\" href=\"#an-interactive-guide-to-flexbox\">#</a> <a href=\"https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/\">An Interactive Guide to Flexbox</a></h3>\n<p>通常像這種介紹排版的文章，就是看程式碼然後搭配圖和解說了解呈現的效果，但這篇文章則是用互動式的方式，讓你可以透過按鈕操作，看看在不同的屬性和寬度下頁面上的元素會如何排列。</p>\n<h3 id=\"javascript%3A-understanding-customevent-and-dispatchevent\"><a class=\"direct-link\" href=\"#javascript%3A-understanding-customevent-and-dispatchevent\">#</a> <a href=\"https://medium.com/cstech/javascript-understanding-customevent-and-dispatchevent-a33d10075818\">JavaScript: Understanding CustomEvent and dispatchEvent</a></h3>\n<p>在這篇文章中會介紹如何用 Event、CustomEvent 和 dispatchEvent() 來建立和監聽事件，且作者還分享了如何，以及在哪些情境下會使用到自定義的事件。</p>\n",
      "date_published": "2022-12-06T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/160/smalltown-160/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/160/smalltown-160/",
      "title": "第 160 期 Container 推薦文章",
      "content_html": "<!-- summary -->\n<h2 id=\"container\"><a class=\"direct-link\" href=\"#container\">#</a> Container</h2>\n<h3 id=\"7-design-principals-for-containers\"><a class=\"direct-link\" href=\"#7-design-principals-for-containers\">#</a> <a href=\"https://hemantjain.medium.com/7-design-principals-for-containers-a6135ef13182\">7 Design Principals for Containers</a></h3>\n<p>此篇文章跟大家詳細介紹七個運行在 Cloud Native 所必須具備的 Container 設計準則，讀完突然發現這不就是使用 K8s 的最佳守則嗎？！</p>\n<ul>\n<li>Single Concern Principle: 一個 Container 只做一件事</li>\n<li>High Observability Principle: 讓 Container 滿足各種被監控的需求</li>\n<li>Life-Cycle Conformance Principle: 根據從平台收到的事件來管理 Container 的生命週期</li>\n<li>Image Immutability Principle: 一旦 Container Image 被建立，就不要再修改它</li>\n<li>Process Disposability Principle: 運行的 Container 要可以隨時被替換掉</li>\n<li>Self-Containment Principle: Container 自己本身要能夠獨立運行</li>\n<li>Runtime Confinement Principle: Container 要能夠建議自己執行所需要的資源</li>\n</ul>\n<!-- summary -->\n<h3 id=\"9-docker-extensions-every-developer-must-try\"><a class=\"direct-link\" href=\"#9-docker-extensions-every-developer-must-try\">#</a> <a href=\"https://dev.to/docker/9-docker-extensions-every-developer-must-try-1no2\">9 Docker Extensions Every Developer Must Try</a></h3>\n<p>還有在使用 Docker Desktop 的人，可以參考這篇文章，讓你知道 Docker Desktop 有哪些 Extension 可以讓開發更加方便</p>\n<ul>\n<li>Drone CI: 無縫與 Drone CI 整合</li>\n<li>Disk Usage: 分析硬碟被 Container 使用的狀況</li>\n<li>vcluster: 建立輕量化的虛擬 K8s 叢集</li>\n<li>Microcks: 整合 Microcks 在本地端 Mock 和測試 API</li>\n<li>OpenShift: 快速將本地端的 Image 部署到遠端的 OpenShift</li>\n<li>Portainer: 透過 Portainer 方便管理本地端的 Container</li>\n<li>Snyk: 協助開發者快速發現 Container Image 的安全問題</li>\n<li>JFrog Xray Scan: 協助開發者快速發現 Container Image 的安全問題</li>\n<li>okteto: 透過 okteto 快速建立本地端所需要的開發環境</li>\n</ul>\n<h3 id=\"finch\"><a class=\"direct-link\" href=\"#finch\">#</a> <a href=\"https://github.com/runfinch/finch\">finch</a></h3>\n<p>Finch 是一個新的開源專案，他提供一個 CLI Client 來建置，運行和發佈 Linux Container，而且可以很簡單的就安裝在 macOS 系統上，白話來說就是用來取代 Docker Desktop 的工具！看了範例使用起來跟 Docker CLI 有 87% 像，提供給大家一個 Docker Desktop 的替代方案。</p>\n",
      "date_published": "2022-11-29T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/160/rico-160/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/160/rico-160/",
      "title": "第 160 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"twitter-architecture-2022-vs.-2012\"><a class=\"direct-link\" href=\"#twitter-architecture-2022-vs.-2012\">#</a> <a href=\"https://twitter.com/alexxubyte/status/1594008281340530688\">Twitter Architecture 2022 vs. 2012</a></h3>\n<p>因 Elon Musk 把 Twitter 架構圖公開，作者就整理了 2022 和 2012 的架構圖讓大家一窺其內部運作。<!-- summary --></p>\n<h3 id=\"how-zapier-uses-keda\"><a class=\"direct-link\" href=\"#how-zapier-uses-keda\">#</a> <a href=\"https://keda.sh/blog/2022-03-10-how-zapier-uses-keda/\">How Zapier uses KEDA</a></h3>\n<p>Zapier 分享他們的 backend worker 原本是靠 CPU loading 做水平擴展，但是此 worker 有很多 blocking I/O 的功能，所以工作量很多時但 CPU 使用量還是很低。也因此團隊開始轉用 <a href=\"https://keda.sh/\">KEDA</a> 這個 event-driven autoscaling 專案來偵測 RabbitMQ queue 的數量和原本的 CPU loading 來做水平擴展。</p>\n<h3 id=\"x.509-certificate-management-with-vault\"><a class=\"direct-link\" href=\"#x.509-certificate-management-with-vault\">#</a> <a href=\"https://www.hashicorp.com/blog/certificate-management-with-vault\">X.509 Certificate Management with Vault</a></h3>\n<p>Vault 可以選不同的 secret engine 而千變萬化，這次介紹的是 PKI（Public Key Infrastructure） certificate，可以生產短期的 certificate 後再搭配 Vault agent 可以做到自動更新與撤銷過期 certificates，也可以審計當時發行和撤銷的 certificates。</p>\n",
      "date_published": "2022-11-29T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/160/larry-160/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/160/larry-160/",
      "title": "第 160 期 Go 推薦文章",
      "content_html": "<h2 id=\"golang\"><a class=\"direct-link\" href=\"#golang\">#</a> Golang</h2>\n<h3 id=\"modern-api-design-with-golang%2C-postgresql-and-docker\"><a class=\"direct-link\" href=\"#modern-api-design-with-golang%2C-postgresql-and-docker\">#</a> <a href=\"https://bognov.tech/modern-api-design-with-golang-postgresql-and-docker\">Modern API design with Golang, PostgreSQL and Docker</a></h3>\n<p>如果你最近剛開始學 Go，那你可以看看這篇文章怎麼用 Go, PostgreSQL 跟 Docker 寫出一個簡單又好部署的 API Server。對於 Go 的寫法有點概念之後，再學其他 library 也會更得心應手～</p>\n<h3 id=\"struct-composition-in-go\"><a class=\"direct-link\" href=\"#struct-composition-in-go\">#</a> <a href=\"https://medium.com/@muhammadarifineffendi/struct-composition-in-go-80492bd447bd\">Struct Composition in Go</a></h3>\n<p>因為 Go 裡面沒有繼承的語法，如果想在 Go 裡面做到其他 OOP 語言的繼承，那可以試試看用 Struct Composition 的方式，雖然剛開始用可能會不太習慣，但用久了會覺得這樣的設計其實也滿好的～</p>\n<h3 id=\"%E5%A5%94%E6%94%BE%E7%9A%84-golang%EF%BC%8C%E5%8D%BB%E9%9A%B1%E8%97%8F%E8%91%97%E6%9C%89%E7%B4%80%E5%BE%8B%E7%9A%84%E6%9E%B6%E6%A7%8B%EF%BC%81--clean-architecture-%E5%AF%A6%E4%BD%9C%E7%AF%87\"><a class=\"direct-link\" href=\"#%E5%A5%94%E6%94%BE%E7%9A%84-golang%EF%BC%8C%E5%8D%BB%E9%9A%B1%E8%97%8F%E8%91%97%E6%9C%89%E7%B4%80%E5%BE%8B%E7%9A%84%E6%9E%B6%E6%A7%8B%EF%BC%81--clean-architecture-%E5%AF%A6%E4%BD%9C%E7%AF%87\">#</a> <a href=\"https://ithelp.ithome.com.tw/articles/10240228\">奔放的 Golang，卻隱藏著有紀律的架構！- Clean Architecture 實作篇</a></h3>\n<p>最近在寫 Go 的時候對於各個 package 之間的 boundary 不太確定該怎麼拿捏、還有 interface 該怎麼設計，好像怎麼樣都切不乾淨的感覺。查了一些資料後發現由 Uncle Bob 提出的 Clean Architecture 剛好有講到各個 Layer 之間要怎麼分工才能比較好測試，如果你還沒聽過 Clean Architecture 的話可以看看這系列文的 Day6 到 Day8，也許會有意外的收穫哦。</p>\n",
      "date_published": "2022-11-29T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/160/gqsm-160/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/160/gqsm-160/",
      "title": "第 160 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"working-with-zustand\"><a class=\"direct-link\" href=\"#working-with-zustand\">#</a> <a href=\"https://tkdodo.eu/blog/working-with-zustand\">Working with Zustand</a></h3>\n<p><a href=\"https://github.com/pmndrs/zustand\">Zustand</a> 是一個 React 的狀態管理工具，相較於 <a href=\"https://react-redux.js.org/\">React Redux</a> 需要準備較複雜的架構來說 <a href=\"https://github.com/pmndrs/zustand\">Zustand</a> 幾乎不需要另外設置太多東西就可以建立 store，因為沒有太複雜的架構，也很容易和其他非同步套件像是 <a href=\"https://tanstack.com/query/v4\">TanStack Query v4</a> 一起使用。說了那麼多，還是推薦到文章中仔細閱讀一番！</p>\n<!-- summary -->\n<h3 id=\"new-css-functional-pseudo-class-selectors-%3Ais()-and-%3Awhere()\"><a class=\"direct-link\" href=\"#new-css-functional-pseudo-class-selectors-%3Ais()-and-%3Awhere()\">#</a> <a href=\"https://web.dev/css-is-and-where/\">New CSS functional pseudo-class selectors :is() and :where()</a></h3>\n<p>CSS 提供的選擇器越來越多樣化，其中又有兩個使用起來近乎一樣，功能也非常相似的選擇器：<code>:is()</code> 和 <code>:where()</code>。在這篇文章中會解釋這兩個選擇器的用途，和各種 combo 的使用方式，最後也會介紹兩者的不同之處！</p>\n<h3 id=\"introduction-to-micro-frontends\"><a class=\"direct-link\" href=\"#introduction-to-micro-frontends\">#</a> <a href=\"https://medium.com/@rajithacharith/introduction-to-micro-frontends-283aa1e126c5\">Introduction to Micro-frontends</a></h3>\n<p>又是關於微前端的介紹文章！不曉得大家會不會和我一樣，如果很常看到某個技術一直一直出現在眼前，那個非學習不可的壓力就會越來越大 😂。在這篇文章裡除了基本的介紹優點與缺點外，也在開頭列了微前端的核心思想，有興趣的大家可以到文章中瞭解看看！</p>\n",
      "date_published": "2022-11-29T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/159/smalltown-159/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/159/smalltown-159/",
      "title": "第 159 期 IaC 推薦文章",
      "content_html": "<!-- summary -->\n<h2 id=\"iac\"><a class=\"direct-link\" href=\"#iac\">#</a> IaC</h2>\n<h3 id=\"the-top-programming-languages\"><a class=\"direct-link\" href=\"#the-top-programming-languages\">#</a> <a href=\"https://octoverse.github.com/2022/top-programming-languages\">The top programming languages</a></h3>\n<p>從最近 GitHub 發布的統計結果發現用來達成 IaC 的 HCL (HashiCorp Configuration Language) 成為過去一年來成長最快的語言，主要是由於 Terraform 此工具的普及，加上自動化管理與部署基礎設施成為被大家廣泛接受的最佳守則，雖然有人覺得他其實不算是一個語言 (<a href=\"https://news.ycombinator.com/item?id=33556902\">Reference</a>)，但不可否認 HCL 在基礎設施的管理幫助大家節省不少時間與降低人為疏失</p>\n<!-- summary -->\n<h3 id=\"infrastructure-as-code%E2%80%99s-broken-promises\"><a class=\"direct-link\" href=\"#infrastructure-as-code%E2%80%99s-broken-promises\">#</a> <a href=\"https://levelup.gitconnected.com/infrastructure-as-codes-broken-promises-4c9dc86f909c\">Infrastructure as Code’s Broken Promises</a></h3>\n<p>此篇文章的作者常常聽到 Infrastructure as Code 的好處就是採用之後可以解決掉所有管理基礎設施的問題，比起手動管理來的更簡單，寫出來的 IaC 可以被拿來測試，除此之外也可以節省更多的時間；但作者覺得總是有不預期的緊急事件會發生，環境會發生偏移，綜合他自己的經驗來說，基礎設施對比於一般靜態的應用程式就像是活著的生物一般，讓他覺得導入 IaC 之後人生也沒有變得比較簡單，要維護 IaC 反而讓一切變得更複雜而且要花更多的時間</p>\n<p>留言提出不少正向的看法與建議，希望作者不要放棄 IaC XD</p>\n<ul>\n<li>作者對於 IaC 有了錯誤的期待，IaC 並不是要讓任何人的生活變得更簡單，它是要讓基礎設施的管理工作有辦法被重複化，進而變得更可靠，最終提高擴展性</li>\n<li>對待 IaC 也需要跟其他的程式語言一樣，你必須要有單元測試和整合測試，而且不要去接受環境偏移的發生，當因為緊急事件的發生不得以手動處理後，你要盡快讓一切的管理工作再次回到 IaC 的管控之下</li>\n<li>雖然短期要花費比較多的時間和感到痛苦，但長期來說，你的基礎設施會變得更可靠，更容易被管理，進而讓你的團隊可以更專注在開發新的功能上</li>\n</ul>\n<h3 id=\"5-common-pitfalls-in-infrastructure-as-code\"><a class=\"direct-link\" href=\"#5-common-pitfalls-in-infrastructure-as-code\">#</a> <a href=\"https://itnext.io/5-common-pitfalls-in-infrastructure-as-code-3637ab6b02e0\">5 common pitfalls in Infrastructure as Code</a></h3>\n<p>這篇文章作者跟大家分享使用 IaC 時常見五個陷阱，讓大家避免掉這些陷阱，讓 IaC 的管理更加順利</p>\n<ul>\n<li>Pets vs Cattle: 避免像對待伺服器或是基礎設施的固定資源一般，例如給予特定的名字與 IP；而是要將它們視為可以被快速替換的資源，這樣才能讓你的基礎設施更像是應用程序而不是實體伺服器</li>\n<li>Virtualized Data Center: 不要把實體資料中心的概念移植到 IaC 來，很多問題是雲端供應商自己要去擔心的，你應該 100% 的虛擬化的去使用它，例如可以使用多個供應商，根據需求來增加或減少資源達到成本最佳化，將服務的負載量分散到第三方服務去</li>\n<li>Not understanding relation between infrastructure and data: 因為害怕會遺失或是損害資料而導致 IaC 的採用率低下，其實可以透過簡單的分析來得知 IaC 要怎麼安全地應用在有正式環境資料的情境之下</li>\n<li>Breaking Dev and Ops: 透過 IaC 來打破 Dev 與 Ops 的藩籬，讓他們可以一起合作，擁有持續不間斷且自動化的流程</li>\n<li>Using IaC as fancy deployment scripts: IaC 並不是花俏的腳本語言，要從 IaC 中獲取最大的好處，就是要嘗試像對待一般的應用程式語言一樣來對待他，例如要有版本控制，它也要有自己的 CI/CD Pipeline</li>\n</ul>\n",
      "date_published": "2022-11-22T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/159/rico-159/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/159/rico-159/",
      "title": "第 159 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"5-new-cncf-projects-to-watch-in-2023\"><a class=\"direct-link\" href=\"#5-new-cncf-projects-to-watch-in-2023\">#</a> <a href=\"https://itnext.io/5-new-cncf-projects-to-watch-in-2023-af5234ba6e87\">5 New CNCF Projects To Watch In 2023</a></h3>\n<p>介紹 5 款還不錯的 CNCF 新專案，分別為：<!-- summary --></p>\n<ul>\n<li><a href=\"https://github.com/SpectralOps/Teller\">Teller</a>，更安全的把敏感資訊避免錯誤地使用在 code、shell 或檔案裡，支援 Vault、Consul、AWS Secret Manager 或 Google Secret Manager 等等</li>\n<li><a href=\"https://github.com/opencost/opencost\">OpenCost</a>，計算 K8s 所產生的費用，前身是 <a href=\"https://kubecost.com/\">kubecost</a></li>\n<li><a href=\"https://github.com/OpenFunction/OpenFunction\">OpenFuction</a>，在 K8s 上建立 FAAS（function as a code platform）</li>\n<li><a href=\"https://github.com/external-secrets/external-secrets\">External-secrets</a>，讓外部的 secret 存入並且自動同步 K8s secret</li>\n<li><a href=\"https://github.com/clusterpedia-io/clusterpedia\">Clusterpedia</a>，把多個 K8s clusters 的資源以 wikipedia 的方式呈現，可以使用進階的搜尋功能</li>\n</ul>\n<h3 id=\"aws-ebs-volumes-gp2-vs-gp3%2C-io1-vs-io2-which-one-to-choose\"><a class=\"direct-link\" href=\"#aws-ebs-volumes-gp2-vs-gp3%2C-io1-vs-io2-which-one-to-choose\">#</a> <a href=\"https://devopslearning.medium.com/aws-ebs-volumes-gp2-vs-gp3-io1-vs-io2-which-one-to-choose-7177e59fff3c\">AWS EBS Volumes gp2 vs gp3, io1 vs io2 which one to choose</a></h3>\n<p>AWS EBS 類型的選擇是維運人員該注意的，gp2 和 gp3 衡量過後評估要換的話，gp2 是可以直接不用關機改成 gp3 的，只是要注意其會根據容量大小決定修改時間，而 io1 改成 io2 也以此類推。</p>\n<h3 id=\"chaos-engineering-101%3A-principles%2C-process%2C-and-examples\"><a class=\"direct-link\" href=\"#chaos-engineering-101%3A-principles%2C-process%2C-and-examples\">#</a> <a href=\"https://learningdaily.dev/chaos-engineering-101-principles-process-and-examples-e94355e4e773\">Chaos engineering 101: Principles, process, and examples</a></h3>\n<p>Chaos Engineering 為現今許多大型組織的解決方案，本文簡單介紹一下其原理、工具、原則和流程、扎實的實際範例和如果要鑽研如何開啟下一步。</p>\n",
      "date_published": "2022-11-22T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/159/larry-159/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/159/larry-159/",
      "title": "第 159 期 軟體工程 推薦文章",
      "content_html": "<h2 id=\"%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B\"><a class=\"direct-link\" href=\"#%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B\">#</a> 軟體工程</h2>\n<h3 id=\"github-stars-won't-pay-your-rent\"><a class=\"direct-link\" href=\"#github-stars-won't-pay-your-rent\">#</a> <a href=\"https://kitze.io/posts/github-stars-wont-pay-your-rent\">GitHub stars won't pay your rent</a></h3>\n<p>現在很多的軟體架構跟解決方案之所以能這麼成熟，是因為有很多無私的開發者花自己的下班時間貢獻給 Github 上的開源專案，但這些開源專案的作者、貢獻者卻鮮少能獲得回報，而且做久了甚至會被覺得是理所當然（像是會有人一直開 issue 說：這個 bug 怎麼還沒修好啊！？）。所以希望大家在使用這些開源的 library、Framework 時能夠更友善一點，如果行有餘力，也可以少喝杯飲料，花一點錢錢支持他們～</p>\n<h3 id=\"the-architecture-of-a-modern-startup\"><a class=\"direct-link\" href=\"#the-architecture-of-a-modern-startup\">#</a> <a href=\"https://betterprogramming.pub/architecture-of-modern-startup-abaec235c2eb\">The Architecture of a Modern Startup</a></h3>\n<p>如果你是一間新創公司的 CTO，正準備要開始設計產品的系統架構，那有幾個關鍵可能是你必須要先考慮的，譬如說公司的產品是否要用 Kubernetes、要有 Staging 環境嗎？要用哪個雲端平台等等，這篇文章會帶你了解一些新創公司在設計架構時，需要考慮的一些問題，讓你更有方向的做出一個好的系統。</p>\n<h3 id=\"how-we-reduced-our-annual-server-costs-by-80%25-%E2%80%94-from-%241m-to-%24200k-%E2%80%94-by-moving-away-from-aws\"><a class=\"direct-link\" href=\"#how-we-reduced-our-annual-server-costs-by-80%25-%E2%80%94-from-%241m-to-%24200k-%E2%80%94-by-moving-away-from-aws\">#</a> <a href=\"https://levelup.gitconnected.com/how-we-reduced-our-annual-server-costs-by-80-from-1m-to-200k-by-moving-away-from-aws-2b98cbd21b46\">How we reduced our annual server costs by 80% — from $1M to $200k — by moving away from AWS</a></h3>\n<p>這篇文章記錄了一家公司是怎麼透過搬離 AWS 來節省高達 80% 的花費，不過我個人覺得重點不是省了多少錢XD，而是他們是怎麼做到的。譬如說他們在真的開始搬家之前是怎麼進行規劃、在逐漸搬過去的過程中又是如何對各個服務進行測試，這些都是很值得學習的地方。</p>\n",
      "date_published": "2022-11-22T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/159/gqsm-159/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/159/gqsm-159/",
      "title": "第 159 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"css-best-practices%3A-16-ways-to-improve-your-css-skills-quickly\"><a class=\"direct-link\" href=\"#css-best-practices%3A-16-ways-to-improve-your-css-skills-quickly\">#</a> <a href=\"https://torquemag.io/2022/11/css-best-practices/\">CSS Best Practices: 16 Ways to Improve Your CSS Skills Quickly</a></h3>\n<p>看了很多關於 JavaScript 的 clean code，也該來看看如何把 CSS 也寫的一樣乾淨且容易維護吧！文章內提出 9 點可以寫出好 CSS 程式碼的 points：</p>\n<ul>\n<li>讓你的 CSS 是可閱讀的</li>\n<li>訂定一些規則，統一 CSS 的編寫格式</li>\n<li>想辦法處理多餘的程式碼</li>\n<li>避免使用 !important</li>\n<li>考慮直接使用 Framework</li>\n<li>善用 reset CSS 消除不同瀏覽器間的設計不一致</li>\n<li>讓網站可被更多群族的使用者使用</li>\n<li>避免在 Wordpress 中編輯 CSS</li>\n<li>最後提供一些關於 CSS 最佳實踐的提示</li>\n</ul>\n<!-- summary -->\n<h3 id=\"javascript-debounce-vs.-throttle\"><a class=\"direct-link\" href=\"#javascript-debounce-vs.-throttle\">#</a> <a href=\"https://www.syncfusion.com/blogs/post/javascript-debounce-vs-throttle.aspx\">JavaScript Debounce vs. Throttle</a></h3>\n<p>Debounce 和 Throttle 都是為了處理網站效能而出現的技術，只要網站效能處理得好，也就能提升使用者的體驗！在這篇文章中會去比較 Debounce 和 Throttle 兩者有什麼不同，以及為何需要他們！</p>\n<h3 id=\"learn-modern-javascript-fundamentals-in-7-hours%E2%80%94free-course\"><a class=\"direct-link\" href=\"#learn-modern-javascript-fundamentals-in-7-hours%E2%80%94free-course\">#</a> <a href=\"https://code.tutsplus.com/tutorials/learn-modern-javascript-fundamentals-free-course--cms-93282\">Learn Modern JavaScript Fundamentals in 7 Hours—Free Course</a></h3>\n<p>用 7 個小時學會 JavaScript 的基礎知識，作者很佛心的為每一個段落的知識點標記時間戳，大家可以找到自己有興趣的章節觀看就可以了，這七個小時的影片裡面包含了基本的 JavaScript 的基礎、資料結構、Web API 和非同步的 JavaScript 等等，推薦給自己一點時間好好學習或複習那些可能遺忘的知識吧！</p>\n",
      "date_published": "2022-11-22T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/158/smalltown-158/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/158/smalltown-158/",
      "title": "第 158 期 Kubernetes 推薦文章",
      "content_html": "<!-- summary -->\n<h2 id=\"kubernetes\"><a class=\"direct-link\" href=\"#kubernetes\">#</a> Kubernetes</h2>\n<h3 id=\"why-you-shouldn%E2%80%99t-use-kubernetes\"><a class=\"direct-link\" href=\"#why-you-shouldn%E2%80%99t-use-kubernetes\">#</a> <a href=\"https://medium.paulbrissaud.fr/why-you-shouldnt-use-kubernetes-6004493259ae\">Why you shouldn’t use Kubernetes</a></h3>\n<p>其實每過一段時間就會有人提出不一定需要使用 Kubernetes 的想法，這次看到這篇文所提出的論點為 1) 太複雜，因為一座嶄新的 K8s Cluster 其實是無法使用的，你必須要安裝適合自己的 Ingress Controller，或是 Storage Provider 給 Persistent Volume 使用，同理可證，為了監控，安全性或是其他的功能，你就需要再安裝更多的套件，這些額外安裝的東西都會需要有人熟悉且去維護它，除此之外也耗費了不少的 CPU 與 Memory 資源</p>\n<!-- summary -->\n<p>再來是太昂貴，因為 K8s Cluster 就跟其他的分散式系統一樣，會需要更多額外的資源來確保可用性與擴展性，如同前一點所述，你為了讓 K8s 變得堪用，你必須要安裝超多額外的東西，後面當然就是更多反應在帳單的雲端資源，除此之外應用服務的部屬方式也必須要改變，所以作者建議大家可以考慮看看先使用其他的 PaaS 或是 FaaS 平台來滿足需求，而不一定要在一開始就選擇使用 K8s 這麼龐大的解決方案</p>\n<h3 id=\"selenium-grid-using-k8s\"><a class=\"direct-link\" href=\"#selenium-grid-using-k8s\">#</a> <a href=\"https://medium.com/@mohdjeeshan007/selenium-grid-using-k8s-fe01e1f84456\">Selenium Grid Using K8S</a></h3>\n<p>對於瀏覽器自動化測試有經驗的人，應該或多或少都會聽過 Selenium，而 Selenium Grid 是可以讓自動化測試平行運行在多台機器中的方式，這篇文章便是要分享如何將 Selenium Grid 整合到 K8s Cluster 中，讓自動化測試可以平行化第運行在 K8s Cluster 中，讓測試人員可以事半功倍！</p>\n<h3 id=\"how-to-validate-kubernetes-yaml-files\"><a class=\"direct-link\" href=\"#how-to-validate-kubernetes-yaml-files\">#</a> <a href=\"https://www.cncf.io/blog/2022/11/11/how-to-validate-kubernetes-yaml-files/\">How to validate Kubernetes YAML files</a></h3>\n<p>活在當年的 IT 領域中應該很難避免去使用 YAML 檔案，甚至有人都會戲謔地稱自以為 YAML 工程師，而這篇發布到 Cloud Native 部落格的文章便想要跟大家分享如何去驗證準備要給 Kubernetes 使用的 YAML 檔案，文中提到驗證的方式可以從幾個面向來看，分別是結構，語義和安全性；而在驗證時的最佳準則就是確保 Shift Left 的精神落實，讓 DevOps 往 DevSecOps 邁進，對於此議題有興趣的朋友可以參閱內文</p>\n",
      "date_published": "2022-11-15T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/158/rico-158/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/158/rico-158/",
      "title": "第 158 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"17-devops-metrics-you-should-be-tracking\"><a class=\"direct-link\" href=\"#17-devops-metrics-you-should-be-tracking\">#</a> <a href=\"https://dzone.com/articles/17-devops-metrics-you-should-be-tracking\">17 DevOps Metrics You Should Be Tracking</a></h3>\n<p>除了服務 metrics 之外，作者建議 17 個 DevOps 相關的 metrics 也需要被追蹤，metrics 主要的方向有：<!-- summary --></p>\n<ul>\n<li>DORA Metrics，用於測量組織開發</li>\n<li>Cycle Time，另外一種測量組織開發產能的 metric</li>\n<li>品質，可以整合在 CI pipeline 做測量</li>\n<li>客戶的回饋</li>\n<li>員工滿意度，對於文件、意見是否被聆聽到、組織是否接受失敗等等</li>\n<li>CI 平均所花的時間、一天跑幾次、壞掉的恢復時間、測試失敗率和成功率</li>\n<li>穩定率，用來測量 CICD pipeline 是否會因不明原因失敗</li>\n<li>Code Coverage</li>\n<li>錯誤逃逸率，測量有多少正式生產環境的錯誤是 CICD pipeline 裡沒有偵測到的</li>\n<li>正常運行時間</li>\n<li>SLI（Service Level Indicator）</li>\n<li>平均意外察覺時間，當服務發生意外時，要多久 on-call 人員才會被分配搶救任務</li>\n<li>平均意外發生時間，當新的功能上線後多久才會有意外</li>\n</ul>\n<h3 id=\"technology-in-the-cloud-native-maturity-model\"><a class=\"direct-link\" href=\"#technology-in-the-cloud-native-maturity-model\">#</a> <a href=\"https://www.cncf.io/blog/2022/11/09/technology-in-the-cloud-native-maturity-model/\">Technology in the Cloud Native Maturity Model</a></h3>\n<p>CNMM（Cloud Native Maturity Model）用於檢視組織 Cloud Native 轉型是否成熟，並且以 5 個面向來做分析：商業產出、人、政策、流程和技術。除了本文外，可以直接看 CNCF GitHub 有更詳細的<a href=\"https://github.com/cncf/cartografos/blob/main/reference/prologue.md\">說明</a></p>\n<h3 id=\"9-best-practices-for-designing-microservice-architectures\"><a class=\"direct-link\" href=\"#9-best-practices-for-designing-microservice-architectures\">#</a> <a href=\"https://traefik.io/blog/9-best-practices-for-designing-microservice-architectures/\">9 Best Practices for Designing Microservice Architectures</a></h3>\n<p>微服務一直都不容易駕馭，作者推薦 9 個實踐方法（但裡面只有 8 點）讓微服務架構設計更成功：</p>\n<ol>\n<li>嘗試事件風暴</li>\n<li>實踐情境繪製</li>\n<li>在一開始規劃好網路</li>\n<li>盡量自動化</li>\n<li>了解遷移到微服務真正的原因是什麼</li>\n<li>工具互動性保持簡單</li>\n<li>架構保持彈性</li>\n<li>考慮使用混沌工程</li>\n</ol>\n",
      "date_published": "2022-11-15T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/158/larry-158/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/158/larry-158/",
      "title": "第 158 期 軟體工程 推薦文章",
      "content_html": "<h2 id=\"%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B\"><a class=\"direct-link\" href=\"#%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B\">#</a> 軟體工程</h2>\n<h3 id=\"%E5%9C%98%E9%9A%8A%E5%8D%94%E4%BD%9C-git-flow\"><a class=\"direct-link\" href=\"#%E5%9C%98%E9%9A%8A%E5%8D%94%E4%BD%9C-git-flow\">#</a> <a href=\"https://link.medium.com/1A7x4xzZjub\">團隊協作 Git Flow</a></h3>\n<p>為了讓工程師們可以有效率的協作，很多公司都會使用 Git Flow 或 Github Flow 來進行開發，這篇文章詳細解釋了 Git Flow 到底解決了什麼問題、已經實際的開發流程會長什麼樣子，推薦給未來可能會進入軟體業的莘莘學子們～</p>\n<h3 id=\"%E6%8A%BD%E8%B1%A1%E5%B1%A4-%E2%80%94-%E9%87%8D%E8%A6%81%E7%9A%84%E5%B9%BE%E4%BB%B6%E4%BA%8B\"><a class=\"direct-link\" href=\"#%E6%8A%BD%E8%B1%A1%E5%B1%A4-%E2%80%94-%E9%87%8D%E8%A6%81%E7%9A%84%E5%B9%BE%E4%BB%B6%E4%BA%8B\">#</a> <a href=\"https://blog.heron.me/%E6%8A%BD%E8%B1%A1%E5%B1%A4-%E9%87%8D%E8%A6%81%E7%9A%84%E5%B9%BE%E4%BB%B6%E4%BA%8B-dd354a38c52b\">抽象層 — 重要的幾件事</a></h3>\n<p>程式寫久了，就會發現在寫程式的過程中，常常會需要把底層的東西給抽象化，如此一來我們才可以從更高的層次來思考如何解決問題。而關於抽象化，這篇文章舉了幾個很生活化的例子，文章不長建議大家都可以讀讀看。</p>\n<h3 id=\"fundamental-software-architectural-patterns\"><a class=\"direct-link\" href=\"#fundamental-software-architectural-patterns\">#</a> <a href=\"https://medium.com/@liams_o/fundamental-software-architectural-patterns-663440c5f9a5\">Fundamental Software Architectural Patterns</a></h3>\n<p>在看很多協定、函式庫的架構時，會發現有一些 pattern 是很常見到的，譬如 TCP/IP 就是以 Layer Pattern 來設計，而 Docker 則是用上了 Client Server Pattern。學習這些 pattern 可以讓我們參考前人的經驗，設計出更好的軟體。</p>\n",
      "date_published": "2022-11-15T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/158/gqsm-158/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/158/gqsm-158/",
      "title": "第 158 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"why-you-should-never-use-px-to-set-font-size-in-css\"><a class=\"direct-link\" href=\"#why-you-should-never-use-px-to-set-font-size-in-css\">#</a> <a href=\"https://joshcollinsworth.com/blog/never-use-px-for-font-size\">Why you should never use px to set font-size in CSS</a></h3>\n<p>這有點標題殺人的意味，但是作者只是想在文章裡面表達，開發者要清楚他在 CSS 內所使用的單位意義是什麼是非常重要的事。</p>\n<!-- summary -->\n<h3 id=\"improve-your-typescript-skills-with-type-challenges\"><a class=\"direct-link\" href=\"#improve-your-typescript-skills-with-type-challenges\">#</a> <a href=\"https://thenewstack.io/improve-your-typescript-skills-with-type-challenges/\">Improve your TypeScript Skills with Type Challenges</a></h3>\n<p>在 GitHub 上面有一個 <a href=\"https://github.com/type-challenges/type-challenges\">type-challenges</a>，裡面有許多關於 TypeScript 的型別問題，如果你已經學會基本的 TypeScript 且想要更深入了解型別原理的話，就很適合挑戰這個 repo！</p>\n<h3 id=\"5-websites-to-learn-frontend-web-development-faster\"><a class=\"direct-link\" href=\"#5-websites-to-learn-frontend-web-development-faster\">#</a> <a href=\"https://dev.to/qbentil/5-websites-to-learn-frontend-web-development-faster-3cid\">5 websites to learn Frontend-web development faster</a></h3>\n<p>在文章中列出了 5 個網站可以幫助你學習有關前端開發的技能，其中最喜歡的是第一個網站 <a href=\"https://exercism.org/\">exercism</a> 能夠根據你想學習的技能繪出學習路線，讓在學習時不會突然迷失下一步的方向。</p>\n",
      "date_published": "2022-11-15T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/157/smalltown/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/157/smalltown/",
      "title": "第 157 期 Coding 推薦文章",
      "content_html": "<h2 id=\"coding\"><a class=\"direct-link\" href=\"#coding\">#</a> Coding</h2>\n<!-- summary -->\n<h3 id=\"git-commit-messages-are-useless\"><a class=\"direct-link\" href=\"#git-commit-messages-are-useless\">#</a> <a href=\"https://blog.trunk.io/git-commit-messages-are-useless-c2f3c46f678e\">Git commit messages are useless</a></h3>\n<p>作者覺得 Git Commit Message 根本就不被需要，就像沒有人在乎你早餐吃了什麼一樣XD 作者的論述與推薦作法如下，(但 Main Branch 的 Commit Message 還是相當重要的) 大家是否也這樣覺得呢？這篇文章的回覆滿多人不認同作者的觀點的，大家可以去看看。</p>\n<!-- summary -->\n<ul>\n<li>因為 Commit Message 在 PR Branch 其實沒有太大的意義，讓 PR 最後被 squash-merged 到 Main Branch 就好，這時設定 GitHub 以 PR 名稱當成 Commit Message 就可以了，而且程式本身的註解才是重點</li>\n<li>Git CLI 最近也添加了一個可以讓開發者不需要寫 Commit Message 的 Flag <code>--allow-empty-message</code>，推薦大家可以使用 command alias 的功能來設定 git commit 指令 <code>git config --global alias.nccommit 'commit -a --allow-empty-message -'</code></li>\n<li>最後就是要記得設定 GitHub Branch Protection 不允許任何人直接 Commit 到 Main Branch</li>\n</ul>\n<h3 id=\"m1guelpf%2Fauto-commit\"><a class=\"direct-link\" href=\"#m1guelpf%2Fauto-commit\">#</a> <a href=\"https://github.com/m1guelpf/auto-commit\">m1guelpf/auto-commit</a></h3>\n<p>auto-commit 是一個可以根據你寫的程式碼自動產生 Commit Message 的小工具 (其使用 Rust 開發且利用了 OpenAI Codex)，這樣一來就可以不用再去掰要寫什麼 Commit Message 了XD</p>\n<h3 id=\"want-cleaner-code%3F-use-the-rule-of-six\"><a class=\"direct-link\" href=\"#want-cleaner-code%3F-use-the-rule-of-six\">#</a> <a href=\"https://betterprogramming.pub/want-cleaner-code-use-the-rule-of-six-c21635ee2185\">Want Cleaner Code? Use the Rule of Six</a></h3>\n<p>每個人都想要寫出 Clean Code，也有不少書籍在談論這個主題，不過你不用急著把書看完才能夠寫出 Clean Code，這篇文章提供了簡單的規則 (Rule of Six) 與詳細範例，讓開發者輕易寫出不令人感到混淆的程式碼</p>\n<ul>\n<li>一行程式碼盡量只做一件事</li>\n<li>拆解太複雜的程式碼成多行 (SIMPLE: Split Into Multiple Lines)</li>\n<li>將功能一樣的程式碼寫成函示 (MORE: Move Out and Rewrite as a Function)</li>\n<li>多練習同時使用 SIMPLE 與 MORE 來撰寫程式碼</li>\n</ul>\n",
      "date_published": "2022-11-08T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/157/rico-157/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/157/rico-157/",
      "title": "第 157 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"how-to-install-and-run-jenkins-with-docker-compose\"><a class=\"direct-link\" href=\"#how-to-install-and-run-jenkins-with-docker-compose\">#</a> <a href=\"https://www.cloudbees.com/blog/how-to-install-and-run-jenkins-with-docker-compose\">How to Install and Run Jenkins With Docker Compose</a></h3>\n<p>現在已經有很多 CICD 工具讓人很好上手，但不能否認的是，Jenkins 在業界還是佔有一席之地。假如想要在自己的電腦快速搭建一個 Jenkins 實驗環境該怎麼辦呢？專門提供 Jenkins 服務 CloudBees 公司寫了一篇圖文並茂的以 docker-compose 快速建立環境的文章，方便讓大家做快速的測試。<!-- summary --></p>\n<h3 id=\"automate-terraform-documentation-like-a-pro!\"><a class=\"direct-link\" href=\"#automate-terraform-documentation-like-a-pro!\">#</a> <a href=\"https://medium.com/google-cloud/automate-terraform-documentation-like-a-pro-ed3e19998808\">Automate Terraform documentation like a pro!</a></h3>\n<p>當 Terraform module 開發完畢時總得寫些文件讓其他團隊知道如何使用，於是作者介紹 <a href=\"https://terraform-docs.io/\">terraform-docs</a> 可以快速生成 Makrdown 或者 AsciiDoc 文件，最好的情況就是把這工具整合進 CI 的流程裡。</p>\n<h3 id=\"how-doordash-ensures-velocity-and-reliability-through-policy-automation\"><a class=\"direct-link\" href=\"#how-doordash-ensures-velocity-and-reliability-through-policy-automation\">#</a> <a href=\"https://doordash.engineering/2022/09/20/how-doordash-ensures-velocity-and-reliability-through-policy-automation/\">How DoorDash Ensures Velocity and Reliability through Policy Automation</a></h3>\n<p>DoorDash 分享了他們 Infrastructure as Code 和 Policy as Code 而工具就是 <a href=\"https://www.terraform.io/\">Terraform</a> 和 <a href=\"https://www.openpolicyagent.org/\">OPA</a> 使用的經驗。OPA 內容會使用 <a href=\"https://www.conftest.dev/\">Conftest</a> 做檢查，在使用 Policy as Code 的建議有：</p>\n<ul>\n<li>重要的 resources 改動應該要給不同相關的團隊做程式碼審查</li>\n<li>Terraform modules 的改動影響 infra 是可以接受的，只要工程師依照 cloud resource 規定就可以讓批准自動化</li>\n<li>特定的操作只能限定在特定的 resources 內</li>\n<li>程式改動必須要有資安團隊審視過</li>\n<li>確保 cloud resources 的 tags 都有被使用到</li>\n<li>成本上的設定可以對 infra 做更改</li>\n<li>對 resource type 做審核，確保工程師寫 IaC 時可以使用到 reserved instances 或者折扣方案</li>\n</ul>\n",
      "date_published": "2022-11-08T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/157/larry-157/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/157/larry-157/",
      "title": "第 157 期 Golang 推薦文章",
      "content_html": "<h2 id=\"golang\"><a class=\"direct-link\" href=\"#golang\">#</a> Golang</h2>\n<h3 id=\"%E5%BE%9E-graphql-go-%E8%BD%89%E6%8F%9B%E5%88%B0-gqlgen\"><a class=\"direct-link\" href=\"#%E5%BE%9E-graphql-go-%E8%BD%89%E6%8F%9B%E5%88%B0-gqlgen\">#</a> <a href=\"https://blog.wu-boy.com/2020/04/switch-graphql-go-to-gqlgen-in-golang/\">從 graphql-go 轉換到 gqlgen</a></h3>\n<p>有在 Go 上寫過 GraphQL Server 的朋友們可能都聽過 <code>graphql-go</code>，雖然他歷史比較悠久，但是他的維護狀況不是很好，所以作者就把他的專案轉移到 gqlgen 上面了，這篇文章就是他的心得分享，如果你也在用 graphql-go，可以參考看看</p>\n<h3 id=\"crud-api-with-go-and-postgresql\"><a class=\"direct-link\" href=\"#crud-api-with-go-and-postgresql\">#</a> <a href=\"https://dev.to/chetansj27/crud-api-with-go-and-postgresql-411n\">CRUD API with Go and PostgreSQL</a></h3>\n<p>如果你才剛開始接觸 Go 的話，這篇文章是一個很簡單的 CRUD API 實作，用到的技術有使用 mux、Gorm 跟 PostgreSQL，如果你想要熟悉一下這幾個技術，可以看這篇文章來快速入門～</p>\n<h3 id=\"processing-large-files-with-go\"><a class=\"direct-link\" href=\"#processing-large-files-with-go\">#</a> <a href=\"https://medium.com/@snassr/processing-large-files-in-go-golang-6ea87effbfe2\">Processing Large Files with Go</a></h3>\n<p>大家有使用 Go 來處理大檔案的經驗嗎？這篇文章講了一個處理巨大 csv 範例，而且在處理的過程中也善用了 Goroutine 來把效能榨乾，如果你也有處理大檔案的需求，可以看看這篇文章的實作方式</p>\n",
      "date_published": "2022-11-08T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/157/gqsm-157/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/157/gqsm-157/",
      "title": "第 157 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"the-new-css-media-query-range-syntax\"><a class=\"direct-link\" href=\"#the-new-css-media-query-range-syntax\">#</a> <a href=\"https://css-tricks.com/the-new-css-media-query-range-syntax/\">The New CSS Media Query Range Syntax</a></h3>\n<p>在前端切版時，為了實作響應式的網站，我們通常會使用 CSS 提供的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries\">Media Queries</a> 為目標的條件設置對應的 CSS 給頁面上的元素，而在 Media Queries Level 4 規範出現一種新語法，讓我們可以使用常見的數學運算符（例如：&gt;和 &lt;）來定義作用目標的寬度！今後說不定就和 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries\">Media Queries</a> 內的 <code>min-width</code> 或 <code>max-width</code> 道別了。</p>\n<!-- summary -->\n<h3 id=\"understanding-javascript-closure-and-javascript-scope\"><a class=\"direct-link\" href=\"#understanding-javascript-closure-and-javascript-scope\">#</a> <a href=\"https://hackernoon.com/understanding-javascript-closure-and-javascript-scope\">Understanding JavaScript closure and JavaScript scope</a></h3>\n<p>在文章裡作者解釋了 JavaScript 的 closure 和變數或函式的作用域，並比較用 ES6 的 const 和 let 宣告的變數對於作用域的範圍有何不同，最後也推薦幾個使用 closure 的實際案例和使用的優缺點。</p>\n<h3 id=\"javascript-under-the-hood%3A-advanced-concepts-developers-should-know\"><a class=\"direct-link\" href=\"#javascript-under-the-hood%3A-advanced-concepts-developers-should-know\">#</a> <a href=\"https://blog.bitsrc.io/javascript-under-the-hood-advanced-concepts-developers-should-know-a89ddbb11228\">JavaScript Under The Hood: Advanced Concepts Developers Should Know</a></h3>\n<p>如果你還是 JavaScript 的初學者，而且對一些行為產生的結果感到困惑，那可能就需要花一些時間認識「引擎蓋下的 JavaScript 了」！文中提到幾個在 JavaScript 中重要的原理，其中包含了 Scope Chain、Hoisting、Asynchronous、Execution Context 和 Call Stack。一次讀完可能會有點吃力，建議可以從最近有感受到的部分開始讀就好，不然沒深刻的印象很容易就忘記了。 😂</p>\n",
      "date_published": "2022-11-08T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/156/smalltown-156/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/156/smalltown-156/",
      "title": "第 156 期 Career 推薦文章",
      "content_html": "<h2 id=\"career\"><a class=\"direct-link\" href=\"#career\">#</a> Career</h2>\n<!-- summary -->\n<h3 id=\"how-did-i-double-my-salary-as-software-engineer\"><a class=\"direct-link\" href=\"#how-did-i-double-my-salary-as-software-engineer\">#</a> <a href=\"https://medium.com/codex/how-did-i-double-my-salary-as-software-engineer-175bb6098080\">How Did I Double My Salary as Software Engineer</a></h3>\n<p>怎麼讓薪水變成兩倍呢？看到這個標題以為是要談怎麼精進技術或是軟性技能方面的內容，結果作者直接給出那就做兩份工作的答案XD 文中內容主要想跟大家說怎麼達成一次從事兩份工作的訣竅，例如一定要是遠端的工作，盡量要是資深以上的職位，自己本身的各方面能力要有相當的程度，要能夠犧牲週末時間，要能夠在高壓下有效率的產出...等；至於要如何達到這些條件，作者還有提出施行計劃，詳情請參閱內文</p>\n<!-- summary -->\n<h3 id=\"the-reality-of-being-a-staff-software-engineer%3A-salary%2C-workload%2C-and-how-to-get-started-(2022)\"><a class=\"direct-link\" href=\"#the-reality-of-being-a-staff-software-engineer%3A-salary%2C-workload%2C-and-how-to-get-started-(2022)\">#</a> <a href=\"https://4dayweek.medium.com/the-reality-of-being-a-staff-software-engineer-salary-workload-and-how-to-get-started-2022-ecfd561f6bd2\">The Reality of Being a Staff Software Engineer: Salary, Workload, and How To Get Started (2022)</a></h3>\n<p>雖然最近景氣不佳，但軟體業依然是未來數十年前景相對看好的產業，尤其是以美國來說，所以這篇 4 Day Week 的文章想要跟大家談一談 Staff SoftWare Engineer 這個職位，內容包含薪水的範圍 (10萬到30萬鎂)，工作內容主要會有哪一些 (建立團隊，領導關鍵軟體元件，系統與功能的設計...等)，職涯的發展該如何規劃 (技術軌或是管理軌)</p>\n<h3 id=\"a-compensation-breakdown-from-amazon%2C-microsoft%2C-google\"><a class=\"direct-link\" href=\"#a-compensation-breakdown-from-amazon%2C-microsoft%2C-google\">#</a> <a href=\"https://levelup.gitconnected.com/my-salary-progression-from-amazon-microsoft-google-ec58d0c3ba01\">A Compensation Breakdown From Amazon, Microsoft, Google</a></h3>\n<p>之前有分享過此作者對於 Amazon 與 Google 公司內軟體工程文化的<a href=\"https://alexcancode.medium.com/150-000-amazon-engineer-vs-300-000-google-engineer-b0976793cf56\">比較文</a>，他的 Medium 滿多跟找工作相關的文章，像這篇就是在分享他位於 Amazon(2020):$112,000，Microsoft(2021):$123,000 與 Google(2022):$169,000 三間公司所拿到的底薪與其詳細的薪資結構，有興趣的人可以直接參閱內文</p>\n",
      "date_published": "2022-11-01T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/156/luka-156/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/156/luka-156/",
      "title": "第 156 期 網站開發 推薦文章",
      "content_html": "<h2 id=\"%E7%B6%B2%E7%AB%99%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E7%B6%B2%E7%AB%99%E9%96%8B%E7%99%BC\">#</a> 網站開發</h2>\n<h3 id=\"shell-script-%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90\"><a class=\"direct-link\" href=\"#shell-script-%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90\">#</a> <a href=\"https://sharats.me/posts/shell-script-best-practices/\">Shell Script 最佳實踐</a></h3>\n<p>作者列出了 15 條原則撰寫 Shell Script 的原則，並且提供了一個模板讓大家參考。裡面的原則包含：</p>\n<ul>\n<li>使用 Bash!讓 Shell Script 具有可移植性和增加 DX 開發者體驗。</li>\n<li>使用 <code>set -o errexit</code> 在第一行，這樣執行失敗的時候會跳出，而非繼續執行其他剩餘的指令。</li>\n</ul>\n<p>還有更多的 Shell Script 撇步在裡面</p>\n<h3 id=\"python-3.11-is-much-faster-than-3.8\"><a class=\"direct-link\" href=\"#python-3.11-is-much-faster-than-3.8\">#</a> <a href=\"https://jott.live/markdown/py3.11_vs_3.8\">Python 3.11 is much faster than 3.8</a></h3>\n<p>Python 3.11 問世了，有多快呢？這篇文章不僅比較了 Python 3.8，也與 JavaScript 和 C++ 比較了一番。</p>\n<h3 id=\"vhs%EF%BC%9A-your-cli-home-video-recorder\"><a class=\"direct-link\" href=\"#vhs%EF%BC%9A-your-cli-home-video-recorder\">#</a> <a href=\"https://github.com/charmbracelet/vhs\">VHS： Your CLI home video recorder</a></h3>\n<p>這個酷東西可以用編寫程式的方式來產生終端機操作指令的 Gif 動畫。對於撰寫教學文件的時候好方便啊。</p>\n",
      "date_published": "2022-11-01T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/156/larry-156/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/156/larry-156/",
      "title": "第 156 期 Golang 推薦文章",
      "content_html": "<h2 id=\"golang\"><a class=\"direct-link\" href=\"#golang\">#</a> Golang</h2>\n<h3 id=\"golang-for-javascript-developers\"><a class=\"direct-link\" href=\"#golang-for-javascript-developers\">#</a> <a href=\"https://deepu.tech/golang-for-javascript-developers-part-1/\">Golang for JavaScript developers</a></h3>\n<p>最近想學 Go 的人越來越多了，這邊推薦這一系列文章，主要是在介紹 Golang 跟 JavaScript 的差異，如果你原本就會寫 JavaScript，而且想要開始想要學習 Go，那這兩篇文章可以幫助你快速上手 Go～</p>\n<h3 id=\"build-a-tic-tac-toe-game-in-the-github-readme.md-file\"><a class=\"direct-link\" href=\"#build-a-tic-tac-toe-game-in-the-github-readme.md-file\">#</a> <a href=\"https://betterprogramming.pub/play-tic-tac-toe-from-github-readme-md-file-754539603380\">Build a Tic-Tac-Toe Game In the GitHub README.md File</a></h3>\n<p>這篇文章很有趣，主要是在說要怎麼用 Markdown 跟 Go 在 Github 專案的 README 裡面寫一個真的可以玩的圈圈叉叉遊戲。如果只想玩玩看不想看文章的話，也可以直接滑到文章最底下的 <a href=\"https://github.com/sridhar-sp/tic-tac-toe\">Frontend — Readme.md</a>，然後直接點進去玩玩看。</p>\n<h3 id=\"how-to-write-accurate-benchmarks-in-go\"><a class=\"direct-link\" href=\"#how-to-write-accurate-benchmarks-in-go\">#</a> <a href=\"https://teivah.medium.com/how-to-write-accurate-benchmarks-in-go-4266d7dd1a95\">How to Write Accurate Benchmarks in Go</a></h3>\n<p>在對 Go 的程式碼做 benchmark 的時候，其實有很多該注意的小地方，像是在設定好測試環境後應該要先重置 timer 才開始進行測試，或是在寫測試時要避免程式碼不小心被編譯器最佳化吃掉，如此一來才能得到真正準確的 benchmark 結果。</p>\n",
      "date_published": "2022-11-01T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/156/gqsm-156/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/156/gqsm-156/",
      "title": "第 156 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"fully-typed-web-apps\"><a class=\"direct-link\" href=\"#fully-typed-web-apps\">#</a> <a href=\"https://www.epicweb.dev/fully-typed-web-apps\">Fully Typed Web Apps</a></h3>\n<p>文章中表示 TypeScript 是在 Web 產業中相當重要的技術之一，但對作者來說，TypeScript 的型別不單單只是應用在前端，更是貫穿後端到前端之間的型別！在這篇文章中會講解從端對端（這裡的端對端是指從資料庫的型別通過後端，最後到 UI 上再返回資料庫）的型別安全性有多麼出色以及令人興奮！</p>\n<!-- summary -->\n<h3 id=\"next.js-13\"><a class=\"direct-link\" href=\"#next.js-13\">#</a> <a href=\"https://nextjs.org/blog/next-13\">Next.js 13</a></h3>\n<p>在 <a href=\"https://nextjs.org/conf\">Next.js Conf</a> 中，官方宣佈 Next.js 13 關於 dynamic without limits 的幾個基礎：</p>\n<ul>\n<li><a href=\"https://nextjs.org/blog/next-13#app-directory-beta\">app/ Directory (beta)</a> - 更少的 JavaScript 檔案和程式碼</li>\n<li><a href=\"https://nextjs.org/blog/next-13#introducing-turbopack-alpha\">Turbopack (alpha)</a> - 比 Webpack 和 Vite 速度更快</li>\n<li><a href=\"https://nextjs.org/blog/next-13#nextimage\">New next/image (stable)</a> - 更容易設計排版的圖片元件</li>\n<li><a href=\"https://nextjs.org/blog/next-13#nextfont\">New @next/font (beta)</a> - 可以方便地使用所有 Google 字體，並同時兼顧性能和隱私</li>\n<li><a href=\"https://nextjs.org/blog/next-13#nextlink\">Improved next/link</a> - 不再需要在 <code>Link</code> 裡另外寫 a 標籤了</li>\n</ul>\n<p>如果想瞭解更多，可以到連結中看看有哪些驚奇的進展和更新！</p>\n<h3 id=\"introducing-turbopack%3A-rust-based-successor-to-webpack\"><a class=\"direct-link\" href=\"#introducing-turbopack%3A-rust-based-successor-to-webpack\">#</a> <a href=\"https://vercel.com/blog/turbopack\">Introducing Turbopack: Rust-based successor to Webpack</a></h3>\n<p>在 Webpack 的創建者 Tobias Koppers 的帶領下，Turbopack 在文章中宣稱將成為 Web 的新世代的打包工具，在今天開源後，未來會適用於所有框架。快點進文章中看看 Turbopack 到底多快、為什麼那麼快？以及它下一步會是什麼？</p>\n",
      "date_published": "2022-11-01T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/155/smalltown-155/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/155/smalltown-155/",
      "title": "第 155 期 OpenSource 推薦文章",
      "content_html": "<h2 id=\"opensource\"><a class=\"direct-link\" href=\"#opensource\">#</a> OpenSource</h2>\n<!-- summary -->\n<h3 id=\"postgres-wasm\"><a class=\"direct-link\" href=\"#postgres-wasm\">#</a> <a href=\"https://github.com/snaplet/postgres-wasm\">Postgres WASM</a></h3>\n<p>Postgres WASM 是一個運行於瀏覽器的 PostgreSQL Server，聽起來也太酷了，只要把該專案 <code>git clone</code> 下來之後執行 <code>cd packages/runtime &amp;&amp; npx serve</code>，就可以使用瀏覽器拜訪 <a href=\"http://localhost:3000\">http://localhost:3000</a> 來使用了！</p>\n<!-- summary -->\n<h3 id=\"cidr\"><a class=\"direct-link\" href=\"#cidr\">#</a> <a href=\"https://github.com/bschaatsbergen/cidr\">cidr</a></h3>\n<p>身為一位 SRE 其實還滿常接觸到 IP Address 的，尤其是在設定防火牆規則的時候，對於 IP 的 CIDR 總是不像坐在旁邊的同事可以一眼就看出來他的範圍嗎？這時候就可以使用這個 cidr CLI 工具來偷作弊了，他可以幫你快速的計算出 CIDR 的範圍，告訴你這個 IP Address 是屬於哪個 CIDR 的！</p>\n<h3 id=\"revup\"><a class=\"direct-link\" href=\"#revup\">#</a> <a href=\"https://github.com/Skydio/revup\">Revup</a></h3>\n<p>想要成為 10 倍速工程師嗎？那可以考慮看看使用這個 Revup 小工具，他可以協助開發人員平行處理 Git Pull Request，透過對於 Commit Message 動手腳讓開發人員可以在本機端就同時建立多個 Git Pull Request，並且一樣也可以透過 Commit Message 來對於特定的 Pull Requet 去做後續操作，除此之外還有很多跟 Git 相關的功能，可以讓開發人員更有效率的開發。</p>\n",
      "date_published": "2022-10-25T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/155/luka-155/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/155/luka-155/",
      "title": "第 155 期 網頁開發 推薦文章",
      "content_html": "<h2 id=\"%E7%B6%B2%E9%A0%81%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E7%B6%B2%E9%A0%81%E9%96%8B%E7%99%BC\">#</a> 網頁開發</h2>\n<h3 id=\"when-life-gives-you-lemons%2C-write-better-error-messages\"><a class=\"direct-link\" href=\"#when-life-gives-you-lemons%2C-write-better-error-messages\">#</a> <a href=\"https://wix-ux.com/when-life-gives-you-lemons-write-better-error-messages-46c5223e1a2f\">When life gives you lemons, write better error messages</a></h3>\n<p>怎麼樣的錯誤訊息是好的呢？好的錯誤訊息又可以帶給我們什麼好處？這篇文章示範了什麼是好的錯誤訊息與如何撰寫的原則。由 UX 設計師撰寫的文章，讓錯誤訊息閱讀起來更加的有好的使用者體驗。</p>\n<h3 id=\"the-http-crash-course-nobody-asked-for\"><a class=\"direct-link\" href=\"#the-http-crash-course-nobody-asked-for\">#</a> <a href=\"https://fasterthanli.me/articles/the-http-crash-course-nobody-asked-for\">The HTTP crash course nobody asked for</a></h3>\n<p>作者以一個 HTTP 維護者的身分，提供了一個 HTTP 的快速攻略。本教學使用的是 Cargo，一個 Rust 的套件管理工具。教學從 HTTP 1.1 開始逐步進化到 HTTP 2 的過程。</p>\n<h3 id=\"sha-3-buffer-overflow\"><a class=\"direct-link\" href=\"#sha-3-buffer-overflow\">#</a> <a href=\"https://mouha.be/sha-3-buffer-overflow/\">SHA-3 Buffer Overflow</a></h3>\n<p><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37454\">CVE-2022-37454</a>這個漏洞讓 <a href=\"https://github.com/python/cpython/issues/98517\">Python</a>, <a href=\"https://bugs.php.net/bug.php?id=81738\">PHP</a>, <a href=\"https://foss.heptapod.net/pypy/pypy/-/commit/860b897b2611a4099ef9c63ce848fdec89c74b31\">PyPy</a>, <a href=\"https://github.com/johanns/sha3/issues/17\">SHA3 for Ruby</a>, and <a href=\"https://github.com/XKCP/XKCP/security/advisories/GHSA-6w4m-2xhg-2658\">XKCP</a>。而 XKCP 則是 SHA-3 的官方設計者的實作。所以影響的範圍讓 Python, PHP　等等的腳本語言都受到了影響。這篇文章帶我們看看 SHA-3 造成資安問題的原因與過程。</p>\n",
      "date_published": "2022-10-25T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/155/larry-155/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/155/larry-155/",
      "title": "第 155 期 軟體工程 推薦文章",
      "content_html": "<h2 id=\"%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B\"><a class=\"direct-link\" href=\"#%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B\">#</a> 軟體工程</h2>\n<h3 id=\"%E5%A6%82%E4%BD%95%E9%80%B2%E8%A1%8C-code-review%3F\"><a class=\"direct-link\" href=\"#%E5%A6%82%E4%BD%95%E9%80%B2%E8%A1%8C-code-review%3F\">#</a> <a href=\"https://link.medium.com/lGZQcF4mhub\">如何進行 Code Review?</a></h3>\n<p>為了讓程式碼的品質維持在一定水準之上，code review 這個步驟非常重要。但具體來說，在做 code review 時到底要注意哪些地方呢？這篇文章給出了非常多實質的建議，讓你可以從各個方面去審核程式碼，才不會讓 code review 變成只是 merge 前過過水的固定儀式。</p>\n<h3 id=\"the-12-factor-app-%E7%AD%86%E8%A8%98\"><a class=\"direct-link\" href=\"#the-12-factor-app-%E7%AD%86%E8%A8%98\">#</a> <a href=\"https://marcus116.blogspot.com/2020/09/architecture-12-factor-app.html\">The 12 factor App 筆記</a></h3>\n<p>The 12 Factor App 這個概念雖然是好多年前發佈的了，但放到今日的軟體開發上還是非常有參考價值，在真的開始寫程式碼之前可以先參考 The 12 Factor App 的架構做設計，未來在開發、部署、維護的時候也許會比較輕鬆～</p>\n<h3 id=\"15-fundamental-tips-on-rest-api-design\"><a class=\"direct-link\" href=\"#15-fundamental-tips-on-rest-api-design\">#</a> <a href=\"https://medium.com/@liams_o/15-fundamental-tips-on-rest-api-design-9a05bcd42920\">15 fundamental tips on REST API design</a></h3>\n<p>API 要怎麼設計一直都是門學問，有些設計得好那就算不讀文件也知道怎麼用，而有些亂寫一通的 API 就算有文件也是要讀得很辛苦才能搞懂（像是我公司的XD）。為了不想再看到爛 API，這篇文章分享了幾個在設計 REST API 時的重點，照著這個思維下去設計就能做出簡單、易讀、好用的 API Endpoint 喔～</p>\n",
      "date_published": "2022-10-25T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/155/gqsm-155/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/155/gqsm-155/",
      "title": "第 155 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"futuristic-css\"><a class=\"direct-link\" href=\"#futuristic-css\">#</a> <a href=\"https://www.smashingmagazine.com/2022/10/futuristic-css/\">Futuristic CSS</a></h3>\n<p>作者他每年都會對開發者進行調查，詢問他們想要使用的工具和想學習的 CSS 技術（如果你也想成為數據之一，可以到<a href=\"https://survey.devographics.com/survey/state-of-css/2022\">這裡</a>）。而在這篇文章中作者則會推測未來的 CSS 可能會走向什麼趨勢，作者提出來的特性都有想要解決的問題，可以看看哪些痛點也存在你我之間。 😂</p>\n<!-- summary -->\n<h3 id=\"javascript-proxy%3A-using-javascript-proxies-like-a-pro\"><a class=\"direct-link\" href=\"#javascript-proxy%3A-using-javascript-proxies-like-a-pro\">#</a> <a href=\"https://fjolt.com/article/javascript-proxy-object\">Javascript Proxy: Using Javascript Proxies like a Pro</a></h3>\n<p>在不想要改變原有物件，但又需要在那之上增加一些行為的時候，使用 Proxy Pattern 通常都不失為一種解決方案，而且 Proxy 語法又是 JavaScript 本身提供的，使用起來真的相當方便！一起看看文章中的介紹吧！</p>\n<h3 id=\"what-is-cors%3F\"><a class=\"direct-link\" href=\"#what-is-cors%3F\">#</a> <a href=\"https://dev.to/jpomykala/what-is-cors-11kf\">What is CORS?</a></h3>\n<p>這篇文章會預設你已經擁有 HTTP 協定的相關知識（如果還不熟的話可以去看之前推薦的 <a href=\"https://howhttps.works/\">這篇超可愛的文章</a>），並向初學者說明的角度，用清楚的圖片解釋何謂 CORS，以及為什麼我們會碰到與它相關的錯誤。</p>\n",
      "date_published": "2022-10-25T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/154/smalltown-154/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/154/smalltown-154/",
      "title": "第 154 期 Kubernetes 推薦文章",
      "content_html": "<h2 id=\"kubernetes\"><a class=\"direct-link\" href=\"#kubernetes\">#</a> Kubernetes</h2>\n<!-- summary -->\n<h3 id=\"learn-kubernetes---the-easy-way\"><a class=\"direct-link\" href=\"#learn-kubernetes---the-easy-way\">#</a> <a href=\"https://programmingpercy.tech/blog/learn-kubernetes-the-easy-way\">Learn Kubernetes - The Easy Way</a></h3>\n<p>假如你是一個軟體開發人員，應該時常會聽到 Kubernetes，畢竟他已經成為整個產業中 Container Orchestrator 的標準，作者當初剛開始學習 Kubernetes 時覺得很困難，因為其中有很多的東西需要學習，所以沒多久他就想要放棄了，也因為這個理由，所以他嘗試寫這篇教學文章來慢慢地將整個 K8s 需要知道的知識用簡單且好理解的方式一步一步給走過一輪，最終將可以完成一個提供 API 運行有資料庫的應用程式！</p>\n<!-- summary -->\n<h3 id=\"kubernetes-authentication-sidecars%3A-a-revelation-in-microservice-architecture\"><a class=\"direct-link\" href=\"#kubernetes-authentication-sidecars%3A-a-revelation-in-microservice-architecture\">#</a> <a href=\"https://betterprogramming.pub/kubernetes-authentication-sidecars-a-revelation-in-microservice-architecture-12c4608189ab\">Kubernetes Authentication Sidecars: A Revelation in Microservice Architecture</a></h3>\n<p>身為一位軟體開發人員，我們總是花費大把的時間在設定 Authentication 或是除錯有關於 Authentication 的問題，你一定曾經卡在 Authentication 無法符合預期運作的坑裡，而隨著 MicroServiers 的大量採用，有越來越多的服務需要去實作 Authentication，而這篇文章想要跟大家介紹如何透過利用 Sidecar 的方式來統一處理 Authentication 的需求</p>\n<h3 id=\"securing-ci%2Fcd-pipelines-through-security-gates-with-kubescape\"><a class=\"direct-link\" href=\"#securing-ci%2Fcd-pipelines-through-security-gates-with-kubescape\">#</a> <a href=\"https://www.cncf.io/blog/2022/10/14/securing-ci-cd-pipelines-through-security-gates-with-kubescape/\">Securing CI/CD pipelines through security gates with Kubescape </a></h3>\n<p>DevOps 的概念讓程式碼透過更完善且自動化的 CI/CD 提升了服務的品質，然而在 Security 越來越重要的今天也有更多的 Zero-Day 威脅與錯誤的組態配置被引入到正式環境的系統當中，而在 CI/CD Process 越來越自動化的今天，如何在此過程中加入 Security Gate 來檢查與驗證系統的安全性就變得非常重要，而這篇文章就想要跟大家介紹如何在 CI/CD 的 Process 中透過 Kubescape 來檢查 Kubernetes 的安全性</p>\n",
      "date_published": "2022-10-18T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/154/luka-154/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/154/luka-154/",
      "title": "第 154 期 Youtube 推薦影片",
      "content_html": "<h2 id=\"youtube\"><a class=\"direct-link\" href=\"#youtube\">#</a> Youtube</h2>\n<h3 id=\"rust-tutorial-full-course\"><a class=\"direct-link\" href=\"#rust-tutorial-full-course\">#</a> <a href=\"https://www.youtube.com/watch?v=ygL_xcavzQ4\">Rust Tutorial Full Course</a></h3>\n<p>一堂課學 Rust 的課程，一個終端機，分章節標示出來，有十萬人觀看過，看來 Rust 真的很夯。</p>\n<h3 id=\"3-alternatives-for-heroku's-free-tier---full-stack-%26-api-hosting\"><a class=\"direct-link\" href=\"#3-alternatives-for-heroku's-free-tier---full-stack-%26-api-hosting\">#</a> <a href=\"https://www.youtube.com/watch?v=MusIvEKjqsc\">3 Alternatives for Heroku's Free Tier - Full Stack &amp; API Hosting</a></h3>\n<p>本影片介紹了三個可以替代 Heroku 免費版的替代方案，外國的工程師 Youtuber 特別佈置了自己房間的燈光，酷酷的。</p>\n<h3 id=\"postgresql-tutorial-full-course-2022\"><a class=\"direct-link\" href=\"#postgresql-tutorial-full-course-2022\">#</a> <a href=\"https://www.youtube.com/watch?v=85pG_pDkITY&amp;t=2s\">PostgreSQL Tutorial Full Course 2022 </a></h3>\n<p>手把手教學如何使用 PostgreSQL。一個指令一個指令教你打，教你怎麼操作。</p>\n",
      "date_published": "2022-10-18T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/154/larry-154/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/154/larry-154/",
      "title": "第 154 期 JavaScript 推薦文章",
      "content_html": "<h2 id=\"javascript\"><a class=\"direct-link\" href=\"#javascript\">#</a> JavaScript</h2>\n<h3 id=\"dockerfile-good-practices-for-node-and-npm\"><a class=\"direct-link\" href=\"#dockerfile-good-practices-for-node-and-npm\">#</a> <a href=\"https://adambrodziak.pl/dockerfile-good-practices-for-node-and-npm\">Dockerfile good practices for Node and NPM</a></h3>\n<p>在幫 NodeJS 寫 Dockerfile 時，其實有滿多小地方都需要注意，像是要把 NODE_ENV 設定好、清 npm cache 讓 image 更小等等，這篇文章把這些小地方都列了出來，讓大家可以回去檢查看看自己的 Dockerfile~</p>\n<h3 id=\"a-quick-guide-to-cell-phone-vibration-with-javascript\"><a class=\"direct-link\" href=\"#a-quick-guide-to-cell-phone-vibration-with-javascript\">#</a> <a href=\"https://blog.petefowler.dev/a-quick-guide-to-cell-phone-vibration-with-javascript\">A quick guide to cell phone vibration with JavaScript</a></h3>\n<p>原本我以為只有 native app 可以讓手機震動，但想不到現在網頁也可以透過 Vibration API 來讓手機震動了，這篇文章簡單介紹了怎麼寫 JS 讓手機震動、判斷手機支不支援震動、甚至還可以控制震動的持續長短，看完真的有種長知識的感覺</p>\n<h3 id=\"node.js-best-practices\"><a class=\"direct-link\" href=\"#node.js-best-practices\">#</a> <a href=\"https://github.com/goldbergyoni/nodebestpractices\">Node.js Best Practices</a></h3>\n<p>這個 Github repo 搜集了非常非常多的 Node.js Best practice，雖然內容很不錯，但因為實在太多了可能要花一個月才能全部看完。建議大家可以收藏起來然後每天看一點點，哪天一不小心可能就看完了～</p>\n",
      "date_published": "2022-10-18T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/154/gqsm-154/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/154/gqsm-154/",
      "title": "第 154 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"the-web%E2%80%99s-next-transition\"><a class=\"direct-link\" href=\"#the-web%E2%80%99s-next-transition\">#</a> <a href=\"https://www.epicweb.dev/the-webs-next-transition\">The Web’s Next Transition</a></h3>\n<p>Web 開發的每個架構都有屬於他的好處以及痛點，而就是那些痛點促使我們不斷的進入到下一個新的架構。在文章會一一以下每種架構的優缺點：</p>\n<ul>\n<li>Multi-Page Apps (MPAs)</li>\n<li>Progressively Enhanced Multi-Page Apps (PEMPAs)</li>\n<li>Single Page Apps (SPAs)</li>\n</ul>\n<p>目前最流行的是 Single Page Apps，但我們正進入到另一個新架構的過渡期當中！</p>\n<!-- summary -->\n<h3 id=\"%E3%80%90mvvm%E3%80%91%E5%A6%82%E4%BD%95%E6%89%8B%E5%88%BB-vue-%E7%9A%84-text-interpolations-%E8%88%87-data-binding\"><a class=\"direct-link\" href=\"#%E3%80%90mvvm%E3%80%91%E5%A6%82%E4%BD%95%E6%89%8B%E5%88%BB-vue-%E7%9A%84-text-interpolations-%E8%88%87-data-binding\">#</a> <a href=\"https://medium.com/codememo/mvvm-%E5%A6%82%E4%BD%95%E6%89%8B%E5%88%BB-vue-%E7%9A%84-text-interpolations-%E8%88%87-data-binding-4f4f8442d1a6\">【MVVM】如何手刻 Vue 的 Text Interpolations 與 Data Binding</a></h3>\n<p>作者會在文章中解釋如何用原生的 JavaScript 實作目前前端框架常見的資料綁定，其中會涉及到以下幾個知識和技術點：</p>\n<ol>\n<li>如何將 data 編譯到 HTML 的標記上</li>\n<li>如何使用 Array.reduce() 對 template 標記取值</li>\n<li>如何使用 Proxy API 監聽 data 的 setter 以實現響應式數據綁定</li>\n<li>使用訂閱/發佈模式的概念，收集需編譯的依賴文本對象</li>\n<li>使用閉包 (Closure) 的概念，紀錄依賴對像</li>\n<li>如何使用遞迴進行深層遍歷</li>\n<li>如何做到「指哪打哪」的響應式</li>\n</ol>\n<h3 id=\"typescript%3A-type-guards\"><a class=\"direct-link\" href=\"#typescript%3A-type-guards\">#</a> <a href=\"https://www.robinwieruch.de/typescript-type-guard/\">TypeScript: Type Guards</a></h3>\n<p>前一陣子在讀 TypeScript 文件的時候有讀到 this-based type guards，和這篇文章一樣都是用 <code>XXX is Type</code> 檢查使用者自己定義的型別，以確保經過 type guard 的 value 型別。</p>\n",
      "date_published": "2022-10-18T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/153/smalltown-153/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/153/smalltown-153/",
      "title": "第 153 期 Career 推薦文章",
      "content_html": "<h2 id=\"career\"><a class=\"direct-link\" href=\"#career\">#</a> Career</h2>\n<!-- summary -->\n<h3 id=\"%24150%2C000-amazon-engineer-vs.-%24300%2C000-google-engineer\"><a class=\"direct-link\" href=\"#%24150%2C000-amazon-engineer-vs.-%24300%2C000-google-engineer\">#</a> <a href=\"https://levelup.gitconnected.com/150-000-amazon-engineer-vs-300-000-google-engineer-b0976793cf56\">$150,000 Amazon Engineer vs. $300,000 Google Engineer</a></h3>\n<p>作者在 2020 與 2022 分別加入了 Amazon 與 Google 這兩間科技巨頭當軟題工程師，文章中根據他的經驗分享了這兩間公司巨大的文化差異，例如：</p>\n<!-- summary -->\n<ul>\n<li>Amazon 外傳有著惡名昭彰的績效改善制度，每年績效墊底的 10% 員工會失去他們的工作，但作者表示他並沒有真的遇到過，但是這種存在於勞動力中的恐懼感阻礙了工程師的發展，畢竟當一個人太擔心如何保住工作，那麼就無法做好工作</li>\n<li>Amazon 有一份希望員工遵守與實踐的工作守則，外傳的 16 項中作者從主管那裡只有聽到三項是一樣的，分別是 Ownership, Dive Deep 與 Customer Obsession，其中前兩項讓作者覺得就是在告訴人要自己把工作搞定，而且比較沒有團隊合作的感覺</li>\n<li>Amazon 對於 Customer Obsession 這項則是讓作者有深刻的體會到 &quot;顧客就是對的！&quot; 這句話，但是當工程師始終把客戶放在首位時，就會會了趕快把東西趕出來而犧牲掉軟體的品質，你會需要為一個客戶的小投訴而放棄自己手頭上本來在做的事情，導致你總是在為客戶優化，而不是整個軟體的建設工作</li>\n<li>Google 沒有所謂的工作領導守則，但內部流行著一句 &quot;Build for Everyone&quot; 的口號，當你是在為了所有人而建構軟體時，你就會開始思考如何去改善整個軟體建設工作，並專注於提升工程方面的生產力</li>\n<li>Google 的內部文件有單一個團隊在負責，而且必須要互相都審視過才能夠更新，這導致了文件的品質相當的高；而且還可以在上廁所時看到寫程式的技巧與工具；有著全自動化的開發環境設定流程；程式碼必須讓具有該語言認證的專業人士審查過才行，因為畢竟 Bug 可以在早期的 Code Review 就被發現，而不是等到上線後才發現</li>\n<li>Google 也特別注重員工福利，例如提供免費午餐與晚餐，還有健身房會員；當員工不用花時間在煮飯與打掃上時，就可以讓工作的時間更有效率；常常運動會讓人從壓力中釋放，保持更好的工作與生活平衡</li>\n</ul>\n<h3 id=\"i-reject-95%25-of-developers-in-an-interview%3A-here%E2%80%99s-how-to-become-one-of-the-top-5%25\"><a class=\"direct-link\" href=\"#i-reject-95%25-of-developers-in-an-interview%3A-here%E2%80%99s-how-to-become-one-of-the-top-5%25\">#</a> <a href=\"https://betterprogramming.pub/i-reject-95-of-developers-in-an-interview-heres-how-to-become-one-of-the-top-5-aebf70ac427f\">I Reject 95% of Developers in an Interview: Here’s How to Become One of the Top 5%</a></h3>\n<p>對於大多數想要尋找 Junior 工程師的公司來說，最好希望聘僱到的並不是一個有著厲害技能的人，而是這個人跟公司文化相吻合，而且未來有著成長的潛力，所以假如你是一個 Junior 工程師，你的長期貢獻遠比目前所具有的技能來的重要，因此面試的目的是需要證明和你工作會是良好的經驗，而且你會是一個有潛力成為優秀工程師的人！這篇文章便是想要跟大家分享如何達成這樣的一個目標，底下稍微列一下文章大綱，詳細內容請參閱原文：</p>\n<ul>\n<li>Communicate Your Intentions</li>\n<li>Be Honest</li>\n<li>Have a Positive Attitude</li>\n<li>Be Trainable</li>\n<li>Be Interested</li>\n</ul>\n<h3 id=\"interview-guide\"><a class=\"direct-link\" href=\"#interview-guide\">#</a> <a href=\"https://interviewguide.dev/\">Interview Guide</a></h3>\n<p>Nick 是一個在微軟的資深軟體工程師，他參與過超過一百場軟體工程師的面試 (包含擔任面試者與面試官)，不管是如 FAANG 科技巨頭或是小新創公司的面試他都通過了，所以他決定把自己主觀的面試經驗寫成這份面試指南來回饋給社群，讓更多的人可以透過這份指南來準備面試，並且提升自己的面試機會！</p>\n",
      "date_published": "2022-10-11T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/153/luka-153/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/153/luka-153/",
      "title": "第 153 期 Hacker News 推薦文章",
      "content_html": "<h2 id=\"hacker-news\"><a class=\"direct-link\" href=\"#hacker-news\">#</a> Hacker News</h2>\n<h3 id=\"%5B%E8%8B%B1%5D%E5%9B%A0%E9%97%9C%E9%96%89%E8%A6%96%E8%A8%8A%E9%8F%A1%E9%A0%AD%E8%80%8C%E8%A2%AB%E7%BE%8E%E5%9C%8B%E5%85%AC%E5%8F%B8%E7%9A%84%E8%8D%B7%E8%98%AD%E5%93%A1%E5%B7%A5%E5%9C%A8%E6%B3%95%E5%BA%AD%E4%B8%8A%E7%8D%B2%E8%B3%A0-75000-%E6%AD%90%E5%85%83\"><a class=\"direct-link\" href=\"#%5B%E8%8B%B1%5D%E5%9B%A0%E9%97%9C%E9%96%89%E8%A6%96%E8%A8%8A%E9%8F%A1%E9%A0%AD%E8%80%8C%E8%A2%AB%E7%BE%8E%E5%9C%8B%E5%85%AC%E5%8F%B8%E7%9A%84%E8%8D%B7%E8%98%AD%E5%93%A1%E5%B7%A5%E5%9C%A8%E6%B3%95%E5%BA%AD%E4%B8%8A%E7%8D%B2%E8%B3%A0-75000-%E6%AD%90%E5%85%83\">#</a> <a href=\"https://nltimes.nl/2022/10/09/dutch-employee-fired-us-firm-shutting-webcam-awarded-eu75000-court\">[英]因關閉視訊鏡頭而被美國公司的荷蘭員工在法庭上獲賠 75000 歐元</a></h3>\n<p>一個美國公司的員工，在遠端工作的時候因為拒絕打開事視訊鏡頭而被解雇，而荷蘭法院判定不當解雇而判給他 75000 歐元。該公司是一間叫做 Chetu Inc. 的位於佛羅里達的公司。</p>\n<p>該員工被要求參加一個「糾正行為計畫」的虛擬訓練營，參加的期間必須保持視訊鏡頭的開啟。而當他在開啟兩天後，他覺得他的隱私被侵犯所以關閉了視訊鏡頭，公司因此解雇他。而他一狀告到荷蘭法院，法院判賠他 75000 歐元。</p>\n<h3 id=\"%5B%E8%8B%B1%5Dhow-to-catch-and-handle-errors-in-bash\"><a class=\"direct-link\" href=\"#%5B%E8%8B%B1%5Dhow-to-catch-and-handle-errors-in-bash\">#</a> <a href=\"https://www.xmodulo.com/catch-handle-errors-bash.html\">[英]How to catch and handle errors in bash</a></h3>\n<p>如何在 Bash 中處理錯誤，這篇文章告訴你怎麼做</p>\n<h3 id=\"%5B%E8%8B%B1%5Dapple-asks-suppliers-to-shift-airpods%2C-beats-production-to-india---nikkei-asia\"><a class=\"direct-link\" href=\"#%5B%E8%8B%B1%5Dapple-asks-suppliers-to-shift-airpods%2C-beats-production-to-india---nikkei-asia\">#</a> <a href=\"https://asia.nikkei.com/Spotlight/Supply-Chain/Apple-asks-suppliers-to-shift-AirPods-Beats-production-to-India\">[英]Apple asks suppliers to shift AirPods, Beats production to India - Nikkei Asia</a></h3>\n<p>蘋果要求供應商將 Airpods 與 Beats 生產線移動到印度，這個動作將全球供應鏈部屬至南亞國家，降低對中國的依賴，以因應中美貿易戰。</p>\n",
      "date_published": "2022-10-11T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/153/larry-153/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/153/larry-153/",
      "title": "第 153 期 Golang 推薦文章",
      "content_html": "<h2 id=\"golang\"><a class=\"direct-link\" href=\"#golang\">#</a> Golang</h2>\n<h3 id=\"%E4%B9%BE%E6%B7%A8%E7%9A%84-golang-%E7%B7%A8%E7%A2%BC-(clean-go-code)-%E7%B3%BB%E5%88%97\"><a class=\"direct-link\" href=\"#%E4%B9%BE%E6%B7%A8%E7%9A%84-golang-%E7%B7%A8%E7%A2%BC-(clean-go-code)-%E7%B3%BB%E5%88%97\">#</a> <a href=\"https://datapool.tw/2022/09/11/%e8%89%af%e5%a5%bd%e7%9a%84%e4%b9%be%e6%b7%a8%e7%9a%84-golang-%e7%b7%a8%e7%a2%bc-clean-go-code1/\">乾淨的 Golang 編碼 (Clean Go code) 系列</a></h3>\n<p>把程式碼寫得乾淨漂亮從來不是一件容易的事，這一系列文章以 Go 為例分享了怎麼把程式跟註解都寫得更漂亮，讓你的 codebase 更好維護～</p>\n<h3 id=\"concurrency-isn%E2%80%99t-always-faster-in-go\"><a class=\"direct-link\" href=\"#concurrency-isn%E2%80%99t-always-faster-in-go\">#</a> <a href=\"https://link.medium.com/9fVkvAzOktb\">Concurrency isn’t Always Faster in Go</a></h3>\n<p>因為有 Goroutine 的關係，在 Go 裡面很輕易就可以做到併發（Concurrency），但併發並不完全就代表高效能，如果沒有搞清楚各個 thread 什麼時候會執行，那可能還會比 sequential 執行來得更慢哦</p>\n<h3 id=\"a-practical-approach-to-structuring-golang-applications\"><a class=\"direct-link\" href=\"#a-practical-approach-to-structuring-golang-applications\">#</a> <a href=\"https://dev.to/firdavs_kasymov/a-practical-approach-to-structuring-golang-applications-1cc2\">A practical approach to structuring Golang applications</a></h3>\n<p>每次要開新專案時，都很煩惱資料夾的結構應該要怎麼拆分，而這篇文章介紹了一種還不錯的方法，大家可以參考看看</p>\n",
      "date_published": "2022-10-11T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/153/gqsm-153/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/153/gqsm-153/",
      "title": "第 153 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"the-future-of-the-web-is-on-the-edge\"><a class=\"direct-link\" href=\"#the-future-of-the-web-is-on-the-edge\">#</a> <a href=\"https://deno.com/blog/the-future-of-web-is-on-the-edge\">The Future of the Web is on the Edge</a></h3>\n<p>文章標題上的 edge 是指你的網站或 APP 同時給在世界各地的 server 託管，讓 server 可以更靠近使用者一點，算是物理上的拉近使用者與 server 的距離，使得使用者能夠更快的得到 server 的回應，文章中除了比較各地的 TTFB 時間，還針對以下幾點解說 edge 的特性：</p>\n<ul>\n<li>更靠進使用者的 Caching</li>\n<li>更少的 servers，更多的 serverless</li>\n<li>更佳的性能</li>\n<li>更好的安全性</li>\n<li>更棒的開發體驗</li>\n</ul>\n<!-- summary -->\n<h3 id=\"a-deep-dive-into-css-grid-minmax()\"><a class=\"direct-link\" href=\"#a-deep-dive-into-css-grid-minmax()\">#</a> <a href=\"https://ishadeed.com/article/css-grid-minmax/\">A Deep Dive Into CSS Grid minmax()</a></h3>\n<p>CSS 的 grid 排版相當好用！且在 grid 系統裡面有個作者認為非常強大 <code>minmax()</code> 特性，使他寫了一篇文章，來當作一份完整的 <code>minmax()</code> 使用指南。在文章裡，程式碼、圖片、影片全都有！可以花一些時間慢慢看完。</p>\n<h3 id=\"%E5%9C%A8-reduce-%E4%BD%BF%E7%94%A8%E9%BB%9E%E9%BB%9E%E9%BB%9E-spread-operator-%E6%98%AF%E6%95%88%E8%83%BD%E4%B8%8A%E7%9A%84-anti-pattern\"><a class=\"direct-link\" href=\"#%E5%9C%A8-reduce-%E4%BD%BF%E7%94%A8%E9%BB%9E%E9%BB%9E%E9%BB%9E-spread-operator-%E6%98%AF%E6%95%88%E8%83%BD%E4%B8%8A%E7%9A%84-anti-pattern\">#</a> <a href=\"https://jason-memo.dev/posts/spread-in-reduce-is-a-perf-antipattern/\">在 reduce 使用點點點 spread operator 是效能上的 anti-pattern</a></h3>\n<p>在一些 reduce 中，常常會為了使每個 object 都是 immutable 的而使用 spread operator 語法產生另一個新的 object，但也因為這樣會導致時間複雜度從 O(n) 變成 O(n^2)，雖然在大部分情況下，這麼做是不會顯著的影響到效能，但在真的需要優化的時候，還是可以注意一下這種寫法所產生出來的額外效能耗損。</p>\n",
      "date_published": "2022-10-11T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/152/smalltown-152/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/152/smalltown-152/",
      "title": "第 152 期 OpenSource 推薦文章",
      "content_html": "<h2 id=\"opensource\"><a class=\"direct-link\" href=\"#opensource\">#</a> OpenSource</h2>\n<!-- summary -->\n<h3 id=\"workerd\"><a class=\"direct-link\" href=\"#workerd\">#</a> <a href=\"https://github.com/cloudflare/workerd\">workerd</a></h3>\n<p><a href=\"https://workers.cloudflare.com/\">workers</a> 是 CloudFlare 所推出的 serverless runtime 解決方案，當初看到時覺得 CDN 這樣算不算撈過界了XD 而官方在最近宣布將其開源了，所以大家可以在自己的環境中使用 workderd 來架設 serverless 服務，不過現在還在 beta 階段，所以還是要小心使用！</p>\n<!-- summary -->\n<h3 id=\"whisper\"><a class=\"direct-link\" href=\"#whisper\">#</a> <a href=\"https://github.com/openai/whisper\">whisper</a></h3>\n<p>Whisper 是最近由 OpenAI 所發表的自動語音辨識（ASR）系統，他透過大量的語音資料所訓練而來，而且他的模型也是開源的，所以大家可以自己來訓練一個模型，或是直接使用他來做一些有趣的事情，例如我就看到馬上有人利用他來<a href=\"https://github.com/sensahin/YouWhisper\">將 youtube 影片變成文字版</a>！</p>\n<h3 id=\"mixctl\"><a class=\"direct-link\" href=\"#mixctl\">#</a> <a href=\"https://github.com/inlets/mixctl\">mixctl</a></h3>\n<p>mixctl 是一個使用 golang 所開發的小巧 TCP Load Balancer，他主要是希望可以幫助使用者將架設於不同地方的多個服務透過單一個 TCP Tunnel 給串接起來，使用起來滿簡單的，只需要透過 yaml 格式將 routing 設定好，然後就可以透過 mixctl 來啟動這個 TCP Tunnel 了，感覺是本地端開發的好幫手！</p>\n",
      "date_published": "2022-10-04T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/152/luka-152/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/152/luka-152/",
      "title": "第 152 期 Hacker News 推薦文章",
      "content_html": "<h2 id=\"hacker-news\"><a class=\"direct-link\" href=\"#hacker-news\">#</a> Hacker News</h2>\n<h3 id=\"120%3A-burned-out-tech-ceo-%E2%86%92-warehouse-associate\"><a class=\"direct-link\" href=\"#120%3A-burned-out-tech-ceo-%E2%86%92-warehouse-associate\">#</a> <a href=\"https://www.jasonshen.com/120/\">120: Burned Out Tech CEO → Warehouse Associate</a></h3>\n<p>有著傑出的 23 年經驗的 CEO Philip Su 他對技術感到筋疲力盡(Burned out)了，取而代之的是一個不這麼理想的工作，一個 Amazon 的零售工作。</p>\n<h3 id=\"codebase-as-database%3A-turning-the-ide-inside-out-with-datalog-%7C-pete's-blog\"><a class=\"direct-link\" href=\"#codebase-as-database%3A-turning-the-ide-inside-out-with-datalog-%7C-pete's-blog\">#</a> <a href=\"https://petevilter.me/post/datalog-typechecking/\">Codebase as Database: Turning the IDE Inside Out with Datalog | Pete's Blog</a></h3>\n<p>作者製作了一個 Datalog 的 IDE，Datalog 是一種大型資料庫的規範，正如 SQL 一樣。這個 IDE 能夠簡化 Datalog 的語法。</p>\n<h3 id=\"hckr-news---hacker-news-sorted-by-time\"><a class=\"direct-link\" href=\"#hckr-news---hacker-news-sorted-by-time\">#</a> <a href=\"https://hckrnews.com/\">hckr news - Hacker News sorted by time</a></h3>\n<p>hckr news 是一個可以讓你依照時間排序瀏覽 Hacker News 的網站。介面滿舒服的，可以快速看到每天有哪些新的文章。</p>\n",
      "date_published": "2022-10-04T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/152/larry-152/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/152/larry-152/",
      "title": "第 152 期 Rust 推薦文章",
      "content_html": "<h2 id=\"rust\"><a class=\"direct-link\" href=\"#rust\">#</a> Rust</h2>\n<h3 id=\"rust-and-neovim---a-thorough-guide-and-walkthrough\"><a class=\"direct-link\" href=\"#rust-and-neovim---a-thorough-guide-and-walkthrough\">#</a> <a href=\"https://rsdlt.github.io/posts/rust-nvim-ide-guide-walkthrough-development-debug/\">Rust and Neovim - A Thorough Guide and Walkthrough</a></h3>\n<p>雖然 Vim 已經是很古老的編輯器，但因為他的 plugin 非常多，而且又可以跟終端機很好的整合，所以還是有很多人在用。而這邊有一篇詳細的教學，教你怎麼把 Neovim + Rust 的開發環境設定好，讓你可以在 Vim 中舒服的寫 Rust～</p>\n<h3 id=\"6-recommendations-to-improve-your-rust-code\"><a class=\"direct-link\" href=\"#6-recommendations-to-improve-your-rust-code\">#</a> <a href=\"https://betterprogramming.pub/rust-beginner-tips-8ecc2503517e\">6 Recommendations to Improve Your Rust Code</a></h3>\n<p>這篇是給 Rust 新手的一些 tips 跟建議，可以讓你寫出更好更漂亮的程式碼，文章不長，但內容很實用～</p>\n<h3 id=\"%E8%A9%A6%E7%94%A8-load-testing-%E5%B7%A5%E5%85%B7---drill\"><a class=\"direct-link\" href=\"#%E8%A9%A6%E7%94%A8-load-testing-%E5%B7%A5%E5%85%B7---drill\">#</a> <a href=\"https://chengweichen.com/2021/07/drill-load-testing.html\">試用 Load testing 工具 - Drill</a></h3>\n<p>因為 Rust 的速度很快，又可以編譯成單一 binary 檔，所以很適合用來寫 CLI 工具，像 Drill 這個 load testing 工具就是用 Rust 寫的，特性是使用起來非常簡單，有流量測試需求的話不妨試試看～</p>\n",
      "date_published": "2022-10-04T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/152/gqsm-152/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/152/gqsm-152/",
      "title": "第 152 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"how-to-write-maintainable-javascript-code-in-2023-%E2%80%94-web-or-node.js\"><a class=\"direct-link\" href=\"#how-to-write-maintainable-javascript-code-in-2023-%E2%80%94-web-or-node.js\">#</a> <a href=\"https://blog.devgenius.io/how-to-write-maintainable-javascript-code-in-2023-web-or-node-js-d66d8baead67\">How to write maintainable JavaScript code in 2023 — Web or Node.js</a></h3>\n<p>作者提出幾個他認為寫出可維護的 JavaScript 的幾個要素，以下列出其中幾個：</p>\n<ul>\n<li>善用 TypeScript 帶來的各種好處</li>\n<li>好好學習 JavaScript 和使用的 Framework</li>\n<li>定義好撰寫的程式碼風格</li>\n<li>撰寫單元測試或 E2E 測試</li>\n</ul>\n<p>雖然有些要素看似比較沒那麼重要，但是我也認為在學習一樣新的語言、工具或是 Framework 的話，好好的閱讀文件是絕對需要的！</p>\n<!-- summary -->\n<h3 id=\"hacking-jwt\"><a class=\"direct-link\" href=\"#hacking-jwt\">#</a> <a href=\"https://systemweakness.com/hacking-jwt-3324cba98210\">Hacking JWT</a></h3>\n<p>JSON Web Tokens 經常用於前端對後端的 API 請求中確認權限，而作者會使用 <a href=\"https://github.com/ticarpi/jwt_tool\">jwt_tool</a> 來進行各種 JWT 的攻擊，在文章裡會介紹以下幾種攻擊方式：</p>\n<ul>\n<li>None Algorithm</li>\n<li>Weak Secret</li>\n<li>Key Confusion</li>\n<li>Kid Parameter Injection</li>\n<li>JKU Parameter Injection</li>\n</ul>\n<h3 id=\"how-https-works\"><a class=\"direct-link\" href=\"#how-https-works\">#</a> <a href=\"https://howhttps.works/\">HOW HTTPS WORKS</a></h3>\n<p>超級無敵宇宙霹靂可愛，如果你在上班閱讀被主管看到還可以說你是在學習 https 的相關知識！這篇網站用漫畫的方式一格一格解釋為什麼需要 https 以及它能夠做什麼！閱讀起來完全沒有負擔，如果你已經受不了看那一堆非常 hardcode 的介紹文章，那絕對不能錯過這個！</p>\n",
      "date_published": "2022-10-04T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/151/smalltown-151/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/151/smalltown-151/",
      "title": "第 151 期 Cloud 推薦文章",
      "content_html": "<h2 id=\"cloud\"><a class=\"direct-link\" href=\"#cloud\">#</a> Cloud</h2>\n<!-- summary -->\n<h3 id=\"aws-vs-gcp-reliability-is-wildly-different\"><a class=\"direct-link\" href=\"#aws-vs-gcp-reliability-is-wildly-different\">#</a> <a href=\"https://freeman.vc/notes/aws-vs-gcp-reliability-is-wildly-different\">AWS vs GCP reliability is wildly different</a></h3>\n<p>雖然公有雲用起來讓人覺得它像是不存在一般，例如你可以隨時開關一台機器，而且只需要根據使用量付費，彷彿就像是背後有無窮無盡的資源一樣，但其實事實並非如此，他背後也是實體機房，也會受到晶片短缺的影響才對 (尤其是 GPU)，作者在 GCP 遇到機器開很慢的狀況之後，就想要來試試看同時對 AWS 與 GCP 做開大量 GPU 機器的壓力測試</p>\n<p>實驗方式為在兩週內兩個平台都各自開了 3,000 T4 GPUs，假如開啟時間超過 200s 就算 Timeout，實驗結果 AWS 大勝，平均一個 GPU 在 15秒內 (平均 11.4 秒)，GCP 在 45 秒內 (平均 42.6 秒)，AWS 在兩週內遇到一次明顯的開機 Timeout，而 GCP 則是 84次，結論就是 AWS 的開機時間比 GCP 快 66% 並且少 84 倍遇到開機 Timeout 的機會</p>\n<!-- summary -->\n<h3 id=\"why-you-should-keep-using-cpu-limits-on-kubernetes\"><a class=\"direct-link\" href=\"#why-you-should-keep-using-cpu-limits-on-kubernetes\">#</a> <a href=\"https://dnastacio.medium.com/why-you-should-keep-using-cpu-limits-on-kubernetes-60c4e50dfc61\">Why you should keep using CPU limits on Kubernetes</a></h3>\n<p>大家應該都知道 K8s 的 Workload 可以設定資源的限制，Memory 比較沒有問題，但是對於 CPU 的 Limit 到底要不要設定？前一陣子有一篇文章請大家停止設定 CPU Limit 引起熱烈迴響，文章一開頭就提到在大多數情況之下，設定 CPU Limit 利大於弊 (<a href=\"https://home.robusta.dev/blog/stop-using-cpu-limits/\">For the love of god, stop using CPU limits on Kubernetes (updated)</a>)；過了一個月之後，也就是這篇文章的作者則是提出反面的看法，他認為 CPU Limit 仍然是有其必要性的，並且提出了一些理由，大家覺得究竟要不要設定呢？</p>\n<h3 id=\"best-tools-to-visualize-your-terraform\"><a class=\"direct-link\" href=\"#best-tools-to-visualize-your-terraform\">#</a> <a href=\"https://medium.com/@mike_tyson_cloud/best-tools-to-visualize-your-terraform-d4b537f091dc\">Best Tools to Visualize your Terraform</a></h3>\n<p>很多人目前都是使用 Terraform 來做雲端資源做管理，不過畢竟人類是視覺性的動物，所以如果能夠將 Terraform 的資源以視覺化的方式呈現出來，那麼就能夠更容易的理解資源的關係，這篇文章介紹各種可以將 Terraform 程式碼視覺畫的工具，讓大家可以將 Terraform 的資源以視覺化的方式呈現出來</p>\n<ul>\n<li>Brainboard</li>\n<li>Terraform 原生指令</li>\n<li>Blast radius</li>\n<li>Terraform Visual</li>\n<li>Inframap</li>\n<li>Rover</li>\n<li>Diagrams codes</li>\n<li>Structurizr</li>\n<li>Diagrams Mingrammer</li>\n<li>Cloud discovery</li>\n</ul>\n",
      "date_published": "2022-09-27T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/151/luka-151/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/151/luka-151/",
      "title": "第 151 期 Hacker News 推薦文章",
      "content_html": "<h2 id=\"hacker-news\"><a class=\"direct-link\" href=\"#hacker-news\">#</a> Hacker News</h2>\n<!-- summary -->\n<h3 id=\"your-cto-should-actually-be-technical\"><a class=\"direct-link\" href=\"#your-cto-should-actually-be-technical\">#</a> <a href=\"https://blog.southparkcommons.com/your-cto-should-actually-be-technical/\">Your CTO Should Actually Be Technical</a></h3>\n<p>你的 CTO 應該要是一個技術者(開發者).公司的技術領導者應該要有很高的技術水準, 因為 CTO 是了解應徵者的技術水準與優秀之處的唯一途徑.</p>\n<!-- summary -->\n<h3 id=\"hardvard-resumes-and-cover-letters-guide\"><a class=\"direct-link\" href=\"#hardvard-resumes-and-cover-letters-guide\">#</a> <a href=\"https://hwpi.harvard.edu/files/ocs/files/hes-resume-cover-letter-guide.pdf\">Hardvard Resumes and cover letters guide</a></h3>\n<p>不錯的履歷指南，裡面有許多履歷的範例與 cover letter。包含了許多履歷的小秘訣：履歷最容易犯的錯，該做的事情，不該做的事情。</p>\n<h3 id=\"outdated-vs.-complete\"><a class=\"direct-link\" href=\"#outdated-vs.-complete\">#</a> <a href=\"https://vivqu.com/blog/2022/09/25/outdated-apps/\">Outdated vs. Complete</a></h3>\n<p>作者開發了一款很穩定的 APP, 三年前就已經屬於穩定狀態，但是最近收到官方的更新通知，官方告訴他如果再不更新就要將他的　APP 標示為過時的。</p>\n",
      "date_published": "2022-09-27T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/151/larry-151/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/151/larry-151/",
      "title": "第 151 期 軟體工程 推薦文章",
      "content_html": "<h2 id=\"%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B\"><a class=\"direct-link\" href=\"#%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B\">#</a> 軟體工程</h2>\n<h3 id=\"%E6%8A%80%E8%A1%93%E7%BF%BB%E8%AD%AF---%E7%B7%A8%E5%AF%AB%E7%A8%8B%E5%BC%8F%E8%A8%BB%E8%A7%A3%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90\"><a class=\"direct-link\" href=\"#%E6%8A%80%E8%A1%93%E7%BF%BB%E8%AD%AF---%E7%B7%A8%E5%AF%AB%E7%A8%8B%E5%BC%8F%E8%A8%BB%E8%A7%A3%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90\">#</a> <a href=\"https://blog.taiwolskit.com/best-practices-for-writing-code-comments\">技術翻譯 - 編寫程式註解的最佳實踐</a></h3>\n<p>寫程式寫得越久，越發現要把註解寫好真的不是一件容易的事。這篇文章分享了幾個在寫註解時的 best practice，希望可以讓大家在適當的時候都寫出更漂亮的註解～</p>\n<h3 id=\"%E4%B8%89%E6%AC%BE%E5%A5%BD%E7%94%A8%E7%9A%84%E7%B9%AA%E5%9C%96%E5%B7%A5%E5%85%B7%E4%BE%86%E8%A7%A3%E6%B1%BA%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B%E6%88%96%E6%B5%81%E7%A8%8B%E5%9C%96\"><a class=\"direct-link\" href=\"#%E4%B8%89%E6%AC%BE%E5%A5%BD%E7%94%A8%E7%9A%84%E7%B9%AA%E5%9C%96%E5%B7%A5%E5%85%B7%E4%BE%86%E8%A7%A3%E6%B1%BA%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B%E6%88%96%E6%B5%81%E7%A8%8B%E5%9C%96\">#</a> <a href=\"https://blog.wu-boy.com/2022/09/three-tools-design-system-architecture-and-flow/\">三款好用的繪圖工具來解決系統架構或流程圖</a></h3>\n<p>有時在做簡報或是跟同事、主管溝通時，光用敘述的可能不容易讓人了解狀況。如果這時能夠加上一些架構圖、流程圖，就可以很快速精準的表達想法。而這篇文章作者就介紹了自己常用的三個繪圖工具，操作起來都很簡單，就算是工程師也能輕鬆上手～</p>\n<h3 id=\"how-to-be-a-10x-software-engineer\"><a class=\"direct-link\" href=\"#how-to-be-a-10x-software-engineer\">#</a> <a href=\"https://medium.com/@_michaellin/how-to-be-a-10x-engineer-fdac2a5a1bd5\">How to Be a 10x Software Engineer</a></h3>\n<p>關於 10 倍工程師，每個人都有不同想法。這篇文章的作者認為 10 倍工程師是真實存在的，而且也分享了三個他認為的重點，希望可以幫大家在成為 10 倍工程師的路上走得更順～</p>\n",
      "date_published": "2022-09-27T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/151/gqsm-151/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/151/gqsm-151/",
      "title": "第 151 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"react-i-love-you%2C-but-you're-bringing-me-down\"><a class=\"direct-link\" href=\"#react-i-love-you%2C-but-you're-bringing-me-down\">#</a> <a href=\"https://marmelab.com/blog/2022/09/20/react-i-love-you.html\">React I Love You, But You're Bringing Me Down</a></h3>\n<p>這篇文章的內容是作者給 React 的一封信，看看作者是如何從與 React 的初次見面開始，慢慢的對 React 感到失望，其中的問題包含了表單處理、性能問題還有 useEffect 產生的難懂的程式碼等等。這封信很長，可以慢慢看，如果你也和我一樣是從學 React 開始的前端工程師，看到一半真的會有想哭的感覺。 🥲</p>\n<!-- summary -->\n<h3 id=\"%E5%89%8D%E7%AB%AF%E5%BA%94%E8%AF%A5%E6%8E%8C%E6%8F%A1%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E5%BA%94%E8%AF%A5%E6%8E%8C%E6%8F%A1%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7\">#</a> <a href=\"https://juejin.cn/post/7145256569041584142\">前端应该掌握的浏览器调试技巧</a></h3>\n<p>作者曾經認為，曾經的它擁有了一個 console.log 就認為可以解決所有問題，後來當他接觸了 Vue 才發覺還有其他更多才能夠讓更不迷茫，在文章裡面介紹了幾種類型的 debug 方法，其中描述比較多的是關於 breakpoint，是一篇很好學習如何使用 breakpoint 的好文章。</p>\n<h3 id=\"an-apparent-react-bug\"><a class=\"direct-link\" href=\"#an-apparent-react-bug\">#</a> <a href=\"https://phelipetls.github.io/posts/surprising-react-bug/\">An apparent React bug</a></h3>\n<p>雖然文章標題是對 React，但其實內容描述的是從 React 裡的 <a href=\"https://github.com/facebook/react/issues/15486\">這個 issue</a> 所發現的 bug，該 bug 產生在用狀態控制 HTML 的 details 標籤是否展開。雖然它在 React 發生，但是其他框架也無一倖免，就連 VanillaJS 也會出現同樣的問題。</p>\n",
      "date_published": "2022-09-27T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/150/smalltown-150/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/150/smalltown-150/",
      "title": "第 150 期 Microservices 推薦文章",
      "content_html": "<h2 id=\"microservices\"><a class=\"direct-link\" href=\"#microservices\">#</a> Microservices</h2>\n<!-- summary -->\n<h3 id=\"multi-cloud-strategies-using-microservices-architecture\"><a class=\"direct-link\" href=\"#multi-cloud-strategies-using-microservices-architecture\">#</a> <a href=\"https://itnext.io/multi-cloud-strategies-using-microservices-architecture-8320aa708c37\">Multi-Cloud Strategies Using Microservices Architecture</a></h3>\n<p>如今在架構設計上已經沒有辦法去避免談到 MicroService，特別是如果你的設計為 Cloud 或是 Multi-Cloud Service，而且必須具有模組化與可擴展的特性；在這篇文章中作者會詳細的解釋 MicroServiec，並且進一步討論在 Multi-Cloud 的情境之下如何去設計應用服務。有興趣的人可以透過閱讀這篇文章跟著作者一起透過詳細的例子來了解 MicroService 的各種 Design Pattern</p>\n<!-- summary -->\n<h3 id=\"deployment-patterns-in-microservices-architecture\"><a class=\"direct-link\" href=\"#deployment-patterns-in-microservices-architecture\">#</a> <a href=\"https://www.developer.com/design/deployment-patterns-microservices/\">Deployment Patterns in Microservices Architecture</a></h3>\n<p>Monolithic 的應用程式通常都是以一個不可分割的單元來設計，部署與擴展，在這樣的前提條件之下要部署應用服務通常是相對輕鬆無痛的過程，不過當今天所面對的為 MicroService 架構時，你會面對許多由不同的語言與框架所建立的服務，這樣一來讓部署這件事情變得更具挑戰性，所以這篇文章想要探討在微服務的架構之下會有哪些部署模式，並且分析不同部署模式間的優缺點</p>\n<h3 id=\"coroot---a-monitoring-and-troubleshooting-tool-for-microservice-architectures\"><a class=\"direct-link\" href=\"#coroot---a-monitoring-and-troubleshooting-tool-for-microservice-architectures\">#</a> <a href=\"https://github.com/coroot/coroot\">coroot - a monitoring and troubleshooting tool for microservice architectures</a></h3>\n<p>Coroot 是一個用 Golang 寫的新工具，他主要想要協助維運 MicroService 的人去監控和除錯，看到他的功能介紹後覺得滿好用的，例如：受益於 eBPF 所以 Coroot 可以將服務之間的拓樸圖給輕易地視覺化，能夠不需要額外 Stroage 成本之下去進行 Log 分析，並且可以將服務在 Public Cloud 的網路拓樸也呈現出來，除此之外，他還可以跟既有的監控工具整合再一起，例如 Prometheus！</p>\n",
      "date_published": "2022-09-20T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/150/rico-150/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/150/rico-150/",
      "title": "第 150 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"6-best-practices-to-manage-pull-request-creation-and-feedback\"><a class=\"direct-link\" href=\"#6-best-practices-to-manage-pull-request-creation-and-feedback\">#</a> <a href=\"https://doordash.engineering/2022/08/23/6-best-practices-to-manage-pull-request-creation-and-feedback/\">6 Best Practices to Manage Pull Request Creation and Feedback</a></h3>\n<p>建立好的 PR（Pull Request，或者也可以說 Merge Request）可以減少開發時間，除了要保持簡單、結構完整且一致性以及做好測試這三大基本要素之外，還建議以下幾點：<!-- summary --></p>\n<ol>\n<li>命名時需要點敘述性和一致性</li>\n<li>PR 名稱要清楚和描述</li>\n<li>PR 的變動越小越好</li>\n<li>PR 有爭議時請直接詢問對方，減少溝通時間</li>\n<li>動手做之前先做好功課來避免整個 PR 重寫</li>\n<li>多找一些人審查 PR</li>\n</ol>\n<h3 id=\"7-cncf-projects-for-building-cloud-native-networks\"><a class=\"direct-link\" href=\"#7-cncf-projects-for-building-cloud-native-networks\">#</a> <a href=\"https://containerjournal.com/features/7-cncf-projects-for-building-cloud-native-networks/\">7 CNCF Projects For Building Cloud-Native Networks</a></h3>\n<p>本篇介紹 7 個用於建立 Cloud Native 類型網路的 CNCF 專案：</p>\n<ol>\n<li>Antrea - 建立在 Open vSwitch 上的 Kubernetes 網路</li>\n<li>Cilium - 基於 eBPF 的網路、資安和觀測的專案</li>\n<li>Container Network Interface (CNI) - 專門用於 container 的 interface</li>\n<li>CNI-Genie - 讓多個 CNI plugins 可以在運行時同時存在</li>\n<li>Kube-OVN - 適用於大型企業的 Kubernetes 網路構造</li>\n<li>Network Service Mesh - 混合多雲架構的 service mesh</li>\n<li>Submariner - 可 <code>Pod</code> 或 <code>Service</code> 直接在不同 Kubernetes cluster 或不同雲之間互連</li>\n</ol>\n<h3 id=\"how-many-nodes-for-your-kubernetes-control-plane%3F\"><a class=\"direct-link\" href=\"#how-many-nodes-for-your-kubernetes-control-plane%3F\">#</a> <a href=\"https://thenewstack.io/how-many-nodes-for-your-kubernetes-control-plane/\">How Many Nodes for Your Kubernetes Control Plane?</a></h3>\n<p>自架 Kubernetes control plane 需要幾個節點比較洽當？以 etcd 做為叢集狀態儲存工具時，2 個節點比 1 個節點還糟，因為很可能發生腦裂的情況，官方建議 3 或 5 個節點，超過 7 個可能有延遲問題。最後作者分別對 3、5、7、9 個節點做壓測證明延遲問題，以及假如有節點壞了，建議先移除之後再增加新的節點；但如果是節點沒壞，先增加新的節點之後再移除舊的。</p>\n",
      "date_published": "2022-09-20T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/150/larry-150/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/150/larry-150/",
      "title": "第 150 期 Blockchain 推薦文章",
      "content_html": "<h2 id=\"blockchain\"><a class=\"direct-link\" href=\"#blockchain\">#</a> Blockchain</h2>\n<h3 id=\"8-%E5%B9%B4-pow-%E5%AE%A3%E5%91%8A%E7%B5%82%E7%B5%90-%E3%80%8B%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%B0%A1%E5%8F%B2%EF%BC%9Av%E7%A5%9E%E3%80%81%E4%B8%AD%E5%9C%8B%E6%8C%96%E7%A4%A6%E6%A5%AD%EF%BC%8C%E8%88%87-nvidia\"><a class=\"direct-link\" href=\"#8-%E5%B9%B4-pow-%E5%AE%A3%E5%91%8A%E7%B5%82%E7%B5%90-%E3%80%8B%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%B0%A1%E5%8F%B2%EF%BC%9Av%E7%A5%9E%E3%80%81%E4%B8%AD%E5%9C%8B%E6%8C%96%E7%A4%A6%E6%A5%AD%EF%BC%8C%E8%88%87-nvidia\">#</a> <a href=\"https://www.blocktempo.com/end-of-pow-eth-era-and-history-of-mining-in-china-with-nvidia/\">8 年 PoW 宣告終結 》以太坊簡史：V神、中國挖礦業，與 NVIDIA</a></h3>\n<p>這大概是今年區塊鏈領域最大的事情了：以太坊在經過八年的時間後，總算完成了合併，正式從 Pow 轉向 PoS。這篇文章介紹了以太坊的歷史，以及這幾年來全球挖礦業的發展，可以當成故事看看很有趣～</p>\n<h3 id=\"%E4%B8%80%E6%AC%A1%E6%90%9E%E6%87%82%E5%AF%86%E7%A2%BC%E5%AD%B8%E4%B8%AD%E7%9A%84%E4%B8%89%E5%85%84%E5%BC%9F-%E2%80%94-encode%E3%80%81encrypt-%E8%B7%9F-hash\"><a class=\"direct-link\" href=\"#%E4%B8%80%E6%AC%A1%E6%90%9E%E6%87%82%E5%AF%86%E7%A2%BC%E5%AD%B8%E4%B8%AD%E7%9A%84%E4%B8%89%E5%85%84%E5%BC%9F-%E2%80%94-encode%E3%80%81encrypt-%E8%B7%9F-hash\">#</a> <a href=\"https://medium.com/starbugs/what-are-encoding-encrypt-and-hashing-4b03d40e7b0c\">一次搞懂密碼學中的三兄弟 — Encode、Encrypt 跟 Hash</a></h3>\n<p>想要搞懂區塊鏈原理，就必須先懂一些簡單的密碼學，這篇我之前寫的文章介紹了密碼學中的三個基本概念：Encode、Encrypt 跟 Hash，並且用簡單的範例來說明。</p>\n<h3 id=\"%E5%BE%9E0%E9%96%8B%E5%A7%8B%E6%9E%B6%E6%A7%8B%E5%8D%80%E5%A1%8A%E9%8F%88-%E7%B3%BB%E5%88%97\"><a class=\"direct-link\" href=\"#%E5%BE%9E0%E9%96%8B%E5%A7%8B%E6%9E%B6%E6%A7%8B%E5%8D%80%E5%A1%8A%E9%8F%88-%E7%B3%BB%E5%88%97\">#</a> <a href=\"https://ithelp.ithome.com.tw/users/20119982/ironman/2255\">從0開始架構區塊鏈 系列</a></h3>\n<p>「從 0 開始架構區塊鏈」這一系列文章總共三十篇，從區塊鏈的誕生開始說起，一路講到挖礦、共識機制、智能合約等等，這系列文章的內容非常豐富，值得一看。</p>\n",
      "date_published": "2022-09-20T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/150/gqsm-150/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/150/gqsm-150/",
      "title": "第 150 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"front-end-testing-principles\"><a class=\"direct-link\" href=\"#front-end-testing-principles\">#</a> <a href=\"https://itnext.io/front-end-testing-principles-c4a3b51aa7e5\">Front-end Testing Principles</a></h3>\n<p><a href=\"https://kentcdodds.com/\">Kent C. Dodds</a> 是 <a href=\"https://testing-library.com/docs/react-testing-library/intro/\">React Testing Library</a> 的作者，他經常會發表各種文章表達自己對測試的看法，而這篇文章整理了之前 <a href=\"https://kentcdodds.com/\">Kent C. Dodds</a> 提到的六個測試原則：</p>\n<ol>\n<li>Test your software in the same way that your users use it</li>\n<li>Avoid testing implementation details</li>\n<li>Write fewer, longer tests</li>\n<li>Write your tests with ease of understanding and maintainability in mind</li>\n<li>Write your tests in isolation</li>\n<li>Be careful with mocks</li>\n</ol>\n<p>在每個原則下也都有附上該原則的說明和文章連結，算是一個整理起來的總集篇！</p>\n<!-- summary -->\n<h3 id=\"react-18-upgrade-guide-and-new-features\"><a class=\"direct-link\" href=\"#react-18-upgrade-guide-and-new-features\">#</a> <a href=\"https://refine.hashnode.dev/react-18-upgrade-guide-and-new-features\">React 18 Upgrade Guide and New Features</a></h3>\n<p>文章中先是說明什麼是 React 18，也敘述 React 在 17 時遇到的問題，接著就開始介紹 React 18 出現的幾個新功能，而且都有配合上簡短的程式碼講解哦：</p>\n<ol>\n<li>Client Rendering</li>\n<li>Hydration</li>\n<li>Render Callback</li>\n<li>Automatic Batching</li>\n<li>Transitions</li>\n<li>Dropped support for Internet Explorer</li>\n</ol>\n<h3 id=\"javascript-api-mocking-techniques\"><a class=\"direct-link\" href=\"#javascript-api-mocking-techniques\">#</a> <a href=\"https://www.syncfusion.com/blogs/post/javascript-api-mocking-techniques.aspx\">JavaScript API Mocking Techniques</a></h3>\n<p>有時候需要模擬 API 是為了能夠在與後端討論好資料規格後，先運行一個 local server 串接 API 與 UI 的互動，也有時候模擬 API 是在單元測試時，用來隔離真實的環境。文章中介紹了幾種 JavaScript 裡面常用來模擬 API 的套件，並簡單介紹他們的差別及使用方式。</p>\n",
      "date_published": "2022-09-20T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/149/smalltown-149/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/149/smalltown-149/",
      "title": "第 149 期 Git 推薦文章",
      "content_html": "<h2 id=\"git\"><a class=\"direct-link\" href=\"#git\">#</a> Git</h2>\n<!-- summary -->\n<h3 id=\"git-branching-strategies-in-2022\"><a class=\"direct-link\" href=\"#git-branching-strategies-in-2022\">#</a> <a href=\"https://faun.pub/git-branching-strategies-in-2022-83938c5784d8\">GIT Branching Strategies in 2022</a></h3>\n<p>Git 這套版本管理系統賦予軟體開發者能力去追蹤，管理和組織他們的程式碼，但是 Git 本身並沒有提供一個明確的分支策略，這將會導致相對大型的團隊在建立分支及合併程式碼時容易搞的一團亂，因此開發者必須自己去決定如何使用 Git 分支。本文將介紹幾種不同的分支策略，並且提供一些建議，讓你可以選擇最適合你的分支策略。</p>\n<ul>\n<li>GitFlow</li>\n<li>GitHub Flow</li>\n<li>GitLab Flow</li>\n<li>Trunk-based development</li>\n<li>Scaled Trunk-Based Development</li>\n<li>Release Flow</li>\n</ul>\n<!-- summary -->\n<h3 id=\"sign-your-git-commits-with-1password\"><a class=\"direct-link\" href=\"#sign-your-git-commits-with-1password\">#</a> <a href=\"https://blog.1password.com/git-commit-signing/\">Sign your Git commits with 1Password</a></h3>\n<p>1Password 除了對一般使用者體驗來說還不錯之外，自己覺得他在近年來也一直推出對於 Developer 很友善的功能，例如之前支援了 <a href=\"https://developer.1password.com/docs/ssh/\">SSH</a> 還有 <a href=\"https://blog.1password.com/1password-visual-studio-code\">VIsual Studio Code</a>；而 <a href=\"https://github.blog/changelog/2022-08-23-ssh-commit-verification-now-supported/\">GitHub 於近期宣布支援透過 SSH Key 去對 Git Commit 做簽章驗證</a> (之前只支援 GPG Key)，1password 這篇文章便是介紹了如何將 SSH Key 儲存於其中，並對 Git Commit 做簽章驗證。</p>\n<h3 id=\"merging-two-github-repositories-without-losing-commit-history\"><a class=\"direct-link\" href=\"#merging-two-github-repositories-without-losing-commit-history\">#</a> <a href=\"https://hacks.mozilla.org/2022/08/merging-two-github-repositories-without-losing-commit-history/\">Merging two GitHub repositories without losing commit history</a></h3>\n<p>自己是有把 Git Repository 搬來搬去的經驗，但是把兩個 Repository 合併在一起的卻還沒有嘗試過，這篇文章介紹了如何將兩個 Repository 合併在一起，並且保留原本的 Commit History。先筆記下來，搞不好將來有一天自己也會使用到</p>\n",
      "date_published": "2022-09-13T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/149/rico-149/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/149/rico-149/",
      "title": "第 149 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"the-2-minute-test-for-kubernetes-pod-security\"><a class=\"direct-link\" href=\"#the-2-minute-test-for-kubernetes-pod-security\">#</a> <a href=\"https://www.cncf.io/blog/2022/09/06/the-2-minute-test-for-kubernetes-pod-security/\">The 2-minute test for Kubernetes Pod security</a></h3>\n<p>本文示範了如何 2 分鐘使用 Kubernetes Pod Security Standards 來檢查 pod 的資安，而且完全不用在 Kubernetes cluster 內安裝多餘的東西，只需要靠 kuberctl 安裝 Kyverno 後掃描 cluster 或 namespace 就可以知道結果了。<!-- summary --></p>\n<h3 id=\"avoiding-the-top-10-nginx-configuration-mistakes\"><a class=\"direct-link\" href=\"#avoiding-the-top-10-nginx-configuration-mistakes\">#</a> <a href=\"https://www.nginx.com/blog/avoiding-top-10-nginx-configuration-mistakes/\">Avoiding the Top 10 NGINX Configuration Mistakes</a></h3>\n<p>本文介紹了如何避免 Nginx 10 個常見的設定錯誤：</p>\n<ol>\n<li>每個 worker 的 file descriptors 預設值太低，可以調高，跟連線數有關</li>\n<li>預設 error_log 是不會儲存的，建議可以開啟</li>\n<li>正常設定下每個新請求都要三向交握且會佔用 ports，所以建議開啟 keepalive</li>\n<li>使用者常常忘記個別 path 下的設定會 override 全域的設定</li>\n<li>建議 proxy_buffering 使用預設的打開選項，只有很少數的情境才需要關閉</li>\n<li>避免設定 if 時使用不當</li>\n<li>避免過度地使用 health checks</li>\n<li>避免以不安全的方式存取 metrics，建議使用簡單的帳號密碼和許可或阻擋名單做一定程度的阻擋</li>\n<li>建議在同個 /24 網段下不要使用 ip_hash 演算法，因為它只看前三個八位元組，會無法分散流量，建議使用 hash 演算法。</li>\n<li>應該活用 upstream{} 的好處做全域的設定</li>\n</ol>\n<h3 id=\"how-a-cloud-skills-shortage-is-affecting-multi-cloud-adoption\"><a class=\"direct-link\" href=\"#how-a-cloud-skills-shortage-is-affecting-multi-cloud-adoption\">#</a> <a href=\"https://www.hashicorp.com/blog/how-a-cloud-skills-shortage-is-affecting-multi-cloud-adoption\">How a Cloud Skills Shortage Is Affecting Multi-Cloud Adoption</a></h3>\n<p>Hachicorp 統計了組織在採用多雲策略時會遇到的阻礙，而平台團隊（platform team）負責什麼任務，同不同意多雲環境自動化的重要性，哪些自動化功能可以幫助多雲策略。</p>\n",
      "date_published": "2022-09-13T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/149/larry-149/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/149/larry-149/",
      "title": "第 149 期 React.js 推薦文章",
      "content_html": "<h2 id=\"react.js\"><a class=\"direct-link\" href=\"#react.js\">#</a> React.js</h2>\n<h3 id=\"why-react-re-renders\"><a class=\"direct-link\" href=\"#why-react-re-renders\">#</a> <a href=\"https://www.joshwcomeau.com/react/why-react-re-renders/\">Why React Re-Renders</a></h3>\n<p>如何防止意外觸發 rerender 一直是用 React.js 開發時很重要的議題， 這篇文章會帶大家了解 React 是怎麼決定要不要 rerender，以及在開發時應該要如何避免不必要的 rerender。</p>\n<h3 id=\"understanding-usememo-and-usecallback\"><a class=\"direct-link\" href=\"#understanding-usememo-and-usecallback\">#</a> <a href=\"https://www.joshwcomeau.com/react/usememo-and-usecallback/\">Understanding useMemo and useCallback</a></h3>\n<p>比起最常見的 useState，useMemo 跟 useCallback 這兩個 hook 算是比較少用也比較複雜一點，但如果用得好的話，他們可以讓程式碼寫起來很漂亮，同時又可以提高效能，推薦給已經寫過 React 想要學習進階技巧的 React 開發者來讀讀～</p>\n<h3 id=\"notes-on-maintaining-an-internal-react-component-library\"><a class=\"direct-link\" href=\"#notes-on-maintaining-an-internal-react-component-library\">#</a> <a href=\"https://www.gabe.pizza/notes-on-component-libraries/\">Notes on maintaining an internal React component library</a></h3>\n<p>許多用 React 開發前端的公司內部都會有自己的一套 component library，這篇文章會介紹一些維護 component library 的心法以及注意事項，包含 props 應該如何設計、怎麼減輕開發的心智負擔等等。雖然文章真的很長（我每天一個段落總共讀了兩個多禮拜），但真的寫得很不錯</p>\n",
      "date_published": "2022-09-13T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/149/gqsm-149/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/149/gqsm-149/",
      "title": "第 149 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"mobile-first-css%3A-is-it-time-for-a-rethink%3F\"><a class=\"direct-link\" href=\"#mobile-first-css%3A-is-it-time-for-a-rethink%3F\">#</a> <a href=\"https://alistapart.com/article/mobile-first-css-is-it-time-for-a-rethink/\">Mobile-First CSS: Is It Time for a Rethink?</a></h3>\n<p>優先考慮移動設備的 CSS 是很棒的設計方法，因為只要你的頁面有辦法在手機之類的小螢幕上正常顯示資訊，那在更大的螢幕尺寸上就也絕對沒問題！這篇文章會帶大家思考，優先考慮移動設備的設計會有哪些優點和缺點，以及像是在瀏覽器讀取上，或打包和分割 CSS 後可能會有的影響。</p>\n<!-- summary -->\n<h3 id=\"til%3A-you-can-access-a-user%E2%80%99s-camera-with-just-html\"><a class=\"direct-link\" href=\"#til%3A-you-can-access-a-user%E2%80%99s-camera-with-just-html\">#</a> <a href=\"https://austingil.com/html-capture-attribute/\">TIL: You Can Access A User’s Camera with Just HTML</a></h3>\n<p>在 HTML 裡，如果你將 input 標籤內的 capture 設定成 user 或 environment 就能夠開啟使用者的前置或後置鏡頭，雖然它的支援度目前還低到爆，但如果瀏覽器還不支援的話，也會自動退回到顯示選擇文件的 UI。</p>\n<h3 id=\"javascript-patterns-workshop\"><a class=\"direct-link\" href=\"#javascript-patterns-workshop\">#</a> <a href=\"https://javascriptpatterns.vercel.app/patterns\">JavaScript Patterns Workshop</a></h3>\n<p>喜歡研究各種設計模式的前端工程師絕對不能錯過這個網站！這個網站與 <a href=\"https://frontendmasters.com/courses/tour-js-patterns/\">FrontendMasters workshop on JavaScript Patterns</a> 相關，內容也是基於另一個很棒的免費資源 <a href=\"https://www.patterns.dev/\">patterns.dev</a> 內的模式介紹，不過介紹內容會多一些精緻的圖片，讓讀者更能理解設計模式內的程式碼關聯哦！</p>\n",
      "date_published": "2022-09-13T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/148/smalltown-148/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/148/smalltown-148/",
      "title": "第 148 期 Coding 推薦文章",
      "content_html": "<h2 id=\"coding\"><a class=\"direct-link\" href=\"#coding\">#</a> Coding</h2>\n<!-- summary -->\n<h3 id=\"top-10-celebrities-who-code\"><a class=\"direct-link\" href=\"#top-10-celebrities-who-code\">#</a> <a href=\"https://dev.to/perssondennis/top-10-celebrities-who-code-7g7\">Top 10 Celebrities Who Code</a></h3>\n<p>一開始看到標題覺得好新鮮，仔細看內文才知道原來是個英文諧音笑話梗XD 這篇文章介紹了美國十個最有名而且他們的職涯當中也曾經擔任過開發工程師的名人 (惡搞)</p>\n<!-- summary -->\n<ol>\n<li>Mr. JavaBean (Java developer)</li>\n<li>Brad Git (GitOps expert)</li>\n<li>Nathalie Postman (Backend developer)</li>\n<li>Matt Daemon (OS programmer)</li>\n<li>Kanye Jest (Unit tester)</li>\n<li>Taylor Swift (iOS developer)</li>\n<li>Json Mraz (Fullstack developer)</li>\n<li>Vim Diesel (Unix developer)</li>\n<li>Jay-C (C developer)</li>\n<li>Miley Cypress (E2E tester)</li>\n</ol>\n<h3 id=\"9-no-code-tools-you-should-definitely-try-in-2022-%F0%9F%94%A5%F0%9F%92%AF\"><a class=\"direct-link\" href=\"#9-no-code-tools-you-should-definitely-try-in-2022-%F0%9F%94%A5%F0%9F%92%AF\">#</a> <a href=\"https://dev.to/aviyel/9-no-code-tools-you-should-definitely-try-in-2022-33ol\">9 No-Code Tools You should definitely try in 2022 🔥💯</a></h3>\n<p>No-Code 這一兩年來很常被提起，通常被提到的還有 Low-Code，他們兩者分別指 「不需寫任何程式碼」情況下就可以開發應用程式，以及「少量的程式碼」就可以做到程式開發，讓不是專業的軟體工程師也可以開發出應用程式。這篇文章介紹了 9 個 No-Code 工具，讓你可以在不寫程式碼的情況下開發出應用程式。</p>\n<ol>\n<li>Google AppSheet</li>\n<li>Zapier</li>\n<li>Webflow</li>\n<li>Thunkable</li>\n<li>Bravo Studio</li>\n<li>ToolJet</li>\n<li>Knack</li>\n<li>Bubble</li>\n<li>Miro</li>\n</ol>\n<h3 id=\"15-best-data-structure%2C-algorithms%2C-and-programming-courses-to-crack-coding-interviews-in-2022\"><a class=\"direct-link\" href=\"#15-best-data-structure%2C-algorithms%2C-and-programming-courses-to-crack-coding-interviews-in-2022\">#</a> <a href=\"https://medium.com/javarevisited/10-data-structure-algorithms-and-programming-courses-to-crack-any-coding-interview-e1c50b30b927\">15 Best Data Structure, Algorithms, and Programming Courses to Crack Coding Interviews in 2022</a></h3>\n<p>即將進入年底的換職潮啦！這篇文章條列了 15 個資料結構、演算法和程式設計課程，讓你可以在 2022 年年底前準備好面試～</p>\n<ol>\n<li>Data Structure and Algorithms Analysis — Job Interview</li>\n<li>Grokking the System Design Interview</li>\n<li>Software Engineer Interview Unleashed</li>\n<li>Grokking the Coding Interview: Patterns for Coding Questions</li>\n<li>Master the Coding Interview: Data Structures + Algorithms</li>\n<li>The Coding Interview Bootcamp: Algorithms + Data Structures</li>\n<li>Break Away: Programming And Coding Interviews</li>\n<li>Intro To Dynamic Programming — Coding Interview Preparation</li>\n<li>Python for Data Structures, Algorithms, and Interviews!</li>\n<li>11 Essential Coding Interview Questions + Coding Exercises!</li>\n<li>200+ SQL Interview Questions</li>\n<li>Algorithms and Data Structures — Part 1</li>\n<li>200+ Java Interview Questions for Beginners</li>\n<li>Grokking Dynamic Programming Patterns for Coding Interviews</li>\n<li>50 coding problems</li>\n</ol>\n",
      "date_published": "2022-09-06T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/148/rico-148/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/148/rico-148/",
      "title": "第 148 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"how-to-handle-kubernetes-health-checks\"><a class=\"direct-link\" href=\"#how-to-handle-kubernetes-health-checks\">#</a> <a href=\"https://doordash.engineering/2022/08/09/how-to-handle-kubernetes-health-checks/\">How to Handle Kubernetes Health Checks</a></h3>\n<p>DoorDash 在黑色星期五因為 readiness health check 而導致服務不正常，他們一開始從 metrics 和 tracing 做調查但因 health check request 導致呈現的資訊很雜，最後不得已才去 log 抓出問題。因用 Spring Boot Framework 預設的 health check，而預設它會一次檢查很多地方，其中一個就是 Redis 且剛好檢查的 path 已經是 legacy 的狀態了，所以服務延遲增加導致危機。最後他們有探討應該深度了解 health check 的行為，以及觀測服務應該要消除 health check 雜訊。<!-- summary --></p>\n<h3 id=\"kubernetes-removals-and-major-changes-in-1.25\"><a class=\"direct-link\" href=\"#kubernetes-removals-and-major-changes-in-1.25\">#</a> <a href=\"https://kubernetes.io/blog/2022/08/04/upcoming-changes-in-kubernetes-1-25/\">Kubernetes Removals and Major Changes In 1.25</a></h3>\n<p>Kubernetes 1.25 重要的變動有 PodSecurityPolicy 正式被移除因為使用體驗容易讓人困惑，其功能將被 Pod Security Asmission 取代；In-tree CSI （意思是指和 Kuberentes 專案寫在一起的 CSI 功能）將拆出來交給其他專門做儲存廠商的專案；IPTables 裡這些 <code>KUBE-MARK-DROP</code>、<code>KUBE-MARK-MASQ</code> 和 <code>KUBE-POSTROUTING</code>  chains 照理上來說只限於給 Kubernetes 使用才對，但是卻有些工具卻會依賴這些 chains 的行為，所以現在要漸漸改成這些 chains 只給 Kubernetes 內部情境使用。</p>\n<h3 id=\"kubernetes-1.25%3A-cgroup-v2-graduates-to-ga\"><a class=\"direct-link\" href=\"#kubernetes-1.25%3A-cgroup-v2-graduates-to-ga\">#</a> <a href=\"https://kubernetes.io/blog/2022/08/31/cgroupv2-ga-1-25/\">Kubernetes 1.25: cgroup v2 graduates to GA</a></h3>\n<p>Kubernetes 1.25 版本的 cgroup v2 邁向 GA（general availability），新版本有更好的資源配置外，升級也十分輕鬆，只要 worker node 的作業系統 cgroup v2 是預設的、以及 container runtime 也有支援以及 kubelet 和 container runtime 設定使用 cgroup driver 就可以無痛升級了（強烈建議 cgroup driver 使用 systemd 來運行）。另外升級完畢後也務必更新監控或開發語言的版本以便支援 cgroup v2。</p>\n",
      "date_published": "2022-09-06T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/148/larry-148/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/148/larry-148/",
      "title": "第 148 期 軟體工程 推薦文章",
      "content_html": "<h2 id=\"software-engineering\"><a class=\"direct-link\" href=\"#software-engineering\">#</a> Software Engineering</h2>\n<h3 id=\"%E7%82%BA%E4%BA%86%E8%AE%93%E4%B8%96%E7%95%8C%E6%9B%B4%E5%A5%BD%EF%BC%8C%E4%BD%A0%E6%87%89%E8%A9%B2%E5%84%AA%E5%85%88%E9%81%B8%E6%93%87-tab-%E8%80%8C%E4%B8%8D%E6%98%AF-space-%E5%81%9A%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%B8%AE%E6%8E%92\"><a class=\"direct-link\" href=\"#%E7%82%BA%E4%BA%86%E8%AE%93%E4%B8%96%E7%95%8C%E6%9B%B4%E5%A5%BD%EF%BC%8C%E4%BD%A0%E6%87%89%E8%A9%B2%E5%84%AA%E5%85%88%E9%81%B8%E6%93%87-tab-%E8%80%8C%E4%B8%8D%E6%98%AF-space-%E5%81%9A%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%B8%AE%E6%8E%92\">#</a> <a href=\"https://jason-memo.dev/posts/prefer-tab-over-space-for-a11y/\">為了讓世界更好，你應該優先選擇 tab 而不是 space 做程式碼縮排</a></h3>\n<p>好久沒有看到這麼有趣又精闢的文章了！雖然現在大部分的程式碼都是用 space 進行縮排，但其實這樣對於有視覺障礙的工程師是非常不友善的，如果我們可以透過像 prettier 的自動排版工具以及稍微改變自己的習慣，就能讓世界變得更好，那何樂而不為呢？</p>\n<h3 id=\"%E3%80%8Aa-philosophy-of-software-design%E3%80%8B%E5%BF%83%E5%BE%97-i-%E2%80%94-%E5%AF%AB%E5%87%BA%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%BD%8E%E7%9A%84%E8%BB%9F%E9%AB%94\"><a class=\"direct-link\" href=\"#%E3%80%8Aa-philosophy-of-software-design%E3%80%8B%E5%BF%83%E5%BE%97-i-%E2%80%94-%E5%AF%AB%E5%87%BA%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%BD%8E%E7%9A%84%E8%BB%9F%E9%AB%94\">#</a> <a href=\"https://www.explainthis.io/zh-hant/blog/a-philosophy-of-software-design/part1\">《A Philosophy of Software Design》心得 I — 寫出複雜度低的軟體</a></h3>\n<p>當一個專案隨著開發時間越久，程式碼變得越來越多、當中的業務邏輯也會逐漸變得複雜，而且技術債累積久了之後甚至會到難以修改的程度。既然如此，那要怎麼在一開始設計時就避免這種情況呢？這篇讀書心得簡單介紹了 《A Philosophy of Software Design》一書中的一些觀念，也提供了一些實際的範例～</p>\n<h3 id=\"dependency-inversion-vs.-dependency-injection\"><a class=\"direct-link\" href=\"#dependency-inversion-vs.-dependency-injection\">#</a> <a href=\"https://betterprogramming.pub/straightforward-simple-dependency-inversion-vs-dependency-injection-7d8c0d0ed28e\">Dependency Inversion vs. Dependency Injection</a></h3>\n<p>在軟體工程裡面很常聽到 Dependency Inversion 跟 Dependency Injection，雖然他們的縮寫都是 DI，但其實有一點不一樣，這篇短短的文章就簡單介紹了這兩個概念，並且提供了一些範例～</p>\n",
      "date_published": "2022-09-06T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/148/gqsm-148/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/148/gqsm-148/",
      "title": "第 148 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"how-to-lazy-load-images-in-react\"><a class=\"direct-link\" href=\"#how-to-lazy-load-images-in-react\">#</a> <a href=\"https://www.freecodecamp.org/news/how-to-lazy-load-images-in-react/\">How to Lazy Load Images in React</a></h3>\n<p>優化靜態資源的載入是提高網站效能最好的方式之一，只要處理好這部分的優化，能夠在第一時間快速載入頁面、增強使用者體驗、對 SEO 也有幫助！在文章裡會以 <a href=\"https://unsplash.com/\">unsplash</a> 網站的圖片 lazy load 為例子，實現與它類似的效果。</p>\n<!-- summary -->\n<h3 id=\"micro-frontends\"><a class=\"direct-link\" href=\"#micro-frontends\">#</a> <a href=\"https://scanskill.com/frontend/micro-frontends/\">Micro Frontends</a></h3>\n<p>最近 Micro Frontends 出現的頻率越來越高了，如果你只是想要先大略知道 Micro Frontends 能夠帶給團隊開發上什麼幫助，或是架構會對專案的影響等等，可以先看這篇文章了解，如果要實作的話可以再參考 Andy 寫的 <a href=\"https://medium.com/starbugs/%E5%BE%8C%E7%AB%AF%E6%9C%89-microservices-%E9%82%A3%E5%89%8D%E7%AB%AF%E5%91%A2-%E5%88%9D%E6%8E%A2-micro-frontends-%E7%9A%84%E4%B8%96%E7%95%8C-e3c5a4f21798\">後端有 Microservices，那前端呢？初探 Micro Frontends 的世界</a>！</p>\n<h3 id=\"16%2B-javascript-snippets-to-save-your-time\"><a class=\"direct-link\" href=\"#16%2B-javascript-snippets-to-save-your-time\">#</a> <a href=\"https://devdojo.com/posandu/16-javascript-snippets-to-save-your-time\">16+ JavaScript snippets to save your time</a></h3>\n<p>作者整理了 16 種以上的程式碼片段，用來處理一些實務上常見的非常小的需求，好奇的話也可以看看作者如何用簡單的寫法來實現需求，也有些寫法也可以再透過修改，變成新的功能喲！畢竟每則程式碼片段都是最簡短的實現。</p>\n",
      "date_published": "2022-09-06T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/147/smalltown-147/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/147/smalltown-147/",
      "title": "第 147 期 ArgoCD 推薦文章",
      "content_html": "<h2 id=\"argocd\"><a class=\"direct-link\" href=\"#argocd\">#</a> ArgoCD</h2>\n<!-- summary -->\n<h3 id=\"argocd-applicationset-generators\"><a class=\"direct-link\" href=\"#argocd-applicationset-generators\">#</a> <a href=\"https://argocd-applicationset.readthedocs.io/en/stable/Generators/\">ArgoCD ApplicationSet Generators</a></h3>\n<p>在 ArgoCD ApplicationSet 推出不久後就開始使用了，那個時候只有三個 Generator，分別是 Cluster Generator, Git Directory Generator 和 Git File Generator (<a href=\"https://medium.com/starbugs/argo-cd-applicationset-controller-%E4%B8%96%E7%95%8C%E7%82%BA%E6%88%91%E8%80%8C%E8%BD%89%E5%8B%95-a837f9392298\">當時寫的 ArgoCD ApplicationSet 詳細介紹文</a>)，在經過一年多後，現在 Generator 多了不少類型，讓 ApplicationSet 變得更加完整且實用，底下稍微提一下這些新增的 Generator 分別可以達成什麼目的：<!-- summary --></p>\n<p>👉 Matrix Generator: 可以把兩種基礎 Generator 混合使用<br>\n👉 Merge Generator: 讓使用者先採用的基本 Generator，然後再透過其他 Generator 獲得的參數來做覆寫 (感覺使用時要小心)<br>\n👉 SCM Provider Generator: 用來產生 ArgoCD 所定義的 Repository 資源 (可以把同一個 Git Organization 底下的所有 Repository 都撈出來)<br>\n👉 Pull Request Generator: 當 Git Pull Request 開啟時，根據 PR 的內容產生測試環境出來<br>\n👉 Cluster Decision Resource Generator: 用來產生 ArgoCD 所定義的 Cluster 資源</p>\n<p>其中 Pull Request Generator 是我最喜歡的一個，因為如此一來就可以讓 ArgoCD 輕易地達成 Git Pull Request 的開發流程，而 SCM Provider Generator 和 Cluster Decision Resource Generator 自己覺得雖然放在 ArgoCD ApplicationSet 裡面有點突兀，，因為他並不是用來產生 ArgoCD Application，但確實是很實用的功能；除此之外 Git Generator 現在可以對 Path 做 Exclude，自己目前已經使用它來解決 Prometheus CRD 遇到的問題 (<a href=\"https://github.com/prometheus-operator/prometheus-operator/issues/4439\">GitHub Issue</a>)</p>\n<h3 id=\"2022-argo-external-security-audit%3A-lessons-learned\"><a class=\"direct-link\" href=\"#2022-argo-external-security-audit%3A-lessons-learned\">#</a> <a href=\"https://blog.argoproj.io/2022-argo-external-security-audit-lessons-learned-951f80e0450d\">2022 Argo external security audit: Lessons learned</a></h3>\n<p>Argo 團隊和 CNCF 在 2022 年初開始和 Ada Logics 對 Argo 的四個 Project 進行安全稽核，結果確認了 26 個問題，其中 7 個在 Argo CD， 6 個在 Argo Workflow，13 個在 Argo Events</p>\n<p>這些問題當中存在著 9 個 CVE，有 7 個 在 Argo CD 以及 2 個在 Argo Events，至於其他的則被當成 non-CVE，詳細的稽核報告與 CVE 細解可以參閱內文，其中不乏有風險等級來到 Critical 和 High 的 CVE，所以大家一定要記得將使用到的 Argo 相關 Project 進行升級</p>\n<h3 id=\"solving-argocd-secret-management-with-the-argocd-vault-plugin\"><a class=\"direct-link\" href=\"#solving-argocd-secret-management-with-the-argocd-vault-plugin\">#</a> <a href=\"https://itnext.io/argocd-secret-management-with-argocd-vault-plugin-539f104aff05\">Solving ArgoCD Secret Management with the argocd-vault-plugin</a></h3>\n<p>GitOps 在 2017 由 Weaveworks 提出後，目前已經毫無疑問成為管理 Kubernetes 的主流方式，而每次在 GitOps 相關主題的討論，分享，演講...等，其中一定會被人提出來的問題就是在 GitOps 的架構下要如何去做 Secret Management，而作者的團隊當初選擇使用的 GitOps 工具為 ArgoCD，Secret Management 則為 HashiCorp Vault，在遍尋了既有的工具之後，發現採用的障礙都很高，甚至需要手動加密或是安裝其他的 Operator 來達成，並沒有找到符合自己團隊需求的解決方式</p>\n<p>所以他們就決定自己建立自己的工具，也就是 argocd-vault-plugin，他們透過 ArgoCD 的 Custom Plugin Patten 來開發這個工具，透過他就可以從 HashiCorp Vault 取得 Secret，並將其注入到 Kubernetes 的 YAML 檔案內，實際安裝與使用方式可以參閱內文，這個工具在去年二月誕生，去年五月發布 V1.0 時也一併支援了 AWS Secret Manager(<a href=\"https://itnext.io/introducing-argocd-vault-plugin-v1-0-708433294b2d\">Reference</a>)，專案也持續活躍的更新當中 (<a href=\"https://github.com/argoproj-labs/argocd-vault-plugin\">GitHub Repository</a>)，最近也有看到<a href=\"https://piotrminkowski.com/2022/08/08/manage-secrets-on-kubernetes-with-argocd-and-vault/\">其他人的文章</a>在分享這個工具，分享給有需要將 ArgoCD 與 HashiCorp Vault 整合在一起的人</p>\n",
      "date_published": "2022-08-30T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/147/rico-147/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/147/rico-147/",
      "title": "第 147 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"why-is-kafka-fast%3F\"><a class=\"direct-link\" href=\"#why-is-kafka-fast%3F\">#</a> <a href=\"https://blog.bytebytego.com/p/why-is-kafka-fast\">Why is Kafka fast?</a></h3>\n<p>為什麼 Kafka 這麼快？在進入正文前務必<a href=\"https://youtu.be/UNUz1-msbOM\">搭配影片</a>一起看可以幫助理解。Kafka 之所以快主要有兩個原因，Kafka 在讀寫硬碟資料時 I/O 的操作是連續性的，可以在使用 HDD 硬碟減少成本的情況下依然有不錯的速度，以及在從硬碟讀取資料要給 consumer 時靠 zero-copy 也就是靠直接記憶體存取 （Direct Memory Access，DMA）減少 system calls。文章只有說減少 system calls 而已，歡迎觀看影片。<!-- summary --></p>\n<h3 id=\"orchestration-and-choreography\"><a class=\"direct-link\" href=\"#orchestration-and-choreography\">#</a> <a href=\"https://blog.bytebytego.com/p/orchestration-and-choreography\">Orchestration and choreography</a></h3>\n<p>微服務之間合作時可以分為 Orchestration 和 Choreography 兩種方式。Orchestration 如常見的交響樂一般，不同樂器的音樂家都看指揮的指示；Choreography 如舞蹈表演，各個舞者跳舞的時候是沒有專門的指揮，要看整體成員的狀況而怎麼跳舞。兩種服務的合作模式各有優缺點，在規劃架構時可以考慮考慮。</p>\n<h3 id=\"black-friday-flash-sale\"><a class=\"direct-link\" href=\"#black-friday-flash-sale\">#</a> <a href=\"https://blog.bytebytego.com/p/black-friday-flash-sale\">Black Friday flash sale</a></h3>\n<p>當黑色星期五時系統應該要做什麼準備？從前端一路到後端我們都要設法加裝各種關卡來處理真正的交易，畢竟網路上機器人太多，像是 reCaptcha、CDN、rate limit 和 lock 機制。另外也得注意處理各個交易時不要因為系統設計造成超賣，甚至可以把服務和快取做獨立，專為黑色星期五的流量做準備。</p>\n",
      "date_published": "2022-08-30T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/147/larry-147/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/147/larry-147/",
      "title": "第 147 期 Golang 推薦文章",
      "content_html": "<h2 id=\"golang\"><a class=\"direct-link\" href=\"#golang\">#</a> Golang</h2>\n<h3 id=\"prevent-logging-secrets-in-go-by-using-custom-types\"><a class=\"direct-link\" href=\"#prevent-logging-secrets-in-go-by-using-custom-types\">#</a> <a href=\"https://www.commonfate.io/blog/prevent-logging-secrets-in-go-by-using-custom-types\">Prevent Logging Secrets in Go by Using Custom Types</a></h3>\n<p>在 Go 裡面進行 logging 時，如果一個不注意，可能會不小心把重要的 secret 輸出到 log。為了避免這種情況，這篇文章教你怎麼使用 custom types 來自動幫 secret 打碼，即便不小心輸出了，看起來也會是 ***** 的樣子。</p>\n<h3 id=\"trying-clean-architecture-on-golang\"><a class=\"direct-link\" href=\"#trying-clean-architecture-on-golang\">#</a> <a href=\"https://medium.com/easyread/golang-clean-archithecture-efd6d7c43047\">Trying Clean Architecture on Golang</a></h3>\n<p>有點經驗的工程師應該都聽過所謂 Clean Architecture，因為 Clean Architecture 主要是一種概念而不是告訴你細節該如何實作，所以這篇文章嘗試用自己的方式去實現 Clean Architecture 的精神，而且也把程式碼公開出來給大家參考。</p>\n<h3 id=\"5-concurrency-patterns-in-golang\"><a class=\"direct-link\" href=\"#5-concurrency-patterns-in-golang\">#</a> <a href=\"https://vietmle.com/posts/5_con_patterns_go/\">5 concurrency patterns in Golang</a></h3>\n<p>Go 身為一個很擅長做 concurrency 的語言，為了方便對開出來的 goroutine 進行管理，逐漸發展出一些很常見的 pattern，如果你正在煩惱要怎麼有效管理、整合各個 goroutine 的話，也許這篇文章能給你一些靈感。</p>\n",
      "date_published": "2022-08-30T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/147/gqsm-147/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/147/gqsm-147/",
      "title": "第 147 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"hsemantic-elements-in-html%3A-why-use-them\"><a class=\"direct-link\" href=\"#hsemantic-elements-in-html%3A-why-use-them\">#</a> <a href=\"https://blog.openreplay.com/semantic-elements-in-html-why-use-them\">HSemantic elements in HTML: why use them</a></h3>\n<p>語義化在軟體開發上非常重要，因為它能夠使我們的程式碼更容易閱讀。本篇文章列出幾個在 HTML 中的語義元素，並介紹語義元素的優點及它們各自的使用範例。雖然要把所有的 HTML 元素背起來幾乎不可能，但是看過有個印象後，下次就能大概知道這邊好像有個元素可用。 😂</p>\n<!-- summary -->\n<h3 id=\"algorithms-in-javascript-with-visual-examples.\"><a class=\"direct-link\" href=\"#algorithms-in-javascript-with-visual-examples.\">#</a> <a href=\"https://dev.to/swastikyadav/algorithms-in-javascript-with-visual-examples-gh3\">Algorithms in JavaScript with visual examples.</a></h3>\n<p>想要學演算法的前端工程師絕對不能錯過這篇，作者從時間複雜度開始解釋一些日常生活中常見的搜尋或排序演算法，在文章裡面除了程式碼之外，還搭配了圖片、動畫等等，幫助理解各個算法在執行時發生了什麼事情。</p>\n<h3 id=\"you're-not-using-http-status-codes-right\"><a class=\"direct-link\" href=\"#you're-not-using-http-status-codes-right\">#</a> <a href=\"https://dev.to/pragativerma18/youre-not-using-http-status-codes-right-pc6\">You're Not Using HTTP Status Codes Right</a></h3>\n<p>在開發網頁的時候，前端常會和後端討論 API 如果發生什麼事情，應該要回傳什麼 HTTP status codes，比較常見的是 200、400、401、404 等等，但有些 HTTP status codes 提供的意思實在是讓人搞不太清楚，常常誤用了也不曉得，而本篇的作者就會來解釋關於 Empty resource 應該要用什麼 HTTP status codes 表示。另外文章下方留言提到 graphql 的實踐也滿有趣的，看完文章可以順便看看。</p>\n",
      "date_published": "2022-08-30T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/146/smalltown-146/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/146/smalltown-146/",
      "title": "第 146 期 Terraform 推薦文章",
      "content_html": "<h2 id=\"terraform\"><a class=\"direct-link\" href=\"#terraform\">#</a> Terraform</h2>\n<!-- summary -->\n<h3 id=\"how-to-manage-multiple-environments-with-terraform\"><a class=\"direct-link\" href=\"#how-to-manage-multiple-environments-with-terraform\">#</a> <a href=\"https://blog.gruntwork.io/how-to-manage-multiple-environments-with-terraform-32c7bc5d692\">How to manage multiple environments with Terraform</a></h3>\n<p>一開始使用 Terraform 來部署開發環境時可能沒有多想，東西也都可以正常運行，但當環境開始變多時，問題開始接踵而來，例如一堆重複的程式碼，環境之間的隔離性不足，很難去做 Debug 的工作...等，所以 Gruntwork 的 Co-founder 準備了三篇文章，分別解釋如何使用 <a href=\"https://blog.gruntwork.io/how-to-manage-multiple-environments-with-terraform-using-workspaces-98680d89a03e\">Terraform Workspace</a>, <a href=\"https://blog.gruntwork.io/how-to-manage-multiple-environments-with-terraform-using-branches-875d1a2ee647\">Git Branches</a> 和 <a href=\"https://blog.gruntwork.io/how-to-manage-multiple-environments-with-terraform-using-terragrunt-2c3e32fc60a8\">Terragrunt</a> 來達成分離環境的做法，讓大家可以對這個主題有個全面的了解</p>\n<!-- summary -->\n<h3 id=\"manage-your-terraform-like-a-container\"><a class=\"direct-link\" href=\"#manage-your-terraform-like-a-container\">#</a> <a href=\"https://medium.com/@dugouchet.a/manage-your-terraform-like-a-container-d2acbc46d7d4\">Manage your terraform like a container</a></h3>\n<p>這篇文章繼續聊 Terraform 環境切分的問題，他覺得部署 Terraform 就像是使用 Container 一樣，大家應該已經習慣同樣一個 Container Image 建置出來之後供所有不同的環境一起使用，然後透過環境變數讓 Container 可以在不同的環境裡面運行成功；其實 Terraform 應該也要是一樣的做法，Terraform Module 要可以讓不同的環境一起使用，只透過不同環境的組態檔案就可以讓他去建置與管理不同環境與帳號的雲端資源</p>\n<h3 id=\"design-by-contract-in-terraform\"><a class=\"direct-link\" href=\"#design-by-contract-in-terraform\">#</a> <a href=\"https://betterprogramming.pub/design-by-contracts-in-terraform-63467a749c1a\">Design by Contract in Terraform</a></h3>\n<p>在軟體開發中有一種設計方式稱為 Design by Contract (DbC)，這種方法要求軟體設計者為軟體組件定義正式的，精確的並且可驗證的介面，這樣，為傳統的抽象資料類型又增加了先驗條件、後驗條件和不變式。這種方法的名字裡用到的「契約」或者說「契約」是一種比喻，因為它和商業契約的情況有點類似 (<a href=\"https://zh.wikipedia.org/zh-tw/%E5%A5%91%E7%BA%A6%E5%BC%8F%E8%AE%BE%E8%AE%A1\">Wiki</a>)；而 Terraform 在 v0.13 加入加了輸入參數的驗證功能，在最新 v1.2 也將 precondition 和 postcondition 這兩個功能給加了進來，如此一下在撰寫 Terraform Module 就可以使用 Design by Contract 的設計方式，詳細做法與範例可以參閱此文章</p>\n",
      "date_published": "2022-08-23T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/146/rico-146/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/146/rico-146/",
      "title": "第 146 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"how-blockchain-tech-can-improve-devops-practices-in-web3\"><a class=\"direct-link\" href=\"#how-blockchain-tech-can-improve-devops-practices-in-web3\">#</a> <a href=\"https://dzone.com/articles/how-blockchain-tech-can-improve-devops-practices-i\">How Blockchain Tech Can Improve DevOps Practices in Web3</a></h3>\n<p>這篇介紹了 DevOps 精神可以幫到 Web3 哪些層面，以 Ethereum 為例，把 DevOps 八字環的回饋、開發、測試、整合、CICD、監控以及維運對應的工具都寫出來，以及區塊鏈特性的關係我們要注意的地方，可以一次窺探 Web3 技術生態系的文章。<!-- summary --></p>\n<h3 id=\"when-docker-images-stop-being-portable\"><a class=\"direct-link\" href=\"#when-docker-images-stop-being-portable\">#</a> <a href=\"https://mental-reverb.com/blog.php?id=37\">When docker images stop being portable</a></h3>\n<p>作者把 CI 伺服器從 Ubuntu 16.04 升級到 20.04 發現 gnulib 有 path 太長的 bug 導致 container image 無法下載。後來發現這個 bug 一直都有，唯一的變動是 docker 的儲存驅動（Storage Driver）從 aufs 變成 overlay2，就因為 overlay2 比 aufs 多四個字導致 path 超過 4096 bytes 的限制。本文可以看到作者重現 bug 詳細的心路歷程。</p>\n<h3 id=\"is-it-time-to-migrate-from-lens-to-openlens-to-manage-your-kubernetes-clusters%3F\"><a class=\"direct-link\" href=\"#is-it-time-to-migrate-from-lens-to-openlens-to-manage-your-kubernetes-clusters%3F\">#</a> <a href=\"https://medium.com/dev-genius/is-it-time-to-migrate-from-lens-to-openlens-75496e5758d8\">Is it time to migrate from Lens to OpenLens to manage your Kubernetes clusters?</a></h3>\n<p>Lens IDE 是 Kubernetes 生態好用的工具之一，不過最近越來越商業化了，所以作者就介紹 OpenLens 這個工具，以及 Lens 與 OpenLens 的關係。使用 OpenLens 有兩個方法，使用社群提供的檔案或者自己安裝，但是不論哪一種都會遇到 Windows 或 macOS 程式碼簽章（Code Signing）的問題，自己個人下載基本上都可以用，但是有些組織的電腦會有資安的要求，運行的軟體必須要有程式碼簽章才可以，所以可以自己跟 Windows 或 Apple 買開發方案，或者捐款給社群讓他們可以付開發方案的費用。</p>\n",
      "date_published": "2022-08-23T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/146/larry-146/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/146/larry-146/",
      "title": "第 146 期 Golang 推薦文章",
      "content_html": "<h2 id=\"golang\"><a class=\"direct-link\" href=\"#golang\">#</a> Golang</h2>\n<h3 id=\"easy-memory-saving-tricks-in-go\"><a class=\"direct-link\" href=\"#easy-memory-saving-tricks-in-go\">#</a> <a href=\"https://www.ribice.ba/golang-memory-savings/\">Easy memory-saving tricks in Go</a></h3>\n<p>如果你想把程式跑在比較低階的機器上，譬如說樹莓派或是嵌入式的裝置，那你可能就會需要注意程式的記憶體使用量。這篇文章講了三種的方法來降低 memory usage，都非常簡單很容易就能做到哦～</p>\n<h3 id=\"gomemlimit-is-a-game-changer-for-high-memory-applications\"><a class=\"direct-link\" href=\"#gomemlimit-is-a-game-changer-for-high-memory-applications\">#</a> <a href=\"https://weaviate.io/blog/2022/08/GOMEMLIMIT-a-Game-Changer-for-High-Memory-Applications.html\">GOMEMLIMIT is a game changer for high-memory applications</a></h3>\n<p>如果你的 Go 程式會用到很多 memory，三不五時就會 OOM(Out Of Memory)，那從 Go 1.19 開始可以用 GOMEMLIMIT 來限制 memory usage 了，他會在你的使用量在到達上限之前就幫你做 GC，讓你的程式不會因為不小心吃了太多記憶體，就直接被殺掉</p>\n<h3 id=\"%E6%89%93%E9%80%A0-go-%E8%AF%AD%E8%A8%80%E6%9C%80%E5%BF%AB%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95\"><a class=\"direct-link\" href=\"#%E6%89%93%E9%80%A0-go-%E8%AF%AD%E8%A8%80%E6%9C%80%E5%BF%AB%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95\">#</a> <a href=\"https://blog.csdn.net/ByteDanceTech/article/details/124464192\">打造 Go 语言最快的排序算法</a></h3>\n<p>不知道大家有沒有聽說 Go 的 sorting 演算法從 1.19 開始變得更快了，這篇講的是這個更快的排序是怎麼被時做出來的，內容有點深，所以如果沒興趣的話不看也沒關係，只要記得趕快把 Go 升級到 1.19 就好～</p>\n",
      "date_published": "2022-08-23T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/146/gqsm-146/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/146/gqsm-146/",
      "title": "第 146 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"how-to-debug-better-with-chrome\"><a class=\"direct-link\" href=\"#how-to-debug-better-with-chrome\">#</a> <a href=\"https://blog.flycode.com/how-to-debug-better-with-chrome\">How to Debug Better with Chrome</a></h3>\n<p>debug 是軟體開發中的一部份，而在 debug 的時候，知道如何好好利用工具是很重要的！文章中介紹幾個使用 Chrome devtool 的技巧，讓你能更高效的為網站除錯。</p>\n<!-- summary -->\n<h3 id=\"%E2%9C%8B%F0%9F%8F%BC%F0%9F%94%A5-cs-visualized%3A-cors\"><a class=\"direct-link\" href=\"#%E2%9C%8B%F0%9F%8F%BC%F0%9F%94%A5-cs-visualized%3A-cors\">#</a> <a href=\"https://dev.to/lydiahallie/cs-visualized-cors-5b8h\">✋🏼🔥 CS Visualized: CORS</a></h3>\n<p>如果你是個 Web 工程師，那一定都會遇到關於 CORS 的錯誤，通常這種時候只要在後端上多做個設定就可以解決，但是你了解過什麼是 CORS 嗎？到文章裡看看作者用精美的圖和動畫解釋！</p>\n<h3 id=\"big-changes-ahead-for-deno\"><a class=\"direct-link\" href=\"#big-changes-ahead-for-deno\">#</a> <a href=\"https://deno.com/blog/changes\">Big Changes Ahead for Deno</a></h3>\n<p>Deno 要迎來大改版了，主要的目標是與 npm 的套件更兼容、增加一個 http 的 server，成為最快的 JavaScript Web Server 等等，而且還開設一個表單，讓使用 Deno 的公司可以申請，Deno 團隊會盡力地回答你的技術問題。</p>\n",
      "date_published": "2022-08-23T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/145/smalltown-145/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/145/smalltown-145/",
      "title": "第 145 期 Security 推薦文章",
      "content_html": "<h2 id=\"security\"><a class=\"direct-link\" href=\"#security\">#</a> Security</h2>\n<!-- summary -->\n<h3 id=\"cloud-native-security-whitepaper-version-1.0-audiobook-release\"><a class=\"direct-link\" href=\"#cloud-native-security-whitepaper-version-1.0-audiobook-release\">#</a> <a href=\"https://www.cncf.io/blog/2022/08/12/cloud-native-security-whitepaper-version-1-0-audiobook-release/\">Cloud Native Security Whitepaper version 1.0 audiobook release</a></h3>\n<p>CNCF 的 Security Technical Advisory Group 最近推出了 Cloud Native Security Whitepaper 的第二版 (<a href=\"https://github.com/cncf/tag-security/tree/main/security-whitepaper\">GitHub 下載連結</a>)，除此之外還特別準備了 Cloud Native Security Whitepaper 的第一版的 audiobook (<a href=\"https://soundcloud.com/user-769472014/sets/cncf-tag-security-cloud-native-security-whitepaper-version-v1\">前往聆聽</a>) 讓使用者聽到第一版的講解</p>\n<!-- summary -->\n<h3 id=\"dependabot-now-alerts-for-vulnerable-github-actions\"><a class=\"direct-link\" href=\"#dependabot-now-alerts-for-vulnerable-github-actions\">#</a> <a href=\"https://github.blog/2022-08-09-dependabot-now-alerts-for-vulnerable-github-actions/\">Dependabot now alerts for vulnerable GitHub Actions</a></h3>\n<p>一個安全的 CI/CD 流程對於開發團隊來說是相當重要的一環，GitHub Action 除了讓開發者存放於 GitHub 的程式碼具有原生 CI/CD 的能力之外，最近官方也宣布現在會針對易受攻擊的 GitHub Actions 發出 Dependabot 的告警，用來協助開發者修復 CI/CD 流程中的安全問題</p>\n<h3 id=\"amazon-detective-supports-kubernetes-workloads-on-amazon-eks-for-security-investigations\"><a class=\"direct-link\" href=\"#amazon-detective-supports-kubernetes-workloads-on-amazon-eks-for-security-investigations\">#</a> <a href=\"https://aws.amazon.com/blogs/aws/amazon-detective-supports-kubernetes-workloads-on-amazon-eks-for-security-investigations/\">Amazon Detective Supports Kubernetes Workloads on Amazon EKS for Security Investigations</a></h3>\n<p>AWS Detective 是 AWS 於 2020 所推出的服務，它可以用來偵測來自 Amazon GuardDyty, AWS Cloudtrail 和 AWS VPC 的嘗試登入事件，API 存取，和網路流量...等，現在他將可以支援 Kubernetes 工作流程，並且支援 AWS EKS 的安全偵測，現在只要開啟這個功能，他就會開始檢查 EKS 的 Audit Log，允許使用者可以快速偵測到運行於 EKS 中的服務是否有潛藏的惡意行為</p>\n",
      "date_published": "2022-08-16T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/145/rico-145/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/145/rico-145/",
      "title": "第 145 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"my-istiod-pod-can%E2%80%99t-communicate-with-the-kubernetes-api-server!\"><a class=\"direct-link\" href=\"#my-istiod-pod-can%E2%80%99t-communicate-with-the-kubernetes-api-server!\">#</a> <a href=\"https://thenewstack.io/my-istiod-pod-cant-communicate-with-the-kubernetes-api-server/\">My Istiod Pod Can’t Communicate with the Kubernetes API Server!</a></h3>\n<p>作者示範以 Cilium 和 Istio 防止多個服務之間未經授權的連線，這次展示兩個不同版本的服務不應該能夠互相連線，基本上這個功能靠 Cilium 的 L4 network policy 就可以做到了。於是作者示範假如 pod 無法跟 Kubernetes API 溝通時怎麼辦？這時可以看到 Istio 的 L7 authorization policy 會擋下連線。另外這個示範在本機即可執行。<!-- summary --></p>\n<h3 id=\"4-ways-to-optimize-your-workflows-with-docker-extensions\"><a class=\"direct-link\" href=\"#4-ways-to-optimize-your-workflows-with-docker-extensions\">#</a> <a href=\"https://thenewstack.io/4-ways-to-optimize-your-workflows-with-docker-extensions/\">4 Ways to Optimize Your Workflows with Docker Extensions</a></h3>\n<p>Docker 桌面版最新釋出的擴充功能可以讓開發更加強大，受歡迎的擴充功能有：硬碟使用量、Tailscale（可以讓外網連線自己在內網環境本機的 container）、Logs Explorer 和 <a href=\"http://Slim.Ai\">Slim.Ai</a>（分析 container image），眾多擴充都可以在 Docker Marketplace 找到。</p>\n<h3 id=\"dashboards-as-code%3A-a-new-approach-to-visualizing-aws-apis\"><a class=\"direct-link\" href=\"#dashboards-as-code%3A-a-new-approach-to-visualizing-aws-apis\">#</a> <a href=\"https://aws.amazon.com/blogs/opensource/dashboards-as-code-a-new-approach-to-visualizing-aws-apis/\">Dashboards as code: A new approach to visualizing AWS APIs</a></h3>\n<p>Steampipe 提供 Dashboard as Code 的概念讓使用者可以客製化 AWS dashboard，像是可以定義多個 regions 或多個 AWS accounts。文章裡示範如哪些 iam user 的 access key 的已經超過 90 天沒換，S3 在各個 regions 的數量，IAM user、group 和 policy 的關係，以及合規測試的 dashboard。</p>\n",
      "date_published": "2022-08-16T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/145/larry-145/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/145/larry-145/",
      "title": "第 145 期 職涯規劃 推薦文章",
      "content_html": "<h2 id=\"%E8%81%B7%E6%B6%AF%E8%A6%8F%E5%8A%83\"><a class=\"direct-link\" href=\"#%E8%81%B7%E6%B6%AF%E8%A6%8F%E5%8A%83\">#</a> 職涯規劃</h2>\n<h3 id=\"%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E4%BF%AE%E7%85%89%E8%88%87%E6%88%90%E9%95%B7-(1)-%E2%80%94-%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88-%E2%86%92-%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B\"><a class=\"direct-link\" href=\"#%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E4%BF%AE%E7%85%89%E8%88%87%E6%88%90%E9%95%B7-(1)-%E2%80%94-%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88-%E2%86%92-%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B\">#</a> <a href=\"https://vgod.medium.com/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E4%BF%AE%E7%85%89%E8%88%87%E6%88%90%E9%95%B7-1-7b906f837d74\">軟體工程師的修煉與成長 (1) — 程式設計 → 軟體工程</a></h3>\n<p>跟我一樣有點年紀的軟體工程師應該都看過 vgod 的「追求神乎其技的程式設計之道」，而今年 vgod 又有一系列「軟體工程師的修煉與成長」分享他全職工作後的修煉和成長過程，目前已經更新到第十篇，雖然我才剛看完三四篇，但真的不得不推薦給大家（這篇需要訂閱 Medium 會員，可以用免費額度或是無痕模式打開來看）</p>\n<h3 id=\"%E7%95%B6%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%8D%81%E5%B9%B4%E7%9A%84%E5%BF%83%E5%BE%97%E6%84%9F%E6%83%B3\"><a class=\"direct-link\" href=\"#%E7%95%B6%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%8D%81%E5%B9%B4%E7%9A%84%E5%BF%83%E5%BE%97%E6%84%9F%E6%83%B3\">#</a> <a href=\"https://mz026.medium.com/%E7%95%B6%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%8D%81%E5%B9%B4%E7%9A%84%E5%BF%83%E5%BE%97%E6%84%9F%E6%83%B3-30c1ec688f9f\">當工程師十年的心得感想</a></h3>\n<p>這篇是作者在當了十年的工程師之後，自己得到的種種體悟，雖然每個人的想法多少有不同，但我覺得看看別人的經驗，也許對自己也能有一些不錯的啟發</p>\n<h3 id=\"%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC%E8%80%85%E7%9A%84%E5%9F%B9%E9%A4%8A\"><a class=\"direct-link\" href=\"#%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC%E8%80%85%E7%9A%84%E5%9F%B9%E9%A4%8A\">#</a> <a href=\"https://etrexkuo.medium.com/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC%E8%80%85%E7%9A%84%E5%9F%B9%E9%A4%8A-8fee43c76195\">軟體開發者的培養</a></h3>\n<p>這篇跟上一篇有點類似，不過著重的點是在於作者卡米哥認為軟體開發者應該具有怎麼樣的價值觀，像是你應該要在乎程式碼的修改成本、理解成本、測試成本等等，我自己看完也是覺得收穫很多～</p>\n",
      "date_published": "2022-08-16T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/145/gqsm-145/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/145/gqsm-145/",
      "title": "第 145 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"react-re-renders-guide%3A-everything%2C-all-at-once\"><a class=\"direct-link\" href=\"#react-re-renders-guide%3A-everything%2C-all-at-once\">#</a> <a href=\"https://www.developerway.com/posts/react-re-renders-guide\">React re-renders guide: everything, all at once</a></h3>\n<p>在 React 中，re-render 可以讓畫面隨著 props 或 state 的資料變化更新，但除了這些必要的 re-render 之外，還有其他可能會造成性能問題的不必要的 re-render。文章裡有搭配許多簡單的圖片和程式碼解釋各種狀況，非常容易理解。</p>\n<!-- summary -->\n<h3 id=\"apple-pay-on-web-%2B-cybersource-%E4%B8%B2%E6%8E%A5%E7%AD%86%E8%A8%98\"><a class=\"direct-link\" href=\"#apple-pay-on-web-%2B-cybersource-%E4%B8%B2%E6%8E%A5%E7%AD%86%E8%A8%98\">#</a> <a href=\"https://blog.markkulab.net/2022/08/10/apple-pay-on-web-cybersource-integration\">Apple Pay on Web + Cybersource 串接筆記</a></h3>\n<p>作者因為工作需要就踏上了串接 Apple Pay 的道路，除了清楚地列出需要準備的事前項目外，在文章裡還圖文並茂，一步步解釋各個設定 Apple Pay 流程，最後也分別列出前後端的範例程式碼。這篇文章很適合在工作有需要時查閱。</p>\n<h3 id=\"the-60%3A30%3A10-color-rule-for-web-design\"><a class=\"direct-link\" href=\"#the-60%3A30%3A10-color-rule-for-web-design\">#</a> <a href=\"https://yuricodesbot.hashnode.dev/the-603010-color-rule-for-web-design\">The 60:30:10 color rule for web design</a></h3>\n<p>在網頁設計中，有一種叫做 60:30:10 的色彩規則，他們分別代表著 60% 的主色系、30% 用來輔助主色系的輔助色，以及 10% 用來表達頁面重要資訊的強調色系。那這種色彩規則該如何利用，作者在文章中搭配了 <a href=\"https://colorhub.vercel.app/\">colorhub</a> 來解釋顏色的佈局。</p>\n",
      "date_published": "2022-08-16T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/144/rico-144/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/144/rico-144/",
      "title": "第 144 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"sre-from-theory-to-practice%3A-what's-difficult-about-on-call%3F\"><a class=\"direct-link\" href=\"#sre-from-theory-to-practice%3A-what's-difficult-about-on-call%3F\">#</a> <a href=\"https://dzone.com/articles/sre-from-theory-to-practice-whats-difficult-about\">SRE From Theory to Practice: What's Difficult About On-Call?</a></h3>\n<p>造成 on-call 困難的原因不外乎是沒有完好的文件、責任歸屬不清、透明度不足和花在 on-call 時間上的比例等等，要如何實踐健康的 on-call 機制可以從這三點上改善：</p>\n<ul>\n<li>內部的 on-call 要跟影響到客戶的外部 on-call 一樣重要，建議可以從 SLIs 和 SLOs 上著手</li>\n<li>客戶們的使用情況可以分析不同服務的重要性，另外不確定服務的運作原理不必感到挫折或羞恥地尋求幫助！</li>\n<li>如上所述，營造無究責的文化（blameless culture）非常重要<!-- summary --></li>\n</ul>\n<h3 id=\"top-25-nginx-tips-and-tricks-from-practical-experience\"><a class=\"direct-link\" href=\"#top-25-nginx-tips-and-tricks-from-practical-experience\">#</a> <a href=\"https://hackernoon.com/top-25-nginx-tips-and-tricks-from-practical-experience\">Top 25 Nginx Tips and Tricks From Practical Experience</a></h3>\n<p>本文介紹 Nginx 的基本程式架構，解釋為什麼改設定的時候可以讓使用者察覺不到，並且提供許多作者實際工作上好用的 Nginx 使用訣竅，對於維運工程師是個很實用的文章，工作常用的設定都有。</p>\n<h3 id=\"what-is-a-platform-orchestrator%3F\"><a class=\"direct-link\" href=\"#what-is-a-platform-orchestrator%3F\">#</a> <a href=\"https://www.cncf.io/blog/2022/08/04/what-is-a-platform-orchestrator/\">What is a Platform Orchestrator?</a></h3>\n<p>本文介紹 platform orchestrator 的精髓與要解決的痛點，其本質是建立在 Declarative Application Model 上，也是大家熟悉的 pull model，這些是可以動態更新的。而最主要解決的原先的是以靜態的方式建立 application，例如靜態設定很容易在不同環境中飄移，很難維護且很難標準化。最後還有假如要建立 platform orchestrator 的話會遇到的細節整理。</p>\n",
      "date_published": "2022-08-09T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/144/larry-144/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/144/larry-144/",
      "title": "第 144 期 遠端工作 推薦文章",
      "content_html": "<h2 id=\"%E9%81%A0%E7%AB%AF%E5%B7%A5%E4%BD%9C\"><a class=\"direct-link\" href=\"#%E9%81%A0%E7%AB%AF%E5%B7%A5%E4%BD%9C\">#</a> 遠端工作</h2>\n<h3 id=\"%E9%81%A0%E7%AB%AF%E5%B7%A5%E4%BD%9C%E5%85%83%E5%B9%B4-%E7%B3%BB%E5%88%97\"><a class=\"direct-link\" href=\"#%E9%81%A0%E7%AB%AF%E5%B7%A5%E4%BD%9C%E5%85%83%E5%B9%B4-%E7%B3%BB%E5%88%97\">#</a> <a href=\"https://ithelp.ithome.com.tw/articles/10237587\">遠端工作元年 系列</a></h3>\n<p>因為疫情的關係，使得這幾年來遠端工作的機會大幅增加，而且很多公司為了招攬來自世界各地的人才，就算疫情已經趨緩了也還是繼續實行遠端工作。如果你也對遠端工作有興趣，那可以看看這系列文章，了解一下最近遠端工作的生態跟趨勢。</p>\n<h3 id=\"%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E8%87%AA%E7%94%B1%E5%B7%A5%E4%BD%9C%E8%80%85%E7%9A%84%E5%8B%9E%E4%BF%9D%E8%88%87%E5%9C%8B%E6%B0%91%E5%B9%B4%E9%87%91%E5%84%AA%E5%8A%A3%E6%AF%94%E8%BC%83\"><a class=\"direct-link\" href=\"#%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E8%87%AA%E7%94%B1%E5%B7%A5%E4%BD%9C%E8%80%85%E7%9A%84%E5%8B%9E%E4%BF%9D%E8%88%87%E5%9C%8B%E6%B0%91%E5%B9%B4%E9%87%91%E5%84%AA%E5%8A%A3%E6%AF%94%E8%BC%83\">#</a> <a href=\"https://hi-upchen.medium.com/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E8%87%AA%E7%94%B1%E5%B7%A5%E4%BD%9C%E8%80%85%E7%9A%84%E5%8B%9E%E4%BF%9D%E8%88%87%E5%9C%8B%E6%B0%91%E5%B9%B4%E9%87%91%E5%84%AA%E5%8A%A3%E6%AF%94%E8%BC%83-eaf22e2512b3\">程式設計自由工作者的勞保與國民年金優劣比較</a></h3>\n<p>如果你很幸運找到一份遠端工作，卻發現你的公司並沒有在台灣設立分公司，所以沒辦法在台灣幫你保勞健保，那你就得認真算一下是要自己到工會保勞保，還是保國民年金保險比較划算。先講結論，我自己是覺得還是保勞保比較划算一點，不過還是可以看一下他們各自的好處壞處，再決定要怎麼做。</p>\n<h3 id=\"dcard-%E6%80%8E%E9%BA%BC-wfh%EF%BC%9F%E5%BE%88%E5%B0%91%E4%BA%BA%E7%9F%A5%E9%81%93%E7%9A%84-backend-team-%E6%97%A5%E5%B8%B8\"><a class=\"direct-link\" href=\"#dcard-%E6%80%8E%E9%BA%BC-wfh%EF%BC%9F%E5%BE%88%E5%B0%91%E4%BA%BA%E7%9F%A5%E9%81%93%E7%9A%84-backend-team-%E6%97%A5%E5%B8%B8\">#</a> <a href=\"https://medium.com/dcardlab/dcard-%E6%80%8E%E9%BA%BC-wfh-%E5%BE%88%E5%B0%91%E4%BA%BA%E7%9F%A5%E9%81%93%E7%9A%84-backend-team-%E6%97%A5%E5%B8%B8-53770dcdbe42\">Dcard 怎麼 WFH？很少人知道的 Backend Team 日常</a></h3>\n<p>如果曾經 Work From Home 過，就會發現在家工作時同事間的協作方式會變得不太一樣，譬如說大家不會再一起出去吃午餐，因此少了許多閒聊的機會，或是你要找的人剛好去吃飯或睡午覺，你也沒辦法直接到他座位旁看他在不在。因此工作的模式也必須要有所改變，才能保持高效率的完成任務。</p>\n",
      "date_published": "2022-08-09T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/144/gqsm-144/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/144/gqsm-144/",
      "title": "第 144 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"micro-frontend-with-react-and-next.js\"><a class=\"direct-link\" href=\"#micro-frontend-with-react-and-next.js\">#</a> <a href=\"https://blog.logrocket.com/micro-frontend-react-next-js/\">Micro-frontend with React and Next.js</a></h3>\n<p>本篇文章提到的 Micro-frontend 是避免在專案變得越來越大的時候，造成團隊的管理變得困難的一種架構。微前端可以將專案的各個功能以小模組開發和管理，本文將會用 React 及 Next 建立一個簡單的微前端專案。</p>\n<!-- summary -->\n<h3 id=\"why-you-should-use-swc-(and-not-babel)\"><a class=\"direct-link\" href=\"#why-you-should-use-swc-(and-not-babel)\">#</a> <a href=\"https://blog.logrocket.com/why-you-should-use-swc/\">Why you should use SWC (and not Babel)</a></h3>\n<p>Babel 可以幫我們把那些寫得很潮的 JavaScript 酷東西，轉換成大多瀏覽器都通用的語法。但是除了 Babel，還有另外一個使用以性能和可靠性聞名的 Rust 所寫的 SWC，文章裡從為什麼需要編譯器開始介紹，如果你也好奇 Babel 外的其他選擇，可以看看文章喲！ 🙌</p>\n<h3 id=\"i-stopped-using-visual-studio-code\"><a class=\"direct-link\" href=\"#i-stopped-using-visual-studio-code\">#</a> <a href=\"https://h.daily-dev-tips.com/i-stopped-using-visual-studio-code\">I stopped using Visual Studio Code</a></h3>\n<p>本人我已經不只一次被推坑使用 Webstorm，還有些朋友邊推邊 show 爆一堆不明覺厲的快捷鍵和功能，實在是讓我看得眼花撩亂 😂，雖然文章沒有介紹很多，但是作者還是有提到一些在開發上很實用的功能！</p>\n",
      "date_published": "2022-08-09T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/143/smalltown-143/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/143/smalltown-143/",
      "title": "第 143 期 Kubernetes 推薦文章",
      "content_html": "<h2 id=\"kubernetes\"><a class=\"direct-link\" href=\"#kubernetes\">#</a> Kubernetes</h2>\n<!-- summary -->\n<h3 id=\"configmap-reloader-%E2%80%94-automatically-reload-new-data-from-configmap%2Fsecret-to-deployments\"><a class=\"direct-link\" href=\"#configmap-reloader-%E2%80%94-automatically-reload-new-data-from-configmap%2Fsecret-to-deployments\">#</a> <a href=\"https://medium.com/linux-shots/configmap-secret-reloader-automatically-add-reload-data-from-configmap-secret-to-deployments-dc245e06b92c\">ConfigMap Reloader — Automatically reload new data from ConfigMap/Secret to deployments</a></h3>\n<p>大家應該都會把一些應用服務要使用到的變數或是組態存放在 K8s Configmap 或是 Secret 中，而這些值一定會有需要修改的時候，不過當他們被修改時，其實滿多應用服務並不會自動去重新讀取新的值，所以這篇文章介紹了一個叫做 Reloader 的 K8s Controller，他會去監看這些 K8s Configmap 跟 Secret，當他們有改變時，他就會去幫忙 Rolling Upgrade 跟這些 Configmap 跟 Secret 有關的 Deployments, StatefulSets 或是 DaemonSets！</p>\n<!-- summary -->\n<h3 id=\"kubebrain\"><a class=\"direct-link\" href=\"#kubebrain\">#</a> <a href=\"https://github.com/kubewharf/kubebrain\">kubebrain</a></h3>\n<p>K8s 已經成為分散式應用服務調度的標準系統，不過他只能穩定的支援 5,000 個 Node，不管是在橫向或是縱向的擴張上，K8s 需要處理運行於其中應用服務狀態的資訊量會不斷的增加，最後造成擴展上的瓶頸，白話文就是說 Etcd 撐不住了，所以作者推出 KubeBrain 的開源專案，想要用來取代 Etcd，根據<a href=\"https://github.com/kubewharf/kubebrain/blob/main/docs/benchmark.md\">實驗結果</a>看起來讀跟寫的效能比 ETCD 來的好，但是刪除比較弱，需要再繼續最佳化，不過在 K8s Cluster 在實際運行時，需要刪除動作的情況筆記少</p>\n<h3 id=\"kubernetes-monitoring%3A-leveraging-4-open-source-toolsets\"><a class=\"direct-link\" href=\"#kubernetes-monitoring%3A-leveraging-4-open-source-toolsets\">#</a> <a href=\"https://www.cncf.io/blog/2022/08/01/kubernetes-monitoring-leveraging-4-open-source-toolsets/\">Kubernetes monitoring: leveraging 4 open-source toolsets</a></h3>\n<p>使用 K8s 的人假如想要有一套綜合的監控工具該如何達成呢？CNCF 這邊建議可以使用 Prometheus 負責 Metrics and Alerting，Jaeger 負責 Tracing，OpenTelemetry 負責標準化的 Metrics, Logs, Traces，Thanos 負責多個叢集和長時間的 Metric 儲存</p>\n",
      "date_published": "2022-08-02T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/143/rico-143/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/143/rico-143/",
      "title": "第 143 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"how-kubernetes-reinvented-virtual-machines-(in-a-good-sense)\"><a class=\"direct-link\" href=\"#how-kubernetes-reinvented-virtual-machines-(in-a-good-sense)\">#</a> <a href=\"https://iximiuz.com/en/posts/kubernetes-vs-virtual-machines/\">How Kubernetes Reinvented Virtual Machines (in a good sense)</a></h3>\n<p>這篇文章以實際面的角度切入加上圖片解釋了為什麼要有 Kubernetes 的存在，從最一開始的 VM 遇到的難題開始到 container 解決了什麼問題，以及 container 不能解決的問題，最後延伸到 Kubernetes pod 的特別之處，作者比喻 pod 類似 VM 的概念，所有 container 共享同一個 namespace。當然不免俗的還是要簡單介紹 Kubernetes 常見的 object 例如：Deployment、ReplicaSet 和 Service。<!-- summary --></p>\n<h3 id=\"core-devops-practices-to-secure-your-infrastructure-as-code\"><a class=\"direct-link\" href=\"#core-devops-practices-to-secure-your-infrastructure-as-code\">#</a> <a href=\"https://dzone.com/refcardz/iac-security-1\">Core DevOps Practices to Secure Your Infrastructure as Code</a></h3>\n<p>IaC 已經是顯學了，但是 IaC 還是有許多 security 挑戰需要克服，IaC 在 hybrid-cloud 和 multi-cloud 會增加管理 security 的難度；或者 infra 持續的增長但是管理的支出不變或更少；業務上的需求說變就變，infra 必須要跟著因應而增加複雜度。IaC 靜態分析可以讓 security 有所提升，與其讓 developer 自己檢查，還不如用靜態分析來做，況且每家 cloud provider 的機制都不太一樣，文章的最後也有提及怎麼做好 security IaC for multi-cloud。<br>\n文章也提及 IaC security 除了 IaC CICD pipeline 的整合外，還需要重視使用後的 feedback；把 alerts 做好分類和願意承受的風險，不然團隊很快就會陷入疲勞；另外除了 infra，app 也必須做好靜態和動態的分析。</p>\n<h3 id=\"expand-the-power-of-traefik-proxy-with-custom-plugins\"><a class=\"direct-link\" href=\"#expand-the-power-of-traefik-proxy-with-custom-plugins\">#</a> <a href=\"https://traefik.io/blog/expand-the-power-of-traefik-proxy-with-custom-plugins/\">Expand the Power of Traefik Proxy with Custom Plugins</a></h3>\n<p>Traefik proxy 是目前很受歡迎的 cloud-native application proxy 之一，其支援使用者安裝另外客製化的 plugin，不論從 dashboard 或從設定檔都可以輕鬆安裝，甚至也會直接給你 YAML 範例讓使用者方便複製貼上，而且這些 plugin 不用特別編譯且跨平台支援。目前看到很有意思的 plugin 有 ldapAuth、DenyIP、Rewrite Body 等等，最後官方也有完整的文章教學怎麼寫一個客製化的 plugin。</p>\n",
      "date_published": "2022-08-02T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/143/gqsm-143/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/143/gqsm-143/",
      "title": "第 143 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"style-queries\"><a class=\"direct-link\" href=\"#style-queries\">#</a> <a href=\"https://una.im/style-queries/\">Style Queries</a></h3>\n<p>Style Queries 和 Container Queries 一樣 都是 contains-level-3 規範的一部份，Style Queries 能夠直接查詢頁面裡父元素的樣式內容，並根據父元素的樣式修改子元素的樣式，但為什麼我們需要這麼應用呢？來看看文章怎麼說吧！</p>\n<!-- summary -->\n<h3 id=\"%E4%B8%80%E5%80%8B%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E5%A9%9A%E7%A6%AE%E9%BB%91%E5%AE%A2%E6%9D%BE\"><a class=\"direct-link\" href=\"#%E4%B8%80%E5%80%8B%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E5%A9%9A%E7%A6%AE%E9%BB%91%E5%AE%A2%E6%9D%BE\">#</a> <a href=\"https://jason-memo.dev/posts/wedding-hackathon/\">一個前端工程師的婚禮黑客松</a></h3>\n<p>你能夠想像在一場婚禮裡面，一個前端工程師能利用自己的技能做到哪些事情嗎？這篇文章的作者他紀錄了舉辦婚禮時，自己所準備的周邊軟體，雖然比較少程式碼，但也是非常有趣且生活化的實務運用！</p>\n<h3 id=\"the-end-of-localhost\"><a class=\"direct-link\" href=\"#the-end-of-localhost\">#</a> <a href=\"https://dx.tips/the-end-of-localhost\">The End of Localhost</a></h3>\n<p>文章裡主要在說明將來大家可能都不會在 local 上開發，也舉出許多公司的系統都已經把開發環境移到雲端上作業，同時也列舉出許多贊成和反對意見的想法，是一篇非常有趣的文章。</p>\n",
      "date_published": "2022-08-02T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/143/larry-143/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/143/larry-143/",
      "title": "第 143 期 Elixir 推薦文章",
      "content_html": "<h2 id=\"elixir\"><a class=\"direct-link\" href=\"#elixir\">#</a> Elixir</h2>\n<h3 id=\"%E7%94%A8-elixir-%E5%AD%B8%E7%BF%92%E5%BE%8C%E7%AB%AF%E7%85%89%E9%87%91%E8%A1%93-%E7%B3%BB%E5%88%97%E6%96%87\"><a class=\"direct-link\" href=\"#%E7%94%A8-elixir-%E5%AD%B8%E7%BF%92%E5%BE%8C%E7%AB%AF%E7%85%89%E9%87%91%E8%A1%93-%E7%B3%BB%E5%88%97%E6%96%87\">#</a> <a href=\"https://ithelp.ithome.com.tw/articles/10235287\">用 Elixir 學習後端煉金術 系列文</a></h3>\n<p>最近一直被同事推坑 Elixir，前幾天去 Coscup 又被推一次，越聽越不錯決定花點時間來看看XD，然後就找到了這篇講 Elixir 跟 Phoenix 框架的系列文，有興趣的話也一起來學學新語言吧～</p>\n<h3 id=\"46-%E5%B9%B4%E8%80%81%E6%8A%80%E8%A1%93%E8%88%87-web-%E7%9A%84%E6%96%B0%E7%81%AB%E8%8A%B1---actor-model-in-web\"><a class=\"direct-link\" href=\"#46-%E5%B9%B4%E8%80%81%E6%8A%80%E8%A1%93%E8%88%87-web-%E7%9A%84%E6%96%B0%E7%81%AB%E8%8A%B1---actor-model-in-web\">#</a> <a href=\"https://blog.techbridge.cc/2019/06/21/actor-model-in-web/\">46 年老技術與 Web 的新火花 - Actor Model in Web</a></h3>\n<p>Elixir 因為建立在 Erlang 之上，所以也是使用 Actor Model 來進行平行處理。雖然 Actor Model 比較冷門一點，但他的設計概念其實非常好，除了可以將灌注點分離，而且在平行處理時完全不需要上 lock，可以很好的解決需要平行運算的問題。</p>\n<h3 id=\"csp-vs-actor-model-for-concurrency\"><a class=\"direct-link\" href=\"#csp-vs-actor-model-for-concurrency\">#</a> <a href=\"https://dev.to/karanpratapsingh/csp-vs-actor-model-for-concurrency-1cpg\">CSP vs Actor model for concurrency</a></h3>\n<p>如果你也有寫 Go 的話，應該會聽過另一個 concurrency model 叫 CSP，其實我覺得 Actor model 跟 CSP 都是很好的想法，比 multi-thread 共用變數然後上 lock 還要好非常多XD。有興趣可以看這篇文章複習一下這兩個 model，也順便看看他們到底哪裡不一樣～</p>\n",
      "date_published": "2022-07-26T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/142/smalltown-142/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/142/smalltown-142/",
      "title": "第 142 期 Terraform 推薦文章",
      "content_html": "<h2 id=\"terraform\"><a class=\"direct-link\" href=\"#terraform\">#</a> Terraform</h2>\n<!-- summary -->\n<h3 id=\"four-great-alternatives-to-hashicorp%E2%80%99s-terraform-cloud\"><a class=\"direct-link\" href=\"#four-great-alternatives-to-hashicorp%E2%80%99s-terraform-cloud\">#</a> <a href=\"https://medium.com/@elliotgraebert/four-great-alternatives-to-hashicorps-terraform-cloud-6e0a3a0a5482\">Four Great Alternatives to HashiCorp’s Terraform Cloud</a></h3>\n<p>Infrastructure as Code 也是程式碼，所以當然也需要 Continuous Integration，而大家應該馬上就會想到 Terraform Cloud 這個由 HashiCorp 所推出的服務，不過除了他之外還有其他的選擇嗎？有些人或許還知道一個開源的工具叫做 Atlantis，這篇文章介紹了其他幾個替代方案，分別是 Spacelift, Env0, Scalr, 和 Cloudify，從各個角度來做筆記與詳細介紹，對於 IaC 的 CI 有興趣的人，千萬不要錯過這篇文章！</p>\n<!-- summary -->\n<h3 id=\"terraform-%E2%80%94-best-practices\"><a class=\"direct-link\" href=\"#terraform-%E2%80%94-best-practices\">#</a> <a href=\"https://medium.com/devops-mojo/terraform-best-practices-top-best-practices-for-terraform-configuration-style-formatting-structure-66b8d938f00c\">Terraform — Best Practices</a></h3>\n<p>這篇文章介紹撰寫 Terraform 時建議的最佳實踐，從檔案架構開始談起，接著討論 Module 的結構，如何利用不同的資料夾來分離應用服務與環境，檔案命名規則，提高安全性的作法...等超多撰寫 Terraform 需要注意的地方，不管是剛開始學習 Terraform 或是已經接觸過 Terraform 的人，這篇文章都相當的實用！</p>\n<h3 id=\"how-terraform-works-%3A-modules-illustrated\"><a class=\"direct-link\" href=\"#how-terraform-works-%3A-modules-illustrated\">#</a> <a href=\"https://awstip.com/terraform-modules-illustrate-26cbc48be83a\">How Terraform Works : Modules Illustrated</a></h3>\n<p>這篇文章透過清楚的圖片來說明 Terraform Module 是如何的運作，從 Root Module 和 Child Module 如何一起運行，Output 如何被 Module 所使用，都用詳細的圖解做說明，對於 Module 還不太熟悉的人可以透過此篇文章好好深入了解一下！</p>\n",
      "date_published": "2022-07-26T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/142/rico-142/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/142/rico-142/",
      "title": "第 142 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"how-prometheus-querying-works-(and-why-you-should-care)\"><a class=\"direct-link\" href=\"#how-prometheus-querying-works-(and-why-you-should-care)\">#</a> <a href=\"https://www.timescale.com/blog/how-prometheus-querying-works-and-why-you-should-care/\">How Prometheus Querying Works (and Why You Should Care)</a></h3>\n<p>深入 Prometheus 如何查詢資料細節的文章，本文是基於 2022 年歐洲 Prometheus Day 演講做的延伸，裡面有影片可以參考。從 Prometheus data model 以及 indexing 策略到最後的執行查詢，執行查詢有一步一步拆解整體的流程。<!-- summary --></p>\n<h3 id=\"prometheus-vs.-opentelemetry-metrics%3A-a-complete-guide\"><a class=\"direct-link\" href=\"#prometheus-vs.-opentelemetry-metrics%3A-a-complete-guide\">#</a> <a href=\"https://www.timescale.com/blog/prometheus-vs-opentelemetry-metrics-a-complete-guide/\">Prometheus vs. OpenTelemetry Metrics: A Complete Guide</a></h3>\n<p>究竟要使用 Prometheus 還是 OpenTelemetry 呢？本文給了詳盡的建議。此篇是系列文的最後一篇比較文，有興趣可以看前面兩篇介紹 Prometheus 和 OpenTelemetry。這兩個工具最大的差異在於 Prometheus 從收集、儲存和搜尋都做完了，而 OpenTelemetry 本身負責的事情只有收集而已，儲存和搜尋都是交給其他服務去做。</p>\n<h3 id=\"how-to-quickly-(and-successfully)-onboard-engineers\"><a class=\"direct-link\" href=\"#how-to-quickly-(and-successfully)-onboard-engineers\">#</a> <a href=\"https://about.gitlab.com/blog/2022/07/21/quickly-onboarding-engineers-successfully/\">How to quickly (and successfully) onboard engineers</a></h3>\n<p>DevOps 文化的涉略範圍當然也包括加速新進人員的上手過程，時間軸上大致分為四個階段：從新進員工還沒開工前就要開始準備了、第一天的準備、第一週的目標以及一個月後持續的遞交價值。</p>\n",
      "date_published": "2022-07-26T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/142/larry-142/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/142/larry-142/",
      "title": "第 142 期 資料庫 推薦文章",
      "content_html": "<h2 id=\"%E8%B3%87%E6%96%99%E5%BA%AB\"><a class=\"direct-link\" href=\"#%E8%B3%87%E6%96%99%E5%BA%AB\">#</a> 資料庫</h2>\n<h3 id=\"%E8%A4%87%E7%BF%92%E8%B3%87%E6%96%99%E5%BA%AB%E7%9A%84-isolation-level-%E8%88%87%E5%9C%96%E8%A7%A3%E4%BA%94%E5%80%8B%E5%B8%B8%E8%A6%8B%E7%9A%84-race-conditions\"><a class=\"direct-link\" href=\"#%E8%A4%87%E7%BF%92%E8%B3%87%E6%96%99%E5%BA%AB%E7%9A%84-isolation-level-%E8%88%87%E5%9C%96%E8%A7%A3%E4%BA%94%E5%80%8B%E5%B8%B8%E8%A6%8B%E7%9A%84-race-conditions\">#</a> <a href=\"https://medium.com/@chester.yw.chu/%E8%A4%87%E7%BF%92%E8%B3%87%E6%96%99%E5%BA%AB%E7%9A%84-isolation-level-%E8%88%87%E5%B8%B8%E8%A6%8B%E7%9A%84%E4%BA%94%E5%80%8B-race-conditions-%E5%9C%96%E8%A7%A3-16e8d472a25c\">複習資料庫的 Isolation Level 與圖解五個常見的 Race Conditions</a></h3>\n<p>最近為了準備面試，又重新回去複習資料庫的 Isolation Level，意外發現這篇文章寫得非常清楚，不只有畫圖給你，而且還舉了非常多的例子，一篇就可以把 Isolation Level 看懂。</p>\n<blockquote>\n<p>註：這篇是 Medium 上的 Member-only story，可以用無痕模式打開來看</p>\n</blockquote>\n<h3 id=\"rdbms-(%E9%97%9C%E8%81%AF%E5%BC%8F%E8%B3%87%E6%96%99%E5%BA%AB)---acid-%E5%9F%BA%E7%A4%8E%E8%A7%80%E5%BF%B5\"><a class=\"direct-link\" href=\"#rdbms-(%E9%97%9C%E8%81%AF%E5%BC%8F%E8%B3%87%E6%96%99%E5%BA%AB)---acid-%E5%9F%BA%E7%A4%8E%E8%A7%80%E5%BF%B5\">#</a> <a href=\"https://blog.kennycoder.io/2020/01/21/RDBMS-%E9%97%9C%E8%81%AF%E5%BC%8F%E8%B3%87%E6%96%99%E5%BA%AB-ACID%E5%9F%BA%E7%A4%8E%E8%A7%80%E5%BF%B5/\">RDBMS (關聯式資料庫) - ACID 基礎觀念</a></h3>\n<p>同樣是為了準備面試XD，最近又去把 ACID 分別是什麼複習了一下。如果你是剛開始入門使用 RDBMS，可以先看看這篇文章，會讓你在使用資料庫時對他的設計比較有概念哦。</p>\n<h3 id=\"what-is-the-difference-between-%22inner-join%22-and-%22outer-join%22%3F\"><a class=\"direct-link\" href=\"#what-is-the-difference-between-%22inner-join%22-and-%22outer-join%22%3F\">#</a> <a href=\"https://stackoverflow.com/a/38578/4753060\">What is the difference between &quot;INNER JOIN&quot; and &quot;OUTER JOIN&quot;?</a></h3>\n<p>眾所皆知 SQL 的 JOIN 可以分成 Inner 跟 Outer 兩種，而 Outer 又分成 Left, Right 跟 Full 三種，真的會被搞到霧煞煞。如果你跟我一樣到現在還分不太清楚的話，可以來看看這篇 Stack Overflow 的留言，三分種就把這些搞懂～</p>\n",
      "date_published": "2022-07-26T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/142/gqsm-142/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/142/gqsm-142/",
      "title": "第 142 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"fantastic-css-border-animation\"><a class=\"direct-link\" href=\"#fantastic-css-border-animation\">#</a> <a href=\"https://dev.to/chokcoco/fantastic-css-border-animation-5166\">Fantastic CSS border animation</a></h3>\n<p>相信大家都一定有用過 CSS 的 border 來完成一些需要框線的 UI，但是你能想像框線還能夠延伸出怎樣的視覺效果或動畫嗎？也許之前你沒想過的，在這篇文章都有！ 🙌</p>\n<!-- summary -->\n<h3 id=\"code-smell-149-%E2%80%94-optional-chaining\"><a class=\"direct-link\" href=\"#code-smell-149-%E2%80%94-optional-chaining\">#</a> <a href=\"https://levelup.gitconnected.com/code-smell-149-optional-chaining-b8830d7206ae\">Code Smell 149 — Optional Chaining</a></h3>\n<p>文章中主要介紹在 JavaScript 裡，有個 <code>?.</code> 能夠在訪問某個物件屬性前，先判斷物件是否為 <code>null</code> 或 <code>undefined</code>，但在你健全的程式碼當中，怎麼會有一個物件會在訪問時還會是 <code>null</code> 或 <code>undefined</code> 呢？除此之外，這個作者的 Code Smell 系列會把一些有壞味道的程式碼或寫法列出來，有興趣的可以再多看看其他文章哦！但就不一定都是 JavaScript。</p>\n<h3 id=\"my-dumbest-css-mistakes\"><a class=\"direct-link\" href=\"#my-dumbest-css-mistakes\">#</a> <a href=\"https://css-tricks.com/my-dumbest-css-mistakes/\">My Dumbest CSS Mistakes</a></h3>\n<p>作者列出他自己在寫 CSS 的時候常會有的 typo 或是誤會，雖然有些看起來真的是很基本的東西，但都會不經意的寫錯，我自己在看這篇文章的時候，也邊在思考有什麼語法是我每次都一定會弄錯，再改成正確的 😂。大家在看文章時也可以思考看看，然後在列出來面對之後把它們一次改過來！</p>\n",
      "date_published": "2022-07-26T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/141/smalltown-141/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/141/smalltown-141/",
      "title": "第 141 期 後端開發 推薦文章",
      "content_html": "<h2 id=\"backend\"><a class=\"direct-link\" href=\"#backend\">#</a> Backend</h2>\n<!-- summary -->\n<h3 id=\"7-best-practices-for-speeding-up-code-reviews\"><a class=\"direct-link\" href=\"#7-best-practices-for-speeding-up-code-reviews\">#</a> <a href=\"https://hackernoon.com/7-best-practices-for-speeding-up-code-reviews\">7 Best Practices for Speeding Up Code Reviews</a></h3>\n<p>Code Review 可能會很痛苦，軟體開發工程師經常會抱怨 Review 的流程緩慢，導致其他相關的任務也跟著被延遲，而且也造成自己在新開的 PR 和下個工作任務之間來回切換；Review 出來的結果也可能會充滿吹毛求疵的回饋，這對所有參加 Code Review 的人來說都是很糟糕的體驗</p>\n<!-- summary -->\n<p>甚至有人建議將 Code Review 直接取消，不過這種作法可能對新創小公司還適合，但作者認為這樣的做法不適合所有的組織，尤其是企業級的大公司，所以作者想要透過這篇文章提出七個關於 Code Review 的最佳實踐，PR Submitter 和 Reviewer 在 Code Review 的過程有更好的體驗</p>\n<h3 id=\"pocketbase\"><a class=\"direct-link\" href=\"#pocketbase\">#</a> <a href=\"https://github.com/pocketbase/pocketbase\">pocketbase</a></h3>\n<p>PocketBase 是一個開源的 Go 後端框架，可以用來構建後端應用，他由以下元件所組成：即時訂閱功能，檔案和使用者管理，方便的管理員 UI，和 REST-ish API，Client 端 API SDK，讓開發者可以輕鬆地開發後端應用</p>\n<h3 id=\"tproxy\"><a class=\"direct-link\" href=\"#tproxy\">#</a> <a href=\"https://github.com/kevwan/tproxy\">tproxy</a></h3>\n<p>當作者在開發後端服務和 <a href=\"https://github.com/zeromicro/go-zero\">go-zero</a> 時，常常會需要去監控網路流量，例如監控 gRPC 何時需要連線或是重新連線，監控 MySQL 的 Connection Pool 有多少，以及監控目前有多少的 TCP 連線，這些都是很麻煩的事情，因此作者想要提供一個簡單的工具，可以讓開發者即時監控這些網路相關數據，專注在程式邏輯的開發上面</p>\n",
      "date_published": "2022-07-19T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/141/rico-141/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/141/rico-141/",
      "title": "第 141 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"on-coordination-costs%3A-moving-a-couch%2C-and-painting-a-room\"><a class=\"direct-link\" href=\"#on-coordination-costs%3A-moving-a-couch%2C-and-painting-a-room\">#</a> <a href=\"https://itrevolution.com/on-coordination-costs-moving-a-couch-and-painting-a-room/\">On Coordination Costs: Moving A Couch, And Painting A Room</a></h3>\n<p>作者探討如何減低組織內的合作成本，以生活例子舉例讓讀者更好理解。第一個方法是以時間做切分，一開始先把令人分心的事物先移開，之後專心做主要任務，結束後再把分心的事物歸回原位。第二個方法為以空間做切分，其用意跟第一個方法無異。雖然本文因生活例子做出發看起來這樣的合作理所當然，但實際上在組織裡困難許多，光是看文章下的留言就略知一二。<!-- summary --></p>\n<h3 id=\"why-more-incidents-are-better\"><a class=\"direct-link\" href=\"#why-more-incidents-are-better\">#</a> <a href=\"https://devops.com/why-more-incidents-are-better/\">Why More Incidents Are Better</a></h3>\n<p>要達到系統上完全沒有事故是不可能的，事實上，有事故反而才是好事，這代表著學習的機會、此次事故有可能避免更糟糕的情況、合作修復事故可以增進團隊文化、修復事故讓 SRE 團隊在組織更有價值。</p>\n<h3 id=\"how-to-secure-kubernetes-ingress%3F\"><a class=\"direct-link\" href=\"#how-to-secure-kubernetes-ingress%3F\">#</a> <a href=\"https://www.cncf.io/blog/2022/07/12/how-to-secure-kubernetes-ingress/\">How to secure Kubernetes Ingress?</a></h3>\n<p>這篇示範 Kubernetes 以 Ingress 接受流量時怎麼做 HTTPS，或許對許多人而言是基本功，不過 Kubernetes Ingress 實踐 SSL/TLS 有很多做法，甚至每家 cloud provider 都整合他們自己的做法，這裡提供不依賴 cloud provider 的做法讓大家參考。</p>\n",
      "date_published": "2022-07-19T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/141/larry-141/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/141/larry-141/",
      "title": "第 141 期 系統設計 推薦文章",
      "content_html": "<h2 id=\"%E7%B3%BB%E7%B5%B1%E8%A8%AD%E8%A8%88\"><a class=\"direct-link\" href=\"#%E7%B3%BB%E7%B5%B1%E8%A8%AD%E8%A8%88\">#</a> 系統設計</h2>\n<h3 id=\"cap%E5%AE%9A%E7%90%86101%E2%80%94%E5%88%86%E6%95%A3%E5%BC%8F%E7%B3%BB%E7%B5%B1%EF%BC%8C%E6%9C%89%E4%B8%80%E5%A5%BD%E6%B2%92%E5%85%A9%E5%A5%BD\"><a class=\"direct-link\" href=\"#cap%E5%AE%9A%E7%90%86101%E2%80%94%E5%88%86%E6%95%A3%E5%BC%8F%E7%B3%BB%E7%B5%B1%EF%BC%8C%E6%9C%89%E4%B8%80%E5%A5%BD%E6%B2%92%E5%85%A9%E5%A5%BD\">#</a> <a href=\"https://medium.com/%E5%BE%8C%E7%AB%AF%E6%96%B0%E6%89%8B%E6%9D%91/cap%E5%AE%9A%E7%90%86101-3fdd10e0b9a\">CAP定理101—分散式系統，有一好沒兩好</a></h3>\n<p>最近 Larry 我在找工作，所以又重新讀了很多基礎的理論，意外發現這篇很不錯的文章。這篇從為什麼會出現 Partition 開始講起 CAP 定理，一步一步探究為什麼 CAP 三者不可能同時被滿足，最終再解釋 eventually consistency 這個妥協後的解法。</p>\n<h3 id=\"unique-id-generation-in-distributed-systems\"><a class=\"direct-link\" href=\"#unique-id-generation-in-distributed-systems\">#</a> <a href=\"https://medium.com/nerd-for-tech/unique-id-generation-in-distributed-systems-6f7aaa39c9af\">Unique Id generation in distributed systems</a></h3>\n<p>你有想過在分散式系統中，如果讓不同機器生出不同的 ID 嗎？因為 UUID 實在太長了不符合這篇文章的情境（要讓使用者輸入 ID），所以作者參考了 Twitter snowflake 的設計理念，設計出自己的一套絕對不重複的 ID，很有趣的一篇文章。</p>\n<h3 id=\"system-design-%E2%80%94-top-k-trending-hashtags\"><a class=\"direct-link\" href=\"#system-design-%E2%80%94-top-k-trending-hashtags\">#</a> <a href=\"https://mecha-mind.medium.com/system-design-top-k-trending-hashtags-4e12de5bb846\">System Design — Top K Trending Hashtags</a></h3>\n<p>如果要你實作一個系統，用來統計近 24 小時內 Instagram 上最熱門的十個 hashtag，那你會怎麼做設計呢？如果想不到的話可以來看看這篇文章，他從資料量跟使用者人數開始進行分析，並且提供了一個簡單（好像也不是那麼簡單？）的解法。</p>\n",
      "date_published": "2022-07-19T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/141/gqsm-141/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/141/gqsm-141/",
      "title": "第 141 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"micro-frontend%E2%80%94why-and-how%3F\"><a class=\"direct-link\" href=\"#micro-frontend%E2%80%94why-and-how%3F\">#</a> <a href=\"https://www.syncfusion.com/blogs/post/micro-frontend-why-and-how.aspx\">Micro-Frontend—Why and How?</a></h3>\n<p>微前端的概念類似於微服務，我們可以將整個應用程式分解成更小的應用功能，這些功能可以由各個團隊自主開發，如此一來就能夠讓不同的團隊在不各自影響的狀況下進行開發。這篇文章給了很好的入門觀念和實作方式，如果對微前端架構有興趣的話，可以撥空看一下，並跟著實作！</p>\n<!-- summary -->\n<h3 id=\"applying-solid-principles-in-react\"><a class=\"direct-link\" href=\"#applying-solid-principles-in-react\">#</a> <a href=\"https://konstantinlebedev.com/solid-in-react/\">Applying SOLID principles in React</a></h3>\n<p>SOLID 在軟體開發中，是非常常看到的設計原則。作者在文章中分別介紹了 SOLID 的意思，並且在某些原則上用了 React 的程式碼範例幫助理解（只少了 Liskov），但是文章的範例都很簡單！就算與 React 不熟也可以讀讀看喲！</p>\n<h3 id=\"javascript-design-patterns-%E2%80%93-explained-with-examples\"><a class=\"direct-link\" href=\"#javascript-design-patterns-%E2%80%93-explained-with-examples\">#</a> <a href=\"https://www.freecodecamp.org/news/javascript-design-patterns-explained/\">JavaScript Design Patterns – Explained with Examples</a></h3>\n<p>我本身算是很喜歡在遇到問題時，使用設計模式去做重構或是思考，但是 JavaScript 畢竟不是 OOP，因此有些設計模式的觀念都再要自己轉換到 JS 中，這時候如果有篇用 JavaScript 為例子講解設計模式的文章，就會覺得挖到寶了趕快來看看，如果你們也一樣的話，就快點進文章中吧！</p>\n",
      "date_published": "2022-07-19T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/140/smalltown-140/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/140/smalltown-140/",
      "title": "第 140 期 Kubernetes 推薦文章",
      "content_html": "<h2 id=\"kubernetes\"><a class=\"direct-link\" href=\"#kubernetes\">#</a> Kubernetes</h2>\n<!-- summary -->\n<h3 id=\"how-virtual-kubernetes-clusters-can-speed-up-your-local-development\"><a class=\"direct-link\" href=\"#how-virtual-kubernetes-clusters-can-speed-up-your-local-development\">#</a> <a href=\"https://loft-sh.medium.com/how-virtual-kubernetes-clusters-can-speed-up-your-local-development-e5645614a3c5\">How Virtual Kubernetes Clusters Can Speed Up Your Local Development</a></h3>\n<p><a href=\"https://github.com/loft-sh/vcluster\">vcluster</a> 是 Loft 的一個專案，他可以將一個虛擬的 K8s Cluster 建立在實體 K8s Cluster 的一個 Namepsace 中 (感覺好像在繞口令)，換句話說就是 Host K8s Cluster -&gt; Namespace -&gt; Virtual K8s Cluster！而這篇文章則是要跟大家介紹如何利用 vcluster 來加速本地端開發流程</p>\n<!-- summary -->\n<h3 id=\"how-to-scale-down-kubernetes-cluster-workloads-during-off-hours\"><a class=\"direct-link\" href=\"#how-to-scale-down-kubernetes-cluster-workloads-during-off-hours\">#</a> <a href=\"https://tanmay-bhat.medium.com/how-to-scale-down-kubernetes-cluster-workloads-during-off-hours-fe4bc477ed51\">How to scale down Kubernetes cluster workloads during off-hours</a></h3>\n<p>K8s 有沒有可能根據時間把叢集變小？為什麼會想要這樣做呢？因為作者所為維護的服務其實在下班時間沒有什麼流量，尤其在週末更是慘澹，所以假如可以根據時間把 K8s Cluster 縮小的話，就可以解省很多的經費，所以他想要跟大家介紹一個叫做 <a href=\"https://codeberg.org/hjacobs/kube-downscaler\">Kubernetes Downscaler</a> 的開源專案，讓 K8s 可以根據使用者需求節能省碳</p>\n<h3 id=\"cubernetes\"><a class=\"direct-link\" href=\"#cubernetes\">#</a> <a href=\"https://www.justingarrison.com/blog/2022-07-06-cubernetes/\">Cubernetes</a></h3>\n<p>有在研究自架 K8s 的人應該有聽過 <a href=\"https://aws.amazon.com/blogs/containers/getting-started-with-eks-anywhere-on-bare-metal/\">Amazon EKS Anywhere</a>，而作者就利用這個專案花了幾個月的時間自幹的一座 K8s Cluster，並將其取名為 Cubernetes，文中詳細地描述了如何完成這台機器的詳細過程，看起來滿酷的，會有人也想要跟作者一樣也自己來一台嗎XD</p>\n",
      "date_published": "2022-07-12T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/140/rico-140/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/140/rico-140/",
      "title": "第 140 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"list-of-devops-blogs-and-resources-for-learning\"><a class=\"direct-link\" href=\"#list-of-devops-blogs-and-resources-for-learning\">#</a> <a href=\"https://devopscube.com/list-of-devops-blogs-and-resources/\">List of DevOps Blogs and Resources for Learning</a></h3>\n<p>這篇目前是我看過最厲害的 DevOps 資源整理，從課程、Github repository（光是這個水就很深）、書籍、blog、social media、podcast、知名人士、白皮書、必看的工程文章 blog、討論區。可以看得出來這篇整理都是精挑細選的，想要精進自己這邊是很好的入口，更不用說筆者我之後的 DevOps 推薦文章也會從裡面找。<!-- summary --></p>\n<h3 id=\"understanding-data-transfer-costs-for-aws-container-services\"><a class=\"direct-link\" href=\"#understanding-data-transfer-costs-for-aws-container-services\">#</a> <a href=\"https://aws.amazon.com/blogs/containers/understanding-data-transfer-costs-for-aws-container-services/\">Understanding data transfer costs for AWS container services</a></h3>\n<p>這篇解釋在 AWS 上使用 container 服務所花的資料傳輸費用。例如 container deployment 的不同而很難注意到花費，container image registry 是否為 public or private、是否同個 region 都會影響資料傳輸費用。有些 AWS container 服務的特殊性，地端的 nodes 需要跟 AWS 雲上的 control plane 做溝通也會有傳輸費用，更不用說 AZ 之間的傳輸費用。甚至要注意的是 Kubernetes 的設定是不是流量直接到適當的 node 上而不用再請 kube-proxy 轉送。</p>\n<h3 id=\"advanced-features-of-kubernetes%E2%80%99-horizontal-pod-autoscaler\"><a class=\"direct-link\" href=\"#advanced-features-of-kubernetes%E2%80%99-horizontal-pod-autoscaler\">#</a> <a href=\"https://betterprogramming.pub/advanced-features-of-kubernetes-horizontal-pod-autoscaler-536ebd7893ad\">Advanced Features of Kubernetes’ Horizontal Pod Autoscaler</a></h3>\n<p>本文用 KinD 做測試環境示範進階的 HPA（Horizontal Pod Autoscaler），基本 HPA 常見的基準就是 CPU or memory 使用量，於是作者就示範客製 Prometheus metric 來觸發 HPA，而且可以從 <code>Pods</code> 和 <code>Service</code> 這兩層看情況收集。除了從 application 本身獲取 metric 之外，也可以從它的 backing service 下手，例如 DB 或 queue service。另外也介紹較為特殊的功能如：HPAScaleToZero、HPAContainerMetrics、LogarithmicScaleDown。</p>\n",
      "date_published": "2022-07-12T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/140/gqsm-140/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/140/gqsm-140/",
      "title": "第 140 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E9%83%BD%E5%9C%A8%E5%BF%99%E4%BA%9B%E4%BB%80%E9%BA%BC%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E9%83%BD%E5%9C%A8%E5%BF%99%E4%BA%9B%E4%BB%80%E9%BA%BC%EF%BC%9F\">#</a> <a href=\"https://kimtoday.medium.com/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E9%83%BD%E5%9C%A8%E5%BF%99%E4%BA%9B%E4%BB%80%E9%BA%BC-39a066128a\">前端工程師都在忙些什麼？</a></h3>\n<p>作者憑藉著自己的記憶和求證紀錄，在文章中描述了過去十年來前端圈到底發生了哪些事情，文章中將分成以下幾種時期，闡述每個時期間的發展：</p>\n<ul>\n<li>歡樂老時光 — 2007–2009</li>\n<li>混合開發，前端生態 — 2009–2010</li>\n<li>開發體系，模組化 — 2011–2013</li>\n<li>資料流 ，體驗最佳化 — 2014–2016</li>\n<li>可免則免，快狠準 —2017–now</li>\n</ul>\n<p>這些時期在前端圈發展出來的工具非常非常多，很喜歡作者最後說的：「每個工具都有想解決的問題，發展和演進也都有它的原因，去了解它們，不需要想得太複雜，也不用盲目地追求技術」。</p>\n<!-- summary -->\n<h3 id=\"bun-is-a-fast-all-in-one-javascript-runtime\"><a class=\"direct-link\" href=\"#bun-is-a-fast-all-in-one-javascript-runtime\">#</a> <a href=\"https://bun.sh/\">Bun is a fast all-in-one JavaScript runtime</a></h3>\n<p>繼幾年前的 <a href=\"https://deno.land/\">deno</a> 之後，又出現了一款能夠打包、轉譯、安裝和執行 JavaScript 的 Bun！Bun 使用的 JavaScript 引擎是 <a href=\"https://github.com/WebKit/WebKit/tree/main/Source/JavaScriptCore\">JavaScriptCore</a>，且大部分的轉譯內容包含 JSX/TypeScript、SQLite client、WebSocket client 等都是從頭寫出來的。還有其他更多特色，到官網中看看有哪些吸引到你的！</p>\n<h3 id=\"introduction-to-defensive-css\"><a class=\"direct-link\" href=\"#introduction-to-defensive-css\">#</a> <a href=\"https://defensivecss.dev/articles/intro-defensive-css/\">Introduction to Defensive CSS</a></h3>\n<p>在今年初的 114 期週刊中，有推薦一篇 <a href=\"https://ishadeed.com/article/defensive-css/\">Defensive CSS</a>，而這篇也是以相同概念作延伸，並增加一些 UI 設計師在設計時對版面的思考，以及在工程師端該如何處理內容過多，導致圖片根據版面被撐開造成比例錯誤的狀況。</p>\n",
      "date_published": "2022-07-12T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/139/smalltown-139/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/139/smalltown-139/",
      "title": "第 139 期 系統監控 推薦文章",
      "content_html": "<h2 id=\"monitoring\"><a class=\"direct-link\" href=\"#monitoring\">#</a> Monitoring</h2>\n<!-- summary -->\n<h3 id=\"a-set-of-modern-grafana-dashboards-for-kubernetes\"><a class=\"direct-link\" href=\"#a-set-of-modern-grafana-dashboards-for-kubernetes\">#</a> <a href=\"https://medium.com/@dotdc/a-set-of-modern-grafana-dashboards-for-kubernetes-4b989c72a4b2\">A set of modern Grafana dashboards for Kubernetes</a></h3>\n<p>作者在 2018 年擔任 DevOps Engingger 負責多個運行在 GKE 的 Go 微服務效能測試時，便開始使用 Grafana 來視覺化 K8s 運算資源的使用狀態。從那時起他便深深的愛上有關 K8s 相關監控技術而且從未停止鑽研他，也正因為如此才會有今天要介紹的 Grafana Dashboard 開源專案</p>\n<!-- summary -->\n<p>在這個 Grafana Dashbord 開源專案中，作者希望可以做出一系列可以幫助自己快速解決每天維運問題的 Dashboard，他並不想要把所有的 Metric 都放進來，而是希望做出有用且直覺的 Dashboard，因此最後做出了以下幾個可以搭配一起使用的 Dashboard，從範例圖看起來還滿不賴的，感覺滿值得安裝來試試看的</p>\n<ul>\n<li>Kubernetes / Views / Global</li>\n<li>Kubernetes / Views / Namespaces</li>\n<li>Kubernetes / Views / Nodes</li>\n<li>Kubernetes / Views / Pods</li>\n<li>Kubernetes / System / API Server</li>\n<li>Kubernetes / System / CoreDNS</li>\n<li>Kubernetes Addons / Trivy / Starboard Operator</li>\n</ul>\n<h3 id=\"vault-logging-and-alerting-on-day-1\"><a class=\"direct-link\" href=\"#vault-logging-and-alerting-on-day-1\">#</a> <a href=\"https://www.hashicorp.com/blog/vault-logging-and-alerting-on-day-1\">Vault Logging and Alerting on Day 1</a></h3>\n<p>Vault 可以算是開源界 Credential Management 的第一把交椅，他可以很安全地保護機敏資料，不過他本身也是一個應用服務，要如何收集分析他的 Log？以及怎麼知道哪一些訊息表示他出問題了，需要有 Alert 通知我們呢？官方的這篇文章提供了一個簡單且免費的解決方案，讓使用者運行此方案在 AWS 環境中，就可以讓 Vault 服務可以簡易的處理 Log 與具備有 Alert 通知功能，有使用 Vault 的人千萬不要錯過了</p>\n<h3 id=\"opentelemetry-roadmap-and-latest-updates\"><a class=\"direct-link\" href=\"#opentelemetry-roadmap-and-latest-updates\">#</a> <a href=\"https://horovits.medium.com/opentelemetry-roadmap-and-latest-updates-a389144f3812\">OpenTelemetry Roadmap and Latest Updates</a></h3>\n<p>OpenTelemetry 目前是 CNCF 第二活躍的專案，在 KubeCon Europe 2022 中關於他的最大新聞應該就是 OpenTelemetry Metrics 已經到了 RC 階段，使用 Java, .Net 和 Python 實作的相關 API 和 SDK 也都趨於穩定，OpenTelemetry Protocol 也是越來越穩定，同時他也全面支援 Prometheus，不管是要匯出或是匯入 Prometheus 格式的 Metric 都可以，更多關於 OpenTelemetry 近期更新可以參考詳細內文</p>\n",
      "date_published": "2022-07-05T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/139/rico-139/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/139/rico-139/",
      "title": "第 139 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"devops-vs.-sre-vs.-platform-engineering%3F-the-gaps-might-be-smaller-than-you-think\"><a class=\"direct-link\" href=\"#devops-vs.-sre-vs.-platform-engineering%3F-the-gaps-might-be-smaller-than-you-think\">#</a> <a href=\"https://www.cncf.io/blog/2022/07/01/devops-vs-sre-vs-platform-engineering-the-gaps-might-be-smaller-than-you-think/\">DevOps vs. SRE vs. Platform Engineering? The gaps might be smaller than you think</a></h3>\n<p>DevOps、SRE 和平台工程師究竟差在哪？文中探討了許多組織 DevOps 文化的問題，很多維運工程師轉變成 SRE 後其實沒有什麼差別，開發跟 SRE 還是有個鴻溝，所以內部用平台就是為了實踐 DevOps 精神，而核心精神就是當作真正的產品來維護。<!-- summary --></p>\n<h3 id=\"why-we-need-devops-for-ml-data\"><a class=\"direct-link\" href=\"#why-we-need-devops-for-ml-data\">#</a> <a href=\"https://www.tecton.ai/blog/devops-ml-data/\">Why We Need DevOps for ML Data</a></h3>\n<p>一般的 application 生命週期在沒有 DevOps 文化的加速下非常地緩慢，更不用說 machine learning，再加上各個部門需求的夾擊下讓迭代又更慢了。裡面提及很多 machine learning 實際開發和交付時會遇上的困難，十分值得一看。</p>\n<h3 id=\"terraform-%E2%80%94-provider\"><a class=\"direct-link\" href=\"#terraform-%E2%80%94-provider\">#</a> <a href=\"https://blog.devgenius.io/terraform-provider-aa57ade59eec\">Terraform — Provider</a></h3>\n<p>我們常常使用 Terraform 各式各樣的 providers，但是你知道它怎麼運作的嗎？例如：基礎原理、如何尋找、如何宣告、版本控制、內建 providers 以及同個 provider 放在不同位置，好奇的話務必一探究竟。</p>\n",
      "date_published": "2022-07-05T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/139/larry-139/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/139/larry-139/",
      "title": "第 139 期 Golang 推薦文章",
      "content_html": "<h2 id=\"golang\"><a class=\"direct-link\" href=\"#golang\">#</a> Golang</h2>\n<h3 id=\"a-closer-look-at-go%E2%80%99s-sync-package\"><a class=\"direct-link\" href=\"#a-closer-look-at-go%E2%80%99s-sync-package\">#</a> <a href=\"https://teivah.medium.com/a-closer-look-at-go-sync-package-9f4e4a28c35a\">A Closer Look at Go’s sync Package</a></h3>\n<p>知道怎麼啟動 goroutine 之後，下一個問題是怎麼讓多個 goroutine 分工合作，這時候就會用到 sync 裡面的 Mutex 或是 WaitGroup。這篇文章詳細介紹了 sync package 裡面的東西，先把這篇看完再開始用 goroutine 一定會大有幫助哦</p>\n<h3 id=\"custom-github-action-with-go\"><a class=\"direct-link\" href=\"#custom-github-action-with-go\">#</a> <a href=\"https://thedevelopercafe.com/articles/custom-github-action-with-go-29d9ce66e5a8\">Custom GitHub Action with Go</a></h3>\n<p>Github Action 已經推出好一段時間了，應該有不少人都用過了。那有沒有想過要自己寫一個 action 呢？這邊有一篇簡單的教學，只要跟著做很快就可以寫出來哦～</p>\n<h3 id=\"csp-vs-actor-model-for-concurrency\"><a class=\"direct-link\" href=\"#csp-vs-actor-model-for-concurrency\">#</a> <a href=\"https://dev.to/karanpratapsingh/csp-vs-actor-model-for-concurrency-1cpg\">CSP vs Actor model for concurrency</a></h3>\n<p>寫 Go 的人應該都知道 Go 的 goroutine 跟 channel 是 CSP model 的具體實現，而有另外一種 concurrency model 叫 actor model 則是可以在 Elixir 中看到，有興趣可以來了解一下他們的差異～</p>\n",
      "date_published": "2022-07-05T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/139/gqsm-139/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/139/gqsm-139/",
      "title": "第 139 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E6%B8%AC%E8%A9%A6\"><a class=\"direct-link\" href=\"#%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E6%B8%AC%E8%A9%A6\">#</a> <a href=\"https://medium.com/asiayo-engineering/%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E6%B8%AC%E8%A9%A6-b41689b84996\">從零開始的前端測試</a></h3>\n<p>作者的團隊在公司內將網站的前後端分離，並且將大部分元件規劃好後，就開始對它們做單元測試，以及多個元件之間的整合測試。在文章裡會描述作者一開始的思考，和在過程中所碰到的問題，是一篇乾貨滿滿的好文章！</p>\n<!-- summary -->\n<h3 id=\"are-you-struggling-with-css%3F\"><a class=\"direct-link\" href=\"#are-you-struggling-with-css%3F\">#</a> <a href=\"https://blog.reactplay.io/are-you-struggling-with-css\">Are you Struggling with CSS?</a></h3>\n<p>作者表示他自己相當害怕 CSS，也曾試著到處看喜歡網站的原始碼，但是這對他來說只有挫折而已。如果你也常因為 CSS 感到挫敗，不妨看看他覺得這一路熟練 CSS 的過程中，哪些事情是最重要的。</p>\n<h3 id=\"my-wonderful-html-email-workflow\"><a class=\"direct-link\" href=\"#my-wonderful-html-email-workflow\">#</a> <a href=\"https://www.joshwcomeau.com/react/wonderful-emails-with-mjml-and-mdx/#integrating-with-email-service-providers\">My Wonderful HTML Email Workflow</a></h3>\n<p>用 HTML 寫 Email 有許多需要注意的小細節，包含沒有 <code>media</code> 屬性，排版也不能用 <code>flex</code> 或 <code>grid</code> 處理，為了讓這一切變得更容易，作者使用了 <a href=\"https://mjml.io/\">MJML</a> 套件，並且將所有工作流程都紀錄在文章中。</p>\n",
      "date_published": "2022-07-05T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/138/rico-138/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/138/rico-138/",
      "title": "第 138 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"kubeconfig-file-explained-with-practical-examples\"><a class=\"direct-link\" href=\"#kubeconfig-file-explained-with-practical-examples\">#</a> <a href=\"https://devopscube.com/kubernetes-kubeconfig-file/\">Kubeconfig File Explained With Practical Examples</a></h3>\n<p>一開始接觸 Kubernetes 想必有很多人會疑惑自己的電腦到底是怎麼連線到 Kubernetes cluster API？其實就是靠 kubeconfig。這篇文章以實際的例子介紹 kubeconfig 的使用方法，例如：怎麼靈活運動 kubeconfig、如何 merge kubeconfig、如何生產 kubeconfig（很多 cloud provider 在這方面都把使用者體驗做得很好）以及一些 FAQs 讓讀者更了解 kubeconfig 知識。<!-- summary --></p>\n<h3 id=\"continuous-operations-is-the-unsung-hero-of-devops\"><a class=\"direct-link\" href=\"#continuous-operations-is-the-unsung-hero-of-devops\">#</a> <a href=\"https://thenewstack.io/continuous-operations-is-the-unsung-hero-of-devops/\">Continuous Operations is the Unsung Hero of DevOps</a></h3>\n<p>這篇文章的標題「持續維運（Continuous Operations）是 DevOps 文化裡的無名英雄」只要是身為第一線維運人員應該感同身受，其中的概念就提到應該把維運自動化到期望的設定狀態，讓維運人員可以專心在複雜的問題上，或者系統可以持續的掃描和修正錯誤。而持續維運可以解釋為 infrastructure 的持續交付（Continuous Delivery），如果使用 public cloud provider 和 Infrastructure-as-Code 就很容易，但是如果是 on-premises 環境就得花更多心力。</p>\n<h3 id=\"how-to-run-untrusted-containers-in-kubernetes\"><a class=\"direct-link\" href=\"#how-to-run-untrusted-containers-in-kubernetes\">#</a> <a href=\"https://blog.sighup.io/how-to-run-untrusted-containers-in-kubernetes/\">How to run untrusted containers in Kubernetes</a></h3>\n<p>我們都知道 container 的隔離性還是有限，所以才會開始有在 Kubernetes 裡跑虛擬機的做法，只要虛擬機有按照 CRI（Container Runtime Iterface）的標準就可以。這邊介紹的 gVisor 可以提供虛擬機環境給 container，讓每個 container 的 kernel 都是獨立的，可以提供更好的獨立性。</p>\n",
      "date_published": "2022-06-28T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/138/larry-138/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/138/larry-138/",
      "title": "第 138 期 資料庫 推薦文章",
      "content_html": "<h2 id=\"%E8%B3%87%E6%96%99%E5%BA%AB\"><a class=\"direct-link\" href=\"#%E8%B3%87%E6%96%99%E5%BA%AB\">#</a> 資料庫</h2>\n<h3 id=\"how-the-n%2B1-query-can-burn-your-database\"><a class=\"direct-link\" href=\"#how-the-n%2B1-query-can-burn-your-database\">#</a> <a href=\"https://betterprogramming.pub/how-the-n-1-query-can-burn-your-database-3841c93987e5\">How the N+1 Query Can Burn Your Database</a></h3>\n<p>N+1 問題是資料庫領域非常知名的問題，這篇文章詳細解釋了 N+1 問題的成因，以及該如何解決，如果才剛開始碰資料庫或是後端開發，建議可以讀讀看哦～</p>\n<h3 id=\"herding-elephants%3A-lessons-learned-from-sharding-postgres-at-notion\"><a class=\"direct-link\" href=\"#herding-elephants%3A-lessons-learned-from-sharding-postgres-at-notion\">#</a> <a href=\"https://www.notion.so/blog/sharding-postgres-at-notion\">Herding elephants: Lessons learned from sharding Postgres at Notion</a></h3>\n<p>應該很多人都聽過 Notion 這個筆記軟體，隨著使用者跟資料量越來越多，他們決定要對 PostgreSQL 建的資料庫做 sharding，這篇文章說明了他們是怎麼做的、過程中遇到什麼困難，非常不錯的文章（但有點長讀起來有點累XD）</p>\n<h3 id=\"hosting-sqlite-databases-on-github-pages\"><a class=\"direct-link\" href=\"#hosting-sqlite-databases-on-github-pages\">#</a> <a href=\"https://phiresky.github.io/blog/2021/hosting-sqlite-databases-on-github-pages/\">Hosting SQLite databases on Github Pages</a></h3>\n<p>你一定知道 SQLite 這個資料庫，但你有想過他可以被架在 Github page 上嗎。這篇的作者先把 SQLite 編譯成 WebAssembly，接著再弄一個 file system 讓他去幫忙抓資料。雖然實用性不高但還滿有趣的XD</p>\n",
      "date_published": "2022-06-28T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/138/gqsm-138/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/138/gqsm-138/",
      "title": "第 138 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"patterns-for-building-javascript-websites-in-2022\"><a class=\"direct-link\" href=\"#patterns-for-building-javascript-websites-in-2022\">#</a> <a href=\"https://dev.to/this-is-learning/patterns-for-building-javascript-websites-in-2022-5a93\">Patterns for Building JavaScript Websites in 2022</a></h3>\n<p>對現代來說，建構一個網站最難的事情是你如何在琳瑯滿目的技術、框架或是套件中，選擇需要的部分進行開發。作者從 Routing、Rendering 和 Hydration 這三個部分，將各種技術和方法用表格加以比較，文章稍難閱讀，因為內容中有滿多專有名詞的。</p>\n<!-- summary -->\n<h3 id=\"don't-be-afraid-of-typescript\"><a class=\"direct-link\" href=\"#don't-be-afraid-of-typescript\">#</a> <a href=\"https://codecryrepeat.hashnode.dev/dont-be-afraid-of-typescript\">Don't be afraid of TypeScript</a></h3>\n<p>越來越多的前端工程師的職缺，都出現了對 TypeScript 的需求，即使不是必要的，也會將他列到加分項目。作者認為對於一個已經掌控 JavaScript 的開發者來說，要再進一步接觸 TypeScript 可能會對他的強制需求感到不知所措，但其實 TypeScript 不難！首先從了解為何需要開始！</p>\n<h3 id=\"6-best-frontend-communities-to-join-in-2022\"><a class=\"direct-link\" href=\"#6-best-frontend-communities-to-join-in-2022\">#</a> <a href=\"https://cult.honeypot.io/reads/6-best-frontend-communities-to-join-in-2022/\">6 Best Frontend Communities to Join in 2022</a></h3>\n<p>身為工程師就是要不斷的接觸新東西及成長，但如果身邊沒有一個圈子能夠互相討論新技術，或是最近學習了什麼的話，線上社群就會是很棒的一個選擇。文章中介紹的幾個線上社群幾乎都有 discord 的討論群，也有他們這個社群主要在討論的技術內容，如果你還是一個人的話，就選擇一個加入看看吧！</p>\n",
      "date_published": "2022-06-28T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/137/smalltown-137/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/137/smalltown-137/",
      "title": "第 137 期 系統監控 推薦文章",
      "content_html": "<h2 id=\"monitoring\"><a class=\"direct-link\" href=\"#monitoring\">#</a> Monitoring</h2>\n<!-- summary -->\n<h3 id=\"grafana-oncall-oss\"><a class=\"direct-link\" href=\"#grafana-oncall-oss\">#</a> <a href=\"https://grafana.com/oss/oncall/\">Grafana OnCall OSS</a></h3>\n<p>Grafana 開源了 On Call 管理工具，就叫做 On Call XD 感覺滿值得一試的！ On Call 需要的功能都已經包含其中，例如整合第三方 Calendar 與通知服務 (Slack, Telegram, Voice, SMS)，Escalation 的設定，Alert 的 Grouping，一個集中化顯示 Alert 的地方...等，有興趣的人可以參考 <a href=\"https://grafana.com/docs/grafana-cloud/oncall/getting-started/\">Get Started 文件</a> 和他的 <a href=\"https://github.com/grafana/oncall\">GitHub Repository</a></p>\n<!-- summary -->\n<h3 id=\"what-makes-victoriametrics-the-next-leading-choice-for-open-source-monitoring\"><a class=\"direct-link\" href=\"#what-makes-victoriametrics-the-next-leading-choice-for-open-source-monitoring\">#</a> <a href=\"https://medium.com/everything-full-stack/what-makes-victoriametrics-the-new-de-facto-standard-choice-for-open-source-monitoring-5d2b66b6e292\">What makes VictoriaMetrics the next leading choice for open-source monitoring</a></h3>\n<p>近幾年來談到開源的監控解決方案時，大家應該都會選擇 Prometheus Stack，其中由 Grafana, Alertmanager 和各種 Exporter 所組成，但作為一個快速成長的生態系，他有著一些問題，例如他是一個效能堪憂的單體式應用程式，從設計上就缺乏有關 HA 的考量，擴展性複雜與不足，當保存的資料超過 14 天時就會造成效能降低與擴展困難</p>\n<p>所以作者最近在研究開源監控解決方案時，覺得監控系統應該要具備高效能，高可用，便宜，易擴展，能備份且儲存相對久時間週期的資料 ，再把 Thanos, Cortex, Grafana-Mimir 和 VictoriaMetrics 都拿出來比較過一輪之後覺得 VictoriaMetrics 應該會是最符合這些需求的贏家，想要知道為什麼的人可以參考詳細內文</p>\n<h3 id=\"how-to-handle-terabytes-of-metrics-in-kubernetes-monitoring\"><a class=\"direct-link\" href=\"#how-to-handle-terabytes-of-metrics-in-kubernetes-monitoring\">#</a> <a href=\"https://medium.com/@holidu/how-to-handle-terabytes-of-metrics-in-kubernetes-monitoring-a3056adf92b\">How to Handle Terabytes of Metrics in Kubernetes Monitoring</a></h3>\n<p>在基礎設施中 Monitoring 當然是相當重要的一環，它能夠協助遇見事故的發生，並且避免服務產生不預期的 Downtime，在作者的公司 Holidu 因為不斷增加的客戶導致基礎設施的不斷增長，每秒所產生約 4 萬個 Metric 的樣本資料，導致監控設施不堪負荷且增加了營運的成本；在此挑戰之下，作者的公司顯然需要一個新的可擴展且穩定的監控系統，所以他們將原來使用的 Prometheus 架構透過 Thanos 重新改進，用以順利處理每秒 4 萬個 Metric 的樣本資料，想要知道詳細做法的話，可以參閱詳細內文</p>\n",
      "date_published": "2022-06-21T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/137/rico-137/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/137/rico-137/",
      "title": "第 137 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"a-deep-dive-into-opentelemetry-metrics\"><a class=\"direct-link\" href=\"#a-deep-dive-into-opentelemetry-metrics\">#</a> <a href=\"https://www.cncf.io/blog/2022/06/08/a-deep-dive-into-opentelemetry-metrics/\">A deep dive into OpenTelemetry metrics</a></h3>\n<p>OpenTelemetry 相信大家都不陌生，此篇文章從基本開始分享起，並且解釋收集 metrics 流程的細節，也有解釋同步與非同步的實作上的差異，另外文章裡的各種分類表和 OpenTelemetry SDK 範例也十分受用。<!-- summary --></p>\n<h3 id=\"troubleshooting-amazon-eks-api-servers-with-prometheus\"><a class=\"direct-link\" href=\"#troubleshooting-amazon-eks-api-servers-with-prometheus\">#</a> <a href=\"https://aws.amazon.com/blogs/containers/troubleshooting-amazon-eks-api-servers-with-prometheus/\">Troubleshooting Amazon EKS API servers with Prometheus</a></h3>\n<p>文章以圖文並茂的方式教大家怎麼 troubleshooting EKS API。其中提到的 LIST 和 WATCH 的差異，使用 WATCH 可以讓 Kubernetes 規模更大，不過當 object 或 worker nodes 越多也是有負擔，本文也有寫解決方法，另外當有些服務使用過多的 LIST 呼叫時務必加上 limit。維運人員也要注意服務詭異的行爲像是讀跟寫的次數不一致是否是預期的？API 優先程度可以根據服務有所調整，這樣就可以避免有些服務影響到 API server。</p>\n<h3 id=\"why-is-everyone-ignoring-the-day-2-kubernetes-problem%3F\"><a class=\"direct-link\" href=\"#why-is-everyone-ignoring-the-day-2-kubernetes-problem%3F\">#</a> <a href=\"https://thenewstack.io/why-is-everyone-ignoring-the-day-2-kubernetes-problem/\">Why Is Everyone Ignoring the Day 2 Kubernetes Problem?</a></h3>\n<p>單純使用 Kubernetes 的 Deployment、Service 或 Ingress 並不難，最難的是如何持續的維運 cluster，比起技術上的使用，更多的是要了解 Kubernetes 的生態圈，然後在各個面向選擇適合組織的工具。例如：如何標準化 Kubernetes 的更新管理、使用者的權限管理與隔離、監控、審計以及如何整合第三方工具等等。</p>\n",
      "date_published": "2022-06-21T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/137/larry-137/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/137/larry-137/",
      "title": "第 137 期 Golang 推薦文章",
      "content_html": "<h2 id=\"golang\"><a class=\"direct-link\" href=\"#golang\">#</a> Golang</h2>\n<h3 id=\"data-race-patterns-in-go\"><a class=\"direct-link\" href=\"#data-race-patterns-in-go\">#</a> <a href=\"https://eng.uber.com/data-race-patterns-in-go/\">Data Race Patterns in Go</a></h3>\n<p>Uber 的 Go 專案有超過五千萬行程式碼，工程師從以前到現在也修過超過一千個 data race（他們真的不考慮用 Rust 嗎XD）。而這篇文章就是他們修了這麼多 data race 之後，整理出來最可能犯錯的地方，非常值得讀的一篇文章～</p>\n<h3 id=\"options-pattern-in-golang\"><a class=\"direct-link\" href=\"#options-pattern-in-golang\">#</a> <a href=\"https://link.medium.com/BWX0EmRySqb\">Options Pattern in Golang</a></h3>\n<p>Options pattern 是 Go 裡面很常見的寫法，在很多框架裡面都能見到他的蹤影，一起來看看什麼情況下可以使用這樣的 pattern，以及有什麼好處吧</p>\n<h3 id=\"effective-error-handling-in-golang\"><a class=\"direct-link\" href=\"#effective-error-handling-in-golang\">#</a> <a href=\"https://earthly.dev/blog/golang-errors/\">Effective Error Handling in Golang</a></h3>\n<p>Go 內建的 error 跟很多語言不一樣，不僅不支援傳統的 try catch，甚至不包含 stack trace，所以用起來有一些不便，但也因此更輕量。如果才剛開始學 Go，來看看如何好好的使用 Go 的 error 吧</p>\n",
      "date_published": "2022-06-21T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/137/gqsm-137/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/137/gqsm-137/",
      "title": "第 137 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"css-day-2022\"><a class=\"direct-link\" href=\"#css-day-2022\">#</a> <a href=\"https://css-irl.info/css-day-2022/\">CSS Day 2022</a></h3>\n<p>這篇文章的作者是 <a href=\"https://cssday.nl/2022\">CSS Day 2022</a> 的其中一位講者，他在文章中分享了第一次參與 CSS Day 的過程，以及在這之中聽見的 CSS 有趣知識，如果沒有時間研究所有議程，可以參考這位講者他感興趣的主題。</p>\n<!-- summary -->\n<h3 id=\"how-to-solve-the-parking-lot-challenge-in-javascript\"><a class=\"direct-link\" href=\"#how-to-solve-the-parking-lot-challenge-in-javascript\">#</a> <a href=\"https://www.freecodecamp.org/news/parking-lot-challenge-solved-in-javascript/\">How to Solve the Parking Lot Challenge in JavaScript</a></h3>\n<p>透過一些遊戲的做法來模擬解決現實中的問題，是學習程式語言中讓人感到不會枯燥的一部份，而且身為前端如果能夠再將寫好的核心邏輯已可視化的介面呈現那這個過程就會變得相當有趣。作者在文章中解釋它處理 Parking Lot Challenge 的過程及方式。</p>\n<h3 id=\"do-you-really-need-a-react-state-management-library%3F\"><a class=\"direct-link\" href=\"#do-you-really-need-a-react-state-management-library%3F\">#</a> <a href=\"https://blog.bitsrc.io/react-do-you-really-need-an-external-library-for-state-management-28f67d03ebe5\">Do You Really Need a React State Management Library?</a></h3>\n<p>不論是要另外使用第三方的狀態管理工具（例如 redux），或是直接利用 React 提供的 context API，選擇這些解決方案的思考模式應該是來自於你對專案狀態的理解，熟悉各種解決方式它提供的優缺點，而不單單認為「這個比較好」。</p>\n",
      "date_published": "2022-06-21T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/136/smalltown-136/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/136/smalltown-136/",
      "title": "第 136 期 後端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 後端開發</h2>\n<!-- summary -->\n<h3 id=\"cache-made-consistent%3A-meta%E2%80%99s-cache-invalidation-solution\"><a class=\"direct-link\" href=\"#cache-made-consistent%3A-meta%E2%80%99s-cache-invalidation-solution\">#</a> <a href=\"https://engineering.fb.com/2022/06/08/core-data/cache-invalidation/\">Cache made consistent: Meta’s cache invalidation solution</a></h3>\n<p>Phil Karlton 曾說過在 Computer Science 領域最困難的兩件事情就是 <strong>使暫存失效</strong> 跟 <strong>命名東西</strong>，在 Meta 內部署著某些世界上最大的 Cache 系統，其中包含著 TAO 與 Memcache，而在過去幾年來，他們改善了 TAO 的暫存一致性，將其從 99.9999 % 提升到 99.99999999，對 Cache 改善有興趣的人不要錯過了</p>\n<!-- summary -->\n<h3 id=\"comparing-ceph%2C-linstor%2C-mayastor%2C-and-vitastor-storage-performance-in-kubernetes\"><a class=\"direct-link\" href=\"#comparing-ceph%2C-linstor%2C-mayastor%2C-and-vitastor-storage-performance-in-kubernetes\">#</a> <a href=\"https://blog.flant.com/kubernetes-storage-performance-linstor-ceph-mayastor-vitastor/\">Comparing Ceph, LINSTOR, Mayastor, and Vitastor storage performance in Kubernetes</a></h3>\n<p>作者說每一份工作總是會被要求對不同的 SDS 解決方案做基準測試，這次加入 Flant 後也不意外，所以這篇文章便是紀錄 Ceph, LINSTOR, Vitastor 和 Mayastor 在 Kuberneter 環境下大 PK 之後的結果，最後的冠軍為 LINSTOR，根據結果，作者覺得他是最成熟可以應用在正式環境的解決方案，詳細數據請參閱內文</p>\n<h3 id=\"linux-memory%3A-buffer-vs-cache\"><a class=\"direct-link\" href=\"#linux-memory%3A-buffer-vs-cache\">#</a> <a href=\"https://medium.com/geekculture/linux-memory-buffer-vs-cache-44d8a187f310\">Linux Memory: Buffer vs Cache</a></h3>\n<p>在 Linux 系統內的 <strong>Buffer</strong> 和 <strong>Cache</strong> 有什麼不同呢？Buffer 會用來當做要寫到磁碟中資料的暫存空間，那麼他會用來暫存從磁碟讀取而來的資料嗎？Cache 是用來暫存從檔案讀取而來的資料，那麼他會用來暫存準備寫到檔案內的資料嗎？假如不知道這些問題答案的話，趕快看一看這篇文章就對了！</p>\n",
      "date_published": "2022-06-14T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/136/rico-136/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/136/rico-136/",
      "title": "第 136 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"multi-cloud-architecture%3A-pros-and-cons\"><a class=\"direct-link\" href=\"#multi-cloud-architecture%3A-pros-and-cons\">#</a> <a href=\"https://www.cncf.io/blog/2022/06/01/multi-cloud-architecture-pros-and-cons/\">Multi-cloud architecture: pros and cons</a></h3>\n<p>相信大家不論在商業或者技術考量上有想過多雲供應商的架構，每個雲供應商有各自的優勢外，大家最常討論的不外乎還是減少服務停機時間。不過相對地，缺點可說是非常多，成本管理、資安和維運複雜度都會變得十分困難。有鑑於此，文章有列出哪些商業考量的點才需要考慮多雲架構。<!-- summary --></p>\n<h3 id=\"service-mesh-gets-boring-and-that%E2%80%99s-a-good-thing\"><a class=\"direct-link\" href=\"#service-mesh-gets-boring-and-that%E2%80%99s-a-good-thing\">#</a> <a href=\"https://thenewstack.io/service-mesh-gets-boring-and-thats-a-good-thing/\">Service Mesh Gets Boring and That’s a Good Thing</a></h3>\n<p>近期 Cloud Native Computing Foundation 調查指出 service mesh 對於組織在 microservice 和 Kubernetes 上至關重要，與此同時，寫這篇文章的 The New Stack 媒體也發現 service mesh 相關文章的讀者越來越少了，顯示出大家對這議題開始感到無聊，也代表 service mesh 漸漸變成主流的 solution。</p>\n<h3 id=\"terraform-1.2-improves-exception-handling-and-updates-to-the-cli-driven-workflow\"><a class=\"direct-link\" href=\"#terraform-1.2-improves-exception-handling-and-updates-to-the-cli-driven-workflow\">#</a> <a href=\"https://www.hashicorp.com/blog/terraform-1-2-improves-exception-handling-and-updates-to-the-cli-driven-workflow\">Terraform 1.2 Improves Exception Handling and Updates to the CLI-driven Workflow</a></h3>\n<p>Terraform 1.2 新增了三大功能，Preconditions &amp; Postconditions 的功能讓 Terraform module 可以驗證動態的 variable input，讓 module 可以更快地跳出 error 給使用者，甚至還有提供<a href=\"https://learn.hashicorp.com/tutorials/terraform/custom-conditions\">教學</a>。也新增了一些與 Terraform Cloud 相關的環境變數讓設定更彈性，另外 Terraform Cloud Run Tasks 正式 Generally Available，其功能為在 Terraform Cloud workflow 使用第三方的工具。</p>\n",
      "date_published": "2022-06-14T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/136/larry-136/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/136/larry-136/",
      "title": "第 136 期 Security 推薦文章",
      "content_html": "<h2 id=\"security\"><a class=\"direct-link\" href=\"#security\">#</a> Security</h2>\n<!-- summary -->\n<h3 id=\"implementing-two-factor-authentication-with-nodejs-and-otplib\"><a class=\"direct-link\" href=\"#implementing-two-factor-authentication-with-nodejs-and-otplib\">#</a> <a href=\"https://soshace.com/implementing-two-factor-authentication-with-nodejs-and-otplib/\">Implementing Two-Factor Authentication with NodeJS and otplib</a></h3>\n<p>看完 TOTP 2FA 的原理之後覺得很有趣，想要幫自己的服務也加上 TOTP 的功能嗎？這邊有一篇教學教你怎麼用現在的 node package otplib 來實作 TOTP，就算沒有想自己做也可以看一下，會對於 TOTP 的內部實作更有概念哦</p>\n<!-- summary -->\n<h3 id=\"%E8%81%BD%E8%AA%AA%E4%B8%8D%E8%83%BD%E7%94%A8%E6%98%8E%E6%96%87%E5%AD%98%E5%AF%86%E7%A2%BC%EF%BC%8C%E9%82%A3%E5%88%B0%E5%BA%95%E8%A9%B2%E6%80%8E%E9%BA%BC%E5%AD%98%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E8%81%BD%E8%AA%AA%E4%B8%8D%E8%83%BD%E7%94%A8%E6%98%8E%E6%96%87%E5%AD%98%E5%AF%86%E7%A2%BC%EF%BC%8C%E9%82%A3%E5%88%B0%E5%BA%95%E8%A9%B2%E6%80%8E%E9%BA%BC%E5%AD%98%EF%BC%9F\">#</a> <a href=\"https://medium.com/starbugs/how-to-store-password-in-database-sefely-6b20f48def92\">聽說不能用明文存密碼，那到底該怎麼存？</a></h3>\n<p>身為一個服務提供者，除了支援 TOTP 外，在儲存使用者密碼時也必須多注意才行，所以這邊講解了到底該用什麼方式儲存使用者的密碼，才是最安全的</p>\n<h3 id=\"%5Bsecurity%5D-ssl-%E2%80%94-https-%E8%83%8C%E5%BE%8C%E7%9A%84%E5%8A%9F%E8%87%A3\"><a class=\"direct-link\" href=\"#%5Bsecurity%5D-ssl-%E2%80%94-https-%E8%83%8C%E5%BE%8C%E7%9A%84%E5%8A%9F%E8%87%A3\">#</a> <a href=\"https://medium.com/starbugs/security-ssl-https-%E8%83%8C%E5%BE%8C%E7%9A%84%E5%8A%9F%E8%87%A3-df714e4df77b\">[Security] SSL — HTTPS 背後的功臣</a></h3>\n<p>大家都知道網站要有 HTTPS 才安全，但你知道他背後的功臣 SSL 是怎麼運作的嗎？如果你好像知道，但又有點不太確定是怎麼樣，那就趕快來讀讀文章複習一下吧～</p>\n",
      "date_published": "2022-06-14T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/136/gqsm-136/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/136/gqsm-136/",
      "title": "第 136 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"monorepo.-building-one-roof-for-your-ui-apps.\"><a class=\"direct-link\" href=\"#monorepo.-building-one-roof-for-your-ui-apps.\">#</a> <a href=\"https://sagarpreet.in/monorepo-building-one-roof-for-your-ui-apps\">Monorepo. Building one roof for your UI apps.</a></h3>\n<p>Monorepo 能夠將多個應用程式放在同一個專案中管理，還可以讓多個應用程式都會用到的元件和商務邏輯做共用，也省去了不同專案間的 package.json 包的管理成本。那這個酷東西到底該如何用呢？作者在文章裡闡述了他的導入過程，很值得一看！如果想看中文版的介紹的話，Andy 也有寫一篇文章：<a href=\"https://medium.com/starbugs/%E6%B7%BA%E8%AB%87-monorepo-%E5%B8%B6%E4%BE%86%E7%9A%84%E6%95%88%E7%9B%8A-%E4%BB%A5-turborepo-%E7%82%BA%E4%BE%8B-615fb4af5ebd\">淺談 Monorepo 帶來的效益：以 Turborepo 為例</a>。</p>\n<!-- summary -->\n<h3 id=\"%E7%82%BA%E4%BD%95-useevent-%E6%98%AF%E5%80%8B%E7%B3%9F%E7%B3%95%E7%9A%84%E6%96%B9%E6%A1%88%EF%BC%9F(%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%9C%A8%E9%80%99)\"><a class=\"direct-link\" href=\"#%E7%82%BA%E4%BD%95-useevent-%E6%98%AF%E5%80%8B%E7%B3%9F%E7%B3%95%E7%9A%84%E6%96%B9%E6%A1%88%EF%BC%9F(%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%9C%A8%E9%80%99)\">#</a> <a href=\"https://medium.com/@anokyy/%E7%82%BA%E4%BD%95useevent%E6%98%AF%E5%80%8B%E7%B3%9F%E7%B3%95%E7%9A%84%E6%96%B9%E6%A1%88-%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%9C%A8%E9%80%99-de7fc2e509e8\">為何 useEvent 是個糟糕的方案？(更好的在這)</a></h3>\n<p>自 React16 出現以來，只要 React 公布新的 hooks，總會讓各個開發者感到興奮不已，但是本篇文章的作者卻認為，這一次的 useEvent 在解決問題的同時，也帶來了更多的問題。</p>\n<h3 id=\"%E6%8E%A2%E7%A9%B6babel%E8%83%8C%E5%90%8E%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%F0%9F%A4%94\"><a class=\"direct-link\" href=\"#%E6%8E%A2%E7%A9%B6babel%E8%83%8C%E5%90%8E%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%F0%9F%A4%94\">#</a> <a href=\"https://juejin.cn/post/7108268258020556836\">探究babel背后的工作原理🤔</a></h3>\n<p>Babel 是一款 JavaScript 的編譯器，開發者可以容易地透過一些設定和插件，讓 babel 把我們的 JavaScript 編譯為相容性更高的語法，那 babel 究竟是如何對 JavaScript 做解析、編譯和產生最後的 JavaScript 呢？一起看看文章如何介紹吧！</p>\n",
      "date_published": "2022-06-14T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/135/smalltown-135/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/135/smalltown-135/",
      "title": "第 135 期 Kubernetes 推薦文章",
      "content_html": "<h2 id=\"kubernetes\"><a class=\"direct-link\" href=\"#kubernetes\">#</a> Kubernetes</h2>\n<!-- summary -->\n<h3 id=\"automate-all-the-boring-kubernetes-operations-with-python\"><a class=\"direct-link\" href=\"#automate-all-the-boring-kubernetes-operations-with-python\">#</a> <a href=\"https://betterprogramming.pub/automate-all-the-boring-kubernetes-operations-with-python-7a31bbf7a387\">Automate All the Boring Kubernetes Operations With Python</a></h3>\n<p>隨著 K8s 的普及度越來越高，大家日常工作上使用到的時間應該也越來越多，因此這篇文章介紹了如何利用 Python K8s Client Library 自動化一些日常維運 K8s 常常會做的操作</p>\n<!-- summary -->\n<h3 id=\"kubernetes-ephemeral-container-security\"><a class=\"direct-link\" href=\"#kubernetes-ephemeral-container-security\">#</a> <a href=\"https://www.cncf.io/blog/2022/05/24/kubernetes-ephemeral-container-security/\">Kubernetes ephemeral container security</a></h3>\n<p>假如你需要除錯一個 K8s Pod 但是基於安全考量不能夠在其中任意安裝除錯工具，那該如何怎麼辦呢？！好加在 Kubernetes 介紹了一個叫做 Ephemeral Container 的概念來應付此種狀況，透過這篇文章的介紹來了解如何使用此功能</p>\n<h3 id=\"don't-write-your-own-kubernetes-yaml-generator\"><a class=\"direct-link\" href=\"#don't-write-your-own-kubernetes-yaml-generator\">#</a> <a href=\"https://matduggan.com/tips-for-making-kubernetes-yaml-less-annoying/\">Don't Write Your Own Kubernetes YAML Generator</a></h3>\n<p>維運 K8s 的人其實不太需要撰寫程式，但一定會許要撰寫 YAML 檔案來對 K8s Cluster 進行配置，這篇文章在開頭便提出作者為什麼不建議使用 YAML Generator 來做這件事情，而是可以準備好簡易的 YAML 檔案之後，再透過 yq, Kustomize 去做修改，甚至可以透過 client libary 來配置 K8s Cluster</p>\n",
      "date_published": "2022-05-31T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/135/rico-135/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/135/rico-135/",
      "title": "第 135 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"how-to-create-kubernetes-yaml-manifests-quickly\"><a class=\"direct-link\" href=\"#how-to-create-kubernetes-yaml-manifests-quickly\">#</a> <a href=\"https://devopscube.com/create-kubernetes-yaml/\">How To Create Kubernetes YAML Manifests Quickly</a></h3>\n<p>你是否曾經遇過突然一時之間需要生產一個 Kubernetes YAML 做個簡單的實驗？但是靠自己記憶刻出一份完整 YAML 讓 Kubernetes API 不會報錯是有那麼一點不切實際的，所以文章介紹了一些工具可以減少人為失誤，其原理都不會很難理解，本文章還有個不錯的用途就是指令範例可以直接拿來複製貼上拿來用。<!-- summary --></p>\n<h3 id=\"kubernetes-pod-priority%2C-priorityclass%2C-and-preemption-explained\"><a class=\"direct-link\" href=\"#kubernetes-pod-priority%2C-priorityclass%2C-and-preemption-explained\">#</a> <a href=\"https://devopscube.com/pod-priorityclass-preemption/\">Kubernetes Pod Priority, PriorityClass, and Preemption Explained</a></h3>\n<p>Pod Priority 和 Pod Preemption 是大家相對少用的功能，不過可以用在確保像是 DaemonSet、logging 或金流相關的服務擁有更高的 priority，是情況也會踢除 priority 較低的 pod，這篇文章用簡單明瞭的範例和清晰的運作原理讓讀者輕鬆的理解。</p>\n<h3 id=\"17-best-linux-networking-and-troubleshooting-commands-for-beginners\"><a class=\"direct-link\" href=\"#17-best-linux-networking-and-troubleshooting-commands-for-beginners\">#</a> <a href=\"https://devopscube.com/list-linux-networking-troubleshooting-and-commands-beginners/\">17 Best Linux Networking and Troubleshooting Commands for Beginners</a></h3>\n<p>身為一位 DevOps or SRE 工程師至少要對網路的除錯工具或多或少要了解一些，這 17 個指令無非是最基本款必須要懂的，有些 protocol 可能不止一個工具支援，再加上每個環境並不是所有網路除錯工具都有，所以多熟悉一點絕不是壞事。</p>\n",
      "date_published": "2022-05-31T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/135/gqsm-135/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/135/gqsm-135/",
      "title": "第 135 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"%E4%B8%8D%E8%A6%81%E5%86%8D%E6%BB%A5%E7%94%A8css%E6%A0%B7%E5%BC%8F!important%E8%A7%84%E5%88%99%E4%BA%86\"><a class=\"direct-link\" href=\"#%E4%B8%8D%E8%A6%81%E5%86%8D%E6%BB%A5%E7%94%A8css%E6%A0%B7%E5%BC%8F!important%E8%A7%84%E5%88%99%E4%BA%86\">#</a> <a href=\"https://juejin.cn/post/7101671371993776142\">不要再滥用css样式!important规则了</a></h3>\n<p>作者在文章中用簡單的例子帶出 CSS 中的優先級，以及用表格說明該如何計算當前 CSS 對於 element 的優先級，接著再提到 !important 正確的使用情境，文章短短的很適合閱讀後再好好思考。 😂</p>\n<!-- summary -->\n<h3 id=\"the-amazing-html5-picture-element\"><a class=\"direct-link\" href=\"#the-amazing-html5-picture-element\">#</a> <a href=\"https://eke.hashnode.dev/the-amazing-html5-picture-element\">The amazing HTML5 Picture Element</a></h3>\n<p><code>picture</code> 是 HTML5 提供的元素，它提供的 media 屬性可以讓開發者在不需要寫 CSS 的狀況下，就能實現根據不同的視窗尺寸顯示圖片的功能，文章裡有簡單的 demo 可以看它呈現的效果。</p>\n<h3 id=\"35%2B-html-404-page-templates\"><a class=\"direct-link\" href=\"#35%2B-html-404-page-templates\">#</a> <a href=\"https://dev.to/stackfindover/35-html-404-page-templates-5bge\">35+ HTML 404 Page Templates</a></h3>\n<p>404 頁面在網頁開發中是很重要的存在，如果使用者不小心輸入錯網址，或是想要點進已經不存在的頁面中，都需要 404 頁面來告知。雖然大多網站的 404 頁面都會是簡單清楚的一兩行文字或圖片，但如果 404 頁面設計得像文章中列出來的特有巧思，說不定會想要特地輸入錯網址看看！ 😂</p>\n",
      "date_published": "2022-05-31T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/135/larry-135/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/135/larry-135/",
      "title": "第 135 期 Golang 推薦文章",
      "content_html": "<h2 id=\"golang\"><a class=\"direct-link\" href=\"#golang\">#</a> Golang</h2>\n<!-- summary -->\n<h3 id=\"graphql-x-go!-%E6%B7%BA%E8%AB%87-gqlgen-%E7%82%BA%E9%96%8B%E7%99%BC%E5%B8%B6%E4%BE%86%E7%9A%84%E4%BE%BF%E5%88%A9%E6%80%A7\"><a class=\"direct-link\" href=\"#graphql-x-go!-%E6%B7%BA%E8%AB%87-gqlgen-%E7%82%BA%E9%96%8B%E7%99%BC%E5%B8%B6%E4%BE%86%E7%9A%84%E4%BE%BF%E5%88%A9%E6%80%A7\">#</a> <a href=\"https://www.yuanlin.dev/posts/628c87a6113d85275a89dcba\">GraphQL x Go! 淺談 gqlgen 為開發帶來的便利性</a></h3>\n<p>為了方便開發跟管理 API，越來越多公司都導入了 GraphQL。雖然網路上很多資源都是在講怎麼用 Node.js 寫一個 GraphQL Server，但畢竟 GraphQL 只是個 query language 而已，所以在 Go 也可以輕鬆做到，而且因為 Go 本身就是強型別語言，跟 GraphQL 的 schema 整合起來也是非常輕鬆哦</p>\n<!-- summary -->\n<h3 id=\"go-code-refactoring-%3A-the-23x-performance-hunt\"><a class=\"direct-link\" href=\"#go-code-refactoring-%3A-the-23x-performance-hunt\">#</a> <a href=\"https://medium.com/@val_deleplace/go-code-refactoring-the-23x-performance-hunt-156746b522f7\">Go code refactoring : the 23x performance hunt</a></h3>\n<p>想要寫出更快的 Go code 嗎，這篇文章用了很多效能分析的方法，一步一步去進行最佳化，最後成功把程式加速了 23 倍，真的非常厲害</p>\n<h3 id=\"shell-completion-with-cobra-and-go\"><a class=\"direct-link\" href=\"#shell-completion-with-cobra-and-go\">#</a> <a href=\"https://blog.devgenius.io/shell-completion-with-cobra-and-go-c8368074d8f7\">Shell Completion with Cobra and Go</a></h3>\n<p>想要用 Go 寫一個自己的 CLI 工具嗎，那一定要來看看 Cobra 這個 library，他可以讓你輕鬆寫出有 shell completion 功能的 CLI 工具哦</p>\n",
      "date_published": "2022-05-24T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/134/smalltown-134/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/134/smalltown-134/",
      "title": "第 134 期 工作職涯 推薦文章",
      "content_html": "<h2 id=\"%E5%B7%A5%E4%BD%9C%E8%81%B7%E6%B6%AF\"><a class=\"direct-link\" href=\"#%E5%B7%A5%E4%BD%9C%E8%81%B7%E6%B6%AF\">#</a> 工作職涯</h2>\n<!-- summary -->\n<h3 id=\"many-software-companies-are-a-joke\"><a class=\"direct-link\" href=\"#many-software-companies-are-a-joke\">#</a> <a href=\"https://liou28335.medium.com/many-software-companies-are-a-joke-9f4b10378c7a\">Many software companies are a joke</a></h3>\n<p>作者在科技業寫程式二十多年，曾經在各類型的公司中工作過，他的心得就是很多的軟體工程師，尤其是在真正大公司工作的人，他們中很多的人其實只做很少的事情，所以也產生一個問題，就是你在這種工作中能學到的東西並不多，大家也都這樣覺得嗎？</p>\n<!-- summary -->\n<h3 id=\"how-i-got-a-faang-offer-without-grinding-leetcode\"><a class=\"direct-link\" href=\"#how-i-got-a-faang-offer-without-grinding-leetcode\">#</a> <a href=\"https://medium.com/@contrapasso/how-i-got-faang-offers-without-grinding-leetcode-7e556243e9ce\">How I got a FAANG offer without grinding Leetcode</a></h3>\n<p>作者表示他並未透過刷 Leetcode 考題就同時從 FAANG 收到實習和畢業 Offer，當然不是因為他已經厲害到不需要任何練習就可以通過面試，其實他很擅長寫程式，只是不擅長刷 Leetcode，為了避免自己為了刷題兒刷題最終導致降低對這個軟體領域的熱情，所以他才沒有去一直刷 Leetcode，而文章主要述說他是如何再不刷 Leetcode 的情況之下，成功獲取 FAANG  Offer 的經驗</p>\n<h3 id=\"ten-fastest-growing-apps-in-2022-(including-some-you-don%E2%80%99t-know)\"><a class=\"direct-link\" href=\"#ten-fastest-growing-apps-in-2022-(including-some-you-don%E2%80%99t-know)\">#</a> <a href=\"https://blog.curiosity.ai/ten-fastest-growing-apps-in-2022-including-some-you-dont-know-c177e46cc5f1\">Ten fastest-growing apps in 2022 (including some you don’t know)</a></h3>\n<p>這篇文章的作者介紹了在 2022 年成長最快的 Apps，分別是 Notion, TripActions, Postman, Figma, Miro, Keeper, Airtable, Fivetran, <a href=\"http://monday.com\">monday.com</a>, Gong，稍微看了一下介紹後，發現滿多都跟專案管理與協同合作相關，自己覺得應該跟這兩年來不少人都遠端工作有關係</p>\n",
      "date_published": "2022-05-24T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/134/rico-134/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/134/rico-134/",
      "title": "第 134 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"the-most-important-changes-in-kubernetes-1.24-and-why-they-matter\"><a class=\"direct-link\" href=\"#the-most-important-changes-in-kubernetes-1.24-and-why-they-matter\">#</a> <a href=\"https://www.padok.fr/en/blog/new-kubernetes-changes\">The most important changes in Kubernetes 1.24 and why they matter</a></h3>\n<p>作者幫大家重點整理了新版 Kubernetes 1.24 重要的 7 點改動。最知名的改動不外乎就是 Dockershim 正式的被移除了，雖然裡面寫 Docker 正式不能被使用，但事實上還是有辦法使用，Docker 有推出 cri-dockerd 版本，<!-- summary -->詳情可以參考我們 Starbugs 131 期寫的<a href=\"https://starbugs.dev/2022/05/03/131-may-day/\">文章推薦</a>。</p>\n<p>還有其他重要的功能如：新的 OOM metric、指定 Load Balancer 類型可以改用 LoadBalancerClass 而不是難設定的 annotation、不能指定 Load Balancer 的 IP address（即便在某些商業需求下很好用）、service account token 為了安全將開始有些限制、RuntimeClass.Overhead 正式進入 stable version 讓 pod 可以設定 cpu + memory、以及 Kubernetes 團隊決定所有 beta 的 API 都不再是預設值（得另外 enable 才行）。</p>\n<h3 id=\"my-first-honeypot\"><a class=\"direct-link\" href=\"#my-first-honeypot\">#</a> <a href=\"https://medium.com/@williamlaw2991/my-first-honeypot-f7bfb1d1079a\">My First Honeypot</a></h3>\n<p>作者自己架設了兩種 honeypot 程式來吸引網路上的攻擊並且加以分析，第一個工具 Cowrie 可以看出攻擊者會想要知道系統的基本硬體資訊如 cpu、memory 或硬碟大小等等，也會嘗試使用 Linux 常見的帳號和密碼登入，攻擊者會安裝 busybox 看能不能控制整台機器，當然想盡辦法安裝挖礦軟體也是不可少的，作者也分析攻擊者的 IP 國家位置。</p>\n<p>第二種 honeybot 工具 ADBhoney 用來模擬 Android 裝置，像是手機或電視，可以看出攻擊者也會想要安裝挖礦程式、惡意程式，攻擊者也會偷寫檔案在系統裡來判斷這台機器攻擊過了沒，並且保持挖礦或惡意程式是否運作正常。</p>\n<h3 id=\"why-run-postgres-in-kubernetes%3F\"><a class=\"direct-link\" href=\"#why-run-postgres-in-kubernetes%3F\">#</a> <a href=\"https://containerjournal.com/kubecon-cnc-eu-2022/why-run-postgres-in-kubernetes/\">Why Run Postgres in Kubernetes?</a></h3>\n<p>作者解釋普遍業界並不鼓勵直接把 Postgres 安裝在 Kubernetes，但是 Data on Kubernetes 2021 研究顯示 90% 的技術主管認為 Kubernetes 已經準備好跑 stateful 的程式，而且也可以在 Kubernetes 的各種機制上獲得好處，例如更低的災難復原時間，甚至 CICD 也可以有很好的 integration test 整合。</p>\n",
      "date_published": "2022-05-24T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/134/larry-134/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/134/larry-134/",
      "title": "第 134 期 軟體工程 推薦文章",
      "content_html": "<h2 id=\"%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B\"><a class=\"direct-link\" href=\"#%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B\">#</a> 軟體工程</h2>\n<!-- summary -->\n<h3 id=\"20-%E5%B9%B4%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E7%94%9F%E6%B6%AF%E6%89%80%E5%AD%B8%E5%88%B0%E7%9A%84-20-%E4%BB%B6%E4%BA%8B\"><a class=\"direct-link\" href=\"#20-%E5%B9%B4%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E7%94%9F%E6%B6%AF%E6%89%80%E5%AD%B8%E5%88%B0%E7%9A%84-20-%E4%BB%B6%E4%BA%8B\">#</a> <a href=\"https://blog.gcos.me/post/2022-04-03_20-things-ive-learned-in-my-20-years-as-a-software-engineer/\">20 年軟體工程生涯所學到的 20 件事</a></h3>\n<p>要成為一個更好的工程師，除了程式要寫好之外，也需要對軟體工程有相當程度的了解。這篇文章翻譯了「20 Things I’ve Learned in my 20 Years as a Software Engineer」中作者提到自己學到的東西，文章不長而且內容相當精闢，身為工程師都應該要讀一讀。</p>\n<!-- summary -->\n<h3 id=\"domain-driven-design%3A-the-first-15-years\"><a class=\"direct-link\" href=\"#domain-driven-design%3A-the-first-15-years\">#</a> <a href=\"https://facebook.com/story.php?story_fbid=10220019719351943&amp;id=1492360517\">Domain-Driven Design: The First 15 Years</a></h3>\n<p>不知道大家有沒有聽過「Domain-Driven Design: The First 15 Years」這本書，DDD 台灣社群兩年前花了時間把他翻譯成繁體中文，而且還是免費的（也可以花錢贊助他們），想了解 DDD 的話一定要來讀一讀</p>\n<h3 id=\"%E9%96%92%E8%AB%87%E8%BB%9F%E9%AB%94%E6%9E%B6%E6%A7%8B%EF%BC%9A%E4%BE%86%E7%85%AE%E7%A2%97%E6%8B%89%E9%BA%B5%E5%90%A7\"><a class=\"direct-link\" href=\"#%E9%96%92%E8%AB%87%E8%BB%9F%E9%AB%94%E6%9E%B6%E6%A7%8B%EF%BC%9A%E4%BE%86%E7%85%AE%E7%A2%97%E6%8B%89%E9%BA%B5%E5%90%A7\">#</a> <a href=\"https://medium.com/%E9%96%92%E8%AB%87%E8%BB%9F%E9%AB%94%E6%9E%B6%E6%A7%8B/%E9%96%92%E8%AB%87%E8%BB%9F%E9%AB%94%E6%9E%B6%E6%A7%8B-%E4%BE%86%E7%85%AE%E7%A2%97%E6%8B%89%E9%BA%B5%E5%90%A7-bf7c61ec8249\">閒談軟體架構：來煮碗拉麵吧</a></h3>\n<p>如果覺得直接啃 DDD 的書太硬了，可以先來看看怎麼把 Domain 融合進去拉麵裡面，有了 Domain 的概念之後，再來看 DDD 的書應該會比較能體會到作者在說什麼哦</p>\n",
      "date_published": "2022-05-24T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/134/gqsm-134/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/134/gqsm-134/",
      "title": "第 134 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"the-surprising-truth-about-pixels-and-accessibility\"><a class=\"direct-link\" href=\"#the-surprising-truth-about-pixels-and-accessibility\">#</a> <a href=\"https://www.joshwcomeau.com/css/surprising-truth-about-pixels-and-accessibility/\">The Surprising Truth About Pixels and Accessibility</a></h3>\n<p>你知道 1em 等於幾 px 嗎？如果你的答案是 16px，那你只答對一半，因為 1em 等於 16px 的情況只在於使用者或工程師沒有修改預設字體大小的時候。文章中講解關於 px 與 accessibility 之間的關係，文章很長，但推薦看看。</p>\n<!-- summary -->\n<h3 id=\"%E5%AE%A2%E8%A7%80%E8%A9%95%E5%83%B9-tailwindcss\"><a class=\"direct-link\" href=\"#%E5%AE%A2%E8%A7%80%E8%A9%95%E5%83%B9-tailwindcss\">#</a> <a href=\"https://medium.com/@nightspirit622/%E5%AE%A2%E8%A7%80%E8%A9%95%E5%83%B9-tailwindcss-af27581f6d9\">客觀評價 TailwindCSS</a></h3>\n<p>上禮拜在 Facebook 快閃了一場 <a href=\"https://tailwindcss.com/\">TailwindCSS</a> 之戰，而在這場戰爭後，有許多 TailwindCSS 的開發者也都跳出來分享自己使用的看法，以及 TailwindCSS 究竟是解決了哪些問題。</p>\n<h3 id=\"uselayouteffect-is-a-powerful-hook\"><a class=\"direct-link\" href=\"#uselayouteffect-is-a-powerful-hook\">#</a> <a href=\"https://www.telerik.com/blogs/uselayouteffect-powerful-hook\">useLayoutEffect Is a Powerful Hook</a></h3>\n<p>React 的 useLayoutEffect 相較於 useEffect 來說比較少有人注意到，大多情境使用 useEffect 就足以完成需求，因此完全沒有用過 useLayoutEffect，但你知道他們兩者的主要區別在哪裡嗎？一起看看文章介紹吧！ 🙌</p>\n",
      "date_published": "2022-05-24T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/133/smalltown-133/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/133/smalltown-133/",
      "title": "第 133 期 後端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 後端開發</h2>\n<!-- summary -->\n<h3 id=\"how-i-became-a-web3-dev-in-just-7-days-and-got-my-first-8000%24-web3-contract\"><a class=\"direct-link\" href=\"#how-i-became-a-web3-dev-in-just-7-days-and-got-my-first-8000%24-web3-contract\">#</a> <a href=\"https://blog.cryptostars.is/how-i-became-a-web3-dev-in-just-7-days-and-got-my-first-8000-web3-contract-8f554bcb5352\">How I became a Web3 dev in just 7 days and got my first 8000$ Web3 contract</a></h3>\n<p>作者從事 Full-Stack 開發將近六年，而且從來未處理過有關於區塊鏈或是 Web3，但他熱他挑戰，所以他想要分享如何用七天的時間從零知識到寫出一個 Smart Contract</p>\n<!-- summary -->\n<h3 id=\"10-books-every-senior-engineer-should-read\"><a class=\"direct-link\" href=\"#10-books-every-senior-engineer-should-read\">#</a> <a href=\"https://semaphoreci.medium.com/10-books-every-senior-engineer-should-read-a61c1917e2a7\">10 Books Every Senior Engineer Should Read</a></h3>\n<p>這篇文章介紹了十本書籍，其中包含著經典，永垂不朽或是足以改變遊戲規則的出版物，雖然主要是針對資深工程師和開發人員來著，但其實不必是資深工程師，任何對於軟體開發有興趣的人都可以從這份書單中受益，透過閱讀來加強開發技能</p>\n<ol>\n<li>Extreme Programming Explained: Embrace Change (2nd Edition) by Kent Beck</li>\n<li>Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation by Jez Humble and David Farley</li>\n<li>Remote: Office Not Required by Jason Fried and David Heinemeier Hansson</li>\n<li>The Mythical Man-Month by Frederick P. Brooks Jr.</li>\n<li>Getting Real</li>\n<li>Designing Data-Intensive Apps by Martin Kleppmann</li>\n<li>Site Reliability Engineering</li>\n<li>The Phoenix Project by Gene Kim, Kevin Behr, and George Spafford</li>\n<li>Building Microservices: Designing Fine-Grained Systems by Sam Newman</li>\n<li>Modern Software Engineering: Doing What Works to Build Better Software Faster by Dave Farley</li>\n</ol>\n<h3 id=\"better-error-handling-in-golang%3A-theory-and-practical-tips\"><a class=\"direct-link\" href=\"#better-error-handling-in-golang%3A-theory-and-practical-tips\">#</a> <a href=\"https://levelup.gitconnected.com/better-error-handling-in-golang-theory-and-practical-tips-758b90d3f6b4\">Better error handling in Golang: Theory and practical tips</a></h3>\n<p>作者介紹幾個在撰寫 Goling 時要怎麼處理錯誤的方法，並且提供了一些技巧，讓你在開發過程中更加容易處理錯誤，例如：為什麼要一再的重複 if err != nil，不要使用 panic() 而是應該要去處理錯誤才對，記得要寫 Log...等</p>\n",
      "date_published": "2022-05-17T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/133/rico-133/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/133/rico-133/",
      "title": "第 133 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"deleting-production-in-a-few-easy-steps-(and-how-to-fix-it)\"><a class=\"direct-link\" href=\"#deleting-production-in-a-few-easy-steps-(and-how-to-fix-it)\">#</a> <a href=\"https://thenewstack.io/deleting-production-in-a-few-easy-steps-and-how-to-fix-it/\">Deleting Production in a Few Easy Steps (and How to Fix It)</a></h3>\n<p>講解真實環境的災難還原之旅，起初 ArgoCD 因為 path 寫錯導致部署錯誤，而且剛好刪到最核心的業務。當下團隊直覺想到何不 revert 就好，但可惜的是該服務為 stateful 的，且 ArgoCD 會重新創建新的 instance 但會沒有使用者重要的 metadata。於是團隊開始著手災難復原，先把 backing service 裡的資料恢復（文章把相依關係和一些技巧寫的很詳細務必細讀），核心業務的服務暫時上線後先加大硬體和多開幾台應付暫時的大量流量，這趟災難復原總共花了 6 小時。<!-- summary --></p>\n<p>關於災難復原要做的好，除了平常的備份外，也要熟悉服務相依性、架構和細節才行，而且也得做事後檢討改善部署流程，像是改善生產 YAML 的方式、在生產 YAML 的時候偵測有沒有重複、把 ArgoCD 設定成不能刪除既有的 stateful 資源以及多個 ArgoCD 之間不能互相干涉彼此部署的服務。</p>\n<h3 id=\"service-mesh-at-scale%3A-how-xbox-cloud-gaming-secures-22k-pods-with-linkerd\"><a class=\"direct-link\" href=\"#service-mesh-at-scale%3A-how-xbox-cloud-gaming-secures-22k-pods-with-linkerd\">#</a> <a href=\"https://www.cncf.io/blog/2022/05/10/service-mesh-at-scale-how-xbox-cloud-gaming-secures-22k-pods-with-linkerd%EF%BF%BC/\">Service mesh at scale: How Xbox Cloud Gaming secures 22k pods with Linkerd</a></h3>\n<p>文章描述 Microsoft Xbox 如何使用 service mesh 工具 Linkerd 減少維護的人力成本（令我訝異的是原來對延遲要求甚高的遊戲也會用 service mesh），團隊一開始考慮的工具有 Istio、Linkerd、Consul Connect 和其他工具，但最後還是選擇 Linkerd，原因如下：</p>\n<ul>\n<li>容易設定 mTLS</li>\n<li>因為有 Service Mesh Interface API 所以跟其他 CNCF 專案工具有很好的整合</li>\n<li>mTLS 是從 proxy level 下手，不用特別呼叫專門的 mTLS 服務可以減少 100ms 的延遲</li>\n<li>更好的網路流量監控，而且很多功能都開箱即用</li>\n</ul>\n<h3 id=\"build-or-buy%3F-developer-productivity-vs.-flexibility\"><a class=\"direct-link\" href=\"#build-or-buy%3F-developer-productivity-vs.-flexibility\">#</a> <a href=\"https://thenewstack.io/build-or-buy-developer-productivity-vs-flexibility/\">Build or Buy? Developer Productivity vs. Flexibility</a></h3>\n<p>設計架構時應該要選怎樣的工具？雲服務還是地端？高階語言還是低階語言做開發？自架還是託管服務？自己設計工具還是使用 SaaS？文章給了一個當開發時應該選擇用 library 還是 API 當作範例參考，在選擇的過程中，其中最大的兩個原則是這個專案是否跟核心業務有關，以及這個專案是否可以透過客製化獲得商業上的成功。</p>\n",
      "date_published": "2022-05-17T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/133/larry-133/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/133/larry-133/",
      "title": "第 133 期 MongoDB 推薦文章",
      "content_html": "<h2 id=\"mongodb\"><a class=\"direct-link\" href=\"#mongodb\">#</a> MongoDB</h2>\n<!-- summary -->\n<h3 id=\"mongodb-schema-%E8%A8%AD%E8%A8%88%E6%8C%87%E5%8D%97\"><a class=\"direct-link\" href=\"#mongodb-schema-%E8%A8%AD%E8%A8%88%E6%8C%87%E5%8D%97\">#</a> <a href=\"https://blog.toright.com/posts/4483/mongodb-schema-%E8%A8%AD%E8%A8%88%E6%8C%87%E5%8D%97.html\">MongoDB Schema 設計指南</a></h3>\n<p>在使用像 MongoDB 這類 document-based 的 NoSQL 時，因為每筆資料的格式都是 JSON，而且 MongoDB 也支援很多跟 Object、Array 相關的功能，所以在設計 Schema 時會跟傳統的 SQL Database 有點不一樣，不能直接把 SQL 那套理論原封不動搬過來用哦。</p>\n<!-- summary -->\n<h3 id=\"mongodb-aggregation-%E5%84%AA%E5%8C%96\"><a class=\"direct-link\" href=\"#mongodb-aggregation-%E5%84%AA%E5%8C%96\">#</a> <a href=\"https://blog.myctw.cc/post/acdb.html\">MongoDB Aggregation 優化</a></h3>\n<p>用過 MongoDB 一陣子之後應該都會接觸到他的 aggregation，他可以把你想要做的一系列操作寫成一個落落長的 pipeline，譬如說先搜尋、統計、最後做排序。而這篇文章提到了在寫 pipeline 有一些要注意的小地方，雖然有些部分 MongoDB 會幫你最佳化，但還是要注意一下讓你的 aggregation 效能更好。</p>\n<h3 id=\"do-you-need-mongoose-when-developing-node.js-and-mongodb-applications%3F\"><a class=\"direct-link\" href=\"#do-you-need-mongoose-when-developing-node.js-and-mongodb-applications%3F\">#</a> <a href=\"https://www.mongodb.com/developer/article/mongoose-versus-nodejs-driver/\">Do You Need Mongoose When Developing Node.js and MongoDB Applications?</a></h3>\n<p>有在 Node.js 中用過 MongoDB 的人應該都知道 Mongoose 這套 ODM，他最大的好處就是可以幫你做 schema validation，讓你的資料庫不會有一堆缺值、型別錯誤的資料。但現在的 MongoDB 內建的 schema validation 也逐漸成熟了，所以下個專案也許可以考慮不需要使用 Mongoose，直接用內建的就好。</p>\n",
      "date_published": "2022-05-17T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/133/gqsm-133/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/133/gqsm-133/",
      "title": "第 133 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"state-of-css-2022\"><a class=\"direct-link\" href=\"#state-of-css-2022\">#</a> <a href=\"https://web.dev/state-of-css-2022/\">State of CSS 2022</a></h3>\n<p>作者 Adam Argyle 把在 <a href=\"https://io.google/2022/\">Google IO 2022</a> 上所講的議程內容寫成文章，文章中提到 14 個 CSS 在 2022 或之後的新功能，內容不會鑽研得太過艱澀，如果沒時間看文章也可以把議程影片當 podcast 聽，順便練習英聽 😂。</p>\n<!-- summary -->\n<h3 id=\"what-if-our-sliders-actually-slid%3F\"><a class=\"direct-link\" href=\"#what-if-our-sliders-actually-slid%3F\">#</a> <a href=\"https://www.smashingmagazine.com/2022/04/what-if-sliders-actually-slid-html-element-input-range/\">What If Our Sliders Actually Slid?</a></h3>\n<p>這篇文章適合推薦在當你覺得「每天寫的程式都好無聊」或是「工作真無趣」的時候閱讀，作者一個突發奇想想讓 range 使用起來變得有趣而進行的「Creative Coding」</p>\n<p>雖然花了好多時間研究和寫出一個看起來沒屁用的東西，但就是這一切讓 Coding 變得很有趣啊！像作者說的：「it takes a little more for us to think “outside the box” and have fun!」</p>\n<h3 id=\"hoisting-in-javascript-explained-visually-%F0%9F%94%A5-%F0%9F%98%8D\"><a class=\"direct-link\" href=\"#hoisting-in-javascript-explained-visually-%F0%9F%94%A5-%F0%9F%98%8D\">#</a> <a href=\"https://webdriphashnode.hashnode.dev/hoisting-in-javascript-explained-visually\">Hoisting in JavaScript explained visually 🔥 😍</a></h3>\n<p>把 JavaScript 內的 Hosting 行為做成動畫和程式碼的行數互相對照，不只講解了 var，還有關於用 let 及 const 在宣告時會有的 temporal dead zone。</p>\n",
      "date_published": "2022-05-17T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/132/smalltown-132/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/132/smalltown-132/",
      "title": "第 132 期 後端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 後端開發</h2>\n<!-- summary -->\n<h3 id=\"graphql-is-a-trap%3F\"><a class=\"direct-link\" href=\"#graphql-is-a-trap%3F\">#</a> <a href=\"https://xuorig.medium.com/graphql-is-a-trap-e83ca380aa8f\">GraphQL is a Trap?</a></h3>\n<p>最近在 Twitter 有個討論串爆炸了XD 主要是在討論是不是其實不需要 GraphQL 這項技術，覺得他只是圖個方便，但是對於後續維護以及效能而言都是不能說的痛，所以作者透過這篇文章把討論串裡面的留言拿出來一一討論，將其中有謬誤的部分解釋清楚提供他覺得正確的觀念，整個看完一次正反方論辯可以更了解 GraphQL XD</p>\n<!-- summary -->\n<h3 id=\"go-best-practices%3A-how-to-code-comfortably\"><a class=\"direct-link\" href=\"#go-best-practices%3A-how-to-code-comfortably\">#</a> <a href=\"https://medium.com/thirdfort/go-best-practices-how-to-code-comfortably-60118a27def8\">Go Best Practices: How to code comfortably</a></h3>\n<p>在這篇文章中，作者想要根據自己這 3~4 年來的經驗跟大家介紹三種 Go 語言的 Best Practice，主題包含 Package Layout, context 和 Table Driven Test，使用 Go 的開發者可以參考一下，不過其中關於 Package Layout 的部份，大家應該會有不同的看法，你覺得作者建議的方式是對的嗎？</p>\n<h3 id=\"after-900-leetcode-problems-here-is-what-i-learned\"><a class=\"direct-link\" href=\"#after-900-leetcode-problems-here-is-what-i-learned\">#</a> <a href=\"https://iorilan.medium.com/after-900-leetcode-problems-here-is-what-i-learned-4d39b17e0853\">After 900 leetcode problems here is what I learned</a></h3>\n<p>大家應該或多或少有聽過 leetcode 吧？！現在不管是要單純練功寫程式，或是找工作應該都會使用他才對，作者把他解決了 900 個 leetcode 的問題之後的心得濃縮起來成為這篇文章，裡面包含各種類型的演算法的簡單介紹，看過一遍之後，應該可以在解決 leetcode 問題時更有方向</p>\n",
      "date_published": "2022-05-10T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/132/rico-132/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/132/rico-132/",
      "title": "第 132 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"cdns-aren't-just-for-caching\"><a class=\"direct-link\" href=\"#cdns-aren't-just-for-caching\">#</a> <a href=\"https://jvns.ca/blog/2016/04/29/cdns-arent-just-for-caching/\">CDNs aren't just for caching</a></h3>\n<p>作者表示 CDN 不是只有 caching 而已，加快 TLS handshake、更好的網路 routing 和阻擋 DDoS 攻擊。作者對是不是 CDN 有更好的資安打上了一個問號，因為很多資安的設定都不是掌握在自己手裡而是交給 CDN 服務商。還有一點就是把 SSL 證書給 CDN 並且傳遞敏感的資訊，你無法知道使用者的資料是不是真的安全的，對此情況政府也有所顧慮。<!-- summary --><br>\n最後就是 CDN 的設定和 CDN 故障這兩點都會影響網站的可靠性，作者也希望可以找到大廠 CDN 的 SLAs 是否符合的統計數據，但都沒找到。作者也推薦大家可以看看 Cloudflare 的技術文章。</p>\n<h3 id=\"reasons-for-servers-to-support-ipv6\"><a class=\"direct-link\" href=\"#reasons-for-servers-to-support-ipv6\">#</a> <a href=\"https://jvns.ca/blog/2022/01/29/reasons-for-servers-to-support-ipv6/\">Reasons for servers to support IPv6</a></h3>\n<p>IPv6 可以解決 IPv4 address 不足的問題，但實現起來困難重重，很多時候是 ISP 並不支援。作者以很多的觀點解釋為什麼即使 IPv4 和 IPv6 可以切換自如但還是建議 server 支援 IPv6，最有趣的大概就是 Facebook 在他的 IPv6 裡面藏了 <code>face:b00c</code> 的彩蛋。</p>\n<h3 id=\"a-list-of-new(ish)-command-line-tools\"><a class=\"direct-link\" href=\"#a-list-of-new(ish)-command-line-tools\">#</a> <a href=\"https://jvns.ca/blog/2022/04/12/a-list-of-new-ish--command-line-tools/\">A list of new(ish) command line tools</a></h3>\n<p>作者在 twitter 上問有什麼新潮的 command line 工具，結果大家的回覆非常多元甚至沒聽過，於是作者整理了一份工具清單，其中有替代舊工具的新選擇、完全創新的工具、JSON/YAML/CSV 資料處理工具、grep 各種東西的工具，最後作者也有推薦他喜歡的是什麼。</p>\n",
      "date_published": "2022-05-10T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/132/larry-132/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/132/larry-132/",
      "title": "第 132 期 System Design 推薦文章",
      "content_html": "<h2 id=\"system-design\"><a class=\"direct-link\" href=\"#system-design\">#</a> System Design</h2>\n<!-- summary -->\n<h3 id=\"amazingtalker-%E7%9A%84%E5%AE%B9%E5%99%A8%E5%8C%96%E4%B9%8B%E6%97%85\"><a class=\"direct-link\" href=\"#amazingtalker-%E7%9A%84%E5%AE%B9%E5%99%A8%E5%8C%96%E4%B9%8B%E6%97%85\">#</a> <a href=\"https://medium.com/amazingtalker-tech/amazingtalker-%E7%9A%84%E5%AE%B9%E5%99%A8%E5%8C%96%E4%B9%8B%E6%97%85-9836c5f8a935\">AmazingTalker 的容器化之旅</a></h3>\n<p>AmazingTalker 這家公司隨著用戶越來越多，網站流量也隨之不斷上升，因此整個網站的系統及架構不得不做出調整。文章中有提到他們在做技術選型時是怎麼做考慮的、過程中遇到的問題也是寫得很詳細，是非常值得一讀的文章～</p>\n<!-- summary -->\n<h3 id=\"system-design-architecture-for-hotel-booking-apps\"><a class=\"direct-link\" href=\"#system-design-architecture-for-hotel-booking-apps\">#</a> <a href=\"https://medium.com/nerd-for-tech/system-design-architecture-for-hotel-booking-apps-like-airbnb-oyo-6efb4f4dddd7\">System design architecture for hotel booking apps</a></h3>\n<p>如果要做一個像是 Airbnb、Agoda 這樣的訂房網站，你會怎麼做設計呢？這邊文章的作者用架構圖來解釋他想出來的架構，雖然每個人設計出來的架構絕對都不一樣，不過還是可以參考看看別人都是怎麼做設計的</p>\n<h3 id=\"system-design-%E2%80%94-backend-for-google-photos\"><a class=\"direct-link\" href=\"#system-design-%E2%80%94-backend-for-google-photos\">#</a> <a href=\"https://mecha-mind.medium.com/system-design-backend-for-google-photos-e0abcd74dd36\">System Design — Backend for Google Photos</a></h3>\n<p>這跟上一篇有點像，不過是在講要怎麼設計 Google 相簿的後端。這篇比較特別的是他除了講架構之外，對於「各種數字」如使用者數量、照片數量、平均照片大小也有認真考慮進去，不會讓人有一種在唬爛的感覺XD</p>\n",
      "date_published": "2022-05-10T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/132/gqsm-132/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/132/gqsm-132/",
      "title": "第 132 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"you-don%E2%80%99t-need-a-ui-framework\"><a class=\"direct-link\" href=\"#you-don%E2%80%99t-need-a-ui-framework\">#</a> <a href=\"https://www.smashingmagazine.com/2022/05/you-dont-need-ui-framework/\">You Don’t Need A UI Framework</a></h3>\n<p>這篇標題滿聳動的，但是作者其實是從「客製化的設計」、「節省時間」和「可用性和可訪問性」幾個面向，逐一讓讀者去思考，真的任何時候都需要選擇 UI Framework 嗎？也許自己花在把 UI Framework 所提供的樣式，調整成自己成專案所需求樣式的時間，都早就超過直接完成需求的時間了，我想這應該也是 <a href=\"https://tailwindcss.com/\">Tailwind CSS</a> 那麼深受開發者喜愛的原因之一。</p>\n<!-- summary -->\n<h3 id=\"memoization-in-javascript\"><a class=\"direct-link\" href=\"#memoization-in-javascript\">#</a> <a href=\"https://parthasarma.hashnode.dev/memoization-in-javascript\">Memoization in JavaScript</a></h3>\n<p>在需要反覆執行一些長時間運算的方法時，我們可以自己實做一個 memoization function，去紀錄 function 在什麼參數執行下會回傳什麼結果，並在下一次以相同參數執行的時候，就不需要再重複運算，只需要直接從紀錄中找到結果直接回傳就好。這個概念也有點像Design Pattern 裡的 Proxy Pattern。</p>\n<h3 id=\"most-common-mistakes-of-(not-only)-javascript-developers\"><a class=\"direct-link\" href=\"#most-common-mistakes-of-(not-only)-javascript-developers\">#</a> <a href=\"https://blog.thecode.xyz/most-common-mistakes-of-not-only-javascript-developers#comments-list\">Most common mistakes of (not only) JavaScript developers</a></h3>\n<p>作者在文中舉出幾個剛學習 JavaScript 時會沒留意到的幾個小地方，比較常見的包含 <code>==</code> 和 <code>===</code>、<code>null</code> 的 type 是 Object 或是寫 <code>switch</code> 的時候要記得考慮 default 狀況等，算是一篇初階且容易閱讀的文章。</p>\n",
      "date_published": "2022-05-10T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/131/smalltown-131/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/131/smalltown-131/",
      "title": "第 131 期 後端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 後端開發</h2>\n<!-- summary -->\n<h3 id=\"squril%3A-generate-and-store-your-graphql-schemas\"><a class=\"direct-link\" href=\"#squril%3A-generate-and-store-your-graphql-schemas\">#</a> <a href=\"https://medium.com/@michael-a-trapani/squril-generate-and-store-your-graphql-schemas-ae38af229701\">SQuriL: Generate and Store Your GraphQL Schemas</a></h3>\n<p>GraphQL 是讓 API 對既有資料實現強大搜尋功能的語言與 Runtime，他提供了一個相對於 RESTful 的替代方案，讓開發者可以使用單一個請求來對多個資料來源獲取資料；雖然 GraphQL 的優勢顯而易見，但有許多的公司尚未將查詢語言整合到既有的技術棧當中，對於這類公司來說要採用 GraphQL 的門檻相對地高，SQuriL 就是為了解決類似問題而生的解決方案，他是一個開源的 GraphQL Schema 生成和儲存工具，可以從 PostgreSQL URI 來產生客製化且具備可以 Production 環境使用的 GraphQL Schema 給 Node.js 和 TypeScript 相容環境使用，有興趣的人可以參考這篇文章看看如何使用它</p>\n<!-- summary -->\n<h3 id=\"improving-query-performance-by-10000x\"><a class=\"direct-link\" href=\"#improving-query-performance-by-10000x\">#</a> <a href=\"https://betterprogramming.pub/improving-query-performance-by-10000x-79b84c80fbaf\">Improving Query Performance by 10000x</a></h3>\n<p>當你嘗試從系統中獲得更多資訊時，你的應用程式是不是也變得更慢了？你並不孤獨，雖然有人說過不要過早去優化系統，但在某些時候，你還是必須要花點時間去研究看看如何提高系統效能，作者所在的 Sky Ledge 最近遇到類似的問題...一個簡單的 Query 本來預期在 1 秒內就要跑完，但在 Staging 環境花了將近 30 秒才取得回應，作者後來花了兩個多小時將問題解決掉！文中巨細彌遺地慢慢解釋他怎麼用科學方式去分析找到問題的過程還滿值得參考一下的</p>\n<h3 id=\"system-design-%E2%80%94-design-a-monitoring-system\"><a class=\"direct-link\" href=\"#system-design-%E2%80%94-design-a-monitoring-system\">#</a> <a href=\"https://gongybable.medium.com/system-design-design-a-monitoring-system-f0f0cbafc895\">System Design — Design a Monitoring System</a></h3>\n<p>如何設計一個監控系統？這個問題應該滿常會在面試中被提問到，首先必須考量的點在於如何收集 Metric，是要用 Pull 或是 Push 模式，假如使用 Pull 模式的話要怎麼去設計 Exporter；而一個監控系統應該要具備擴展性，那麼要如何達成？儲存資料的 DB 要怎麼設計...等，這一連串的問題，作者用一篇文章來含括與回答，讓大家可以更清楚的理解監控系統的設計</p>\n",
      "date_published": "2022-05-03T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/131/rico-131/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/131/rico-131/",
      "title": "第 131 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"new-relic-report-shows-lots-of-java-apps-running-in-containers\"><a class=\"direct-link\" href=\"#new-relic-report-shows-lots-of-java-apps-running-in-containers\">#</a> <a href=\"https://containerjournal.com/features/new-relic-report-shows-lots-of-java-apps-running-in-containers/\">New Relic Report Shows Lots of Java Apps Running in Containers</a></h3>\n<p><a href=\"https://newrelic.com/resources/report/2022-state-of-java-ecosystem\">2022 年 New Relic 報告</a>指出許多組織 Java 服務逐漸轉換成 container，而且每個服務有變微服務的趨勢。整體而言，Java 11 佔將近 48%，然而 Java 8 依舊佔了 46%。另外 Java Development Kit（JDK）也有增加的趨勢，在 AWS 上跑的 Java 服務 JDK 佔了 22% 而 Oracle 佔了 35%，與 2020 年相比，Oracle 曾經有 75% 的佔比。<!-- summary -->除了 Java 程式本身，也討論了大型企業雖然很慢但還是有在做變化甚至從地端轉化到雲上，幸好許多 Cloud Native 工具像是 OpenTelemetry 可以幫助組織監控服務的狀態，讓企業轉化可以更順利，並且以後 Open Source 跟商用軟體混用會更盛行。</p>\n<h3 id=\"kubernetes-volume-backup-for-disaster-recovery\"><a class=\"direct-link\" href=\"#kubernetes-volume-backup-for-disaster-recovery\">#</a> <a href=\"https://medium.com/@amitabhprasad/kubernetes-volume-backup-for-disaster-recovery-56a5facee7fe\">Kubernetes volume backup for disaster recovery</a></h3>\n<p>作者解釋 Kubernetes 災難復原雖然已經有 Velero 備份 volume，但是 Velero 每次都是完整的備份，當資料越來越多時恐會影響到復圓所需的時間（RTO）。作者幫大家複習 PV、PVC、StorageClass 以及比較新的 VolumeSnapshotContent、VolumeSnapshot 和 VolumeSnapshotClass 技術概念，之後 demo 如何在兩個不同 region 的 Cluster 之間靠 snapshot 複製 volume。</p>\n<h3 id=\"dockershim-not-needed%3A-docker-desktop-with-kubernetes-1.24%2B\"><a class=\"direct-link\" href=\"#dockershim-not-needed%3A-docker-desktop-with-kubernetes-1.24%2B\">#</a> <a href=\"https://www.docker.com/blog/dockershim-not-needed-docker-desktop-with-kubernetes-1-24\">Dockershim not needed: Docker Desktop with Kubernetes 1.24+</a></h3>\n<p>自從 Kubernetes 宣布棄用 Docker 後震驚業界，社群開始考慮其他替代方案，但其實 Docker 還是有推出新的 cri-dockerd 版本，也就是使用標準的 CRI 所做的 interface，這樣 Docker 跑起來跟其他替代方案無異了，以前的流程是：</p>\n<p>kubelet -&gt; cri-dockerd -&gt; dockershim -&gt; docker</p>\n<p>新的版本則是可以不用 dockershim 了：</p>\n<p>kubelet -&gt; cri-dockerd -&gt; docker</p>\n",
      "date_published": "2022-05-03T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/131/larry-131/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/131/larry-131/",
      "title": "第 131 期 Book 推薦文章",
      "content_html": "<h2 id=\"book\"><a class=\"direct-link\" href=\"#book\">#</a> Book</h2>\n<!-- summary -->\n<h3 id=\"97-things-every-programmer-should-know\"><a class=\"direct-link\" href=\"#97-things-every-programmer-should-know\">#</a> <a href=\"https://github.com/97-things/97-things-every-programmer-should-know/blob/master/en/SUMMARY.md\">97 Things Every Programmer Should Know</a></h3>\n<p>這週要來跟大家推薦我覺得幾本很不錯的書，首先是 O'Reilly Media 出版的「程式設計人應該知道的 97 件事」，這本書一開始也是同事推薦我的，讀了之後覺得真的很不錯，裡面會講到「你應該用什麼心態來做 Refactor」、「如何選擇工具」等等很重要的問題。雖然 97 件事聽起來很多，但每件事情平均大概就兩三頁，所以有時候搭個公車捷運就可以看完一件事了，比起滑手機讀書應該有意義多了對吧～</p>\n<!-- summary -->\n<h3 id=\"%E3%80%8Aa-philosophy-of-software-design%E3%80%8B%E5%BF%83%E5%BE%97-i-%E2%80%94-%E5%AF%AB%E5%87%BA%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%BD%8E%E7%9A%84%E8%BB%9F%E9%AB%94\"><a class=\"direct-link\" href=\"#%E3%80%8Aa-philosophy-of-software-design%E3%80%8B%E5%BF%83%E5%BE%97-i-%E2%80%94-%E5%AF%AB%E5%87%BA%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%BD%8E%E7%9A%84%E8%BB%9F%E9%AB%94\">#</a> <a href=\"https://www.explainthis.io/zh-hant/blog/a-philosophy-of-software-design/part1\">《A Philosophy of Software Design》心得 I — 寫出複雜度低的軟體</a></h3>\n<p>這本 &quot;A Philosophy of Software Design&quot; 感覺也是很好看的書，但我還沒時間去看他，所以先看看別人的讀書筆記XD。一般來說當一個專案隨著時間的推移，程式碼變得越來越多時，當中也業務邏輯也會逐漸變得複雜，累積久了之後甚至會到難以修改的程度。既然如此，那要怎麼在一開始設計時就避免這種情況呢？看完這兩篇心得有興趣的話再去網路上找來看吧～</p>\n<h3 id=\"%5Bthe-effective-engineer-%E7%BF%BB%E8%AD%AF%E7%AD%86%E8%A8%98%5D-introduction\"><a class=\"direct-link\" href=\"#%5Bthe-effective-engineer-%E7%BF%BB%E8%AD%AF%E7%AD%86%E8%A8%98%5D-introduction\">#</a> <a href=\"https://medium.com/@wilsonhuang/the-effective-engineer-%E7%AD%86%E8%A8%98-introduction-885e8c575640\">[The Effective Engineer 翻譯筆記] Introduction</a></h3>\n<p>這本 &quot;The Effective Engineer&quot; 也是網路上可以找到的，他主要是在講說你要怎麼成為一個高效率的工程師（就跟書名一樣XD），像是我非常認同的一點就是「你必須不斷改善、並且熟悉你的工具」，因為你的終端機、編輯器、Git 等等都是你每天會不斷使用的工具，所以記得要把它調整到最適合你的狀態，譬如說常用的快捷鍵、設定 Alias 等等，雖然省下來的都是小小的時間，但累積起來也是非常驚人。除了個人之外，也要成為可以增進團隊效率的工程師，譬如說把一些東西寫成腳本、把新人該知道的東西寫成文件，否則每次有新進員工都要到處問半天，無形中也增加了非常多的時間成本。</p>\n",
      "date_published": "2022-05-03T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/131/gqsm-131/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/131/gqsm-131/",
      "title": "第 131 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"the-array-methods-coming-to-javascript-in-2022\"><a class=\"direct-link\" href=\"#the-array-methods-coming-to-javascript-in-2022\">#</a> <a href=\"https://hackernoon.com/the-array-methods-coming-to-javascript-in-2022\">The Array Methods Coming to JavaScript in 2022</a></h3>\n<p>在 JavaScript 裡，大部分的 array methods 都可以從原本的 array 再複製一個新的 array 出來，像是 map 或 filter 等等，這些操作都不會影響到原本的 array，不過還是有些像是 sort 或 reverse 等執行都還是會改變原有 array，為了改變這個狀況有些提案這麼誕生，且進入提案的第三階段了！</p>\n<!-- summary -->\n<h3 id=\"18-github-repositories-to-become-a-css-master-%F0%9F%8E%A8%F0%9F%A7%99%E2%80%8D%E2%99%82%EF%B8%8F\"><a class=\"direct-link\" href=\"#18-github-repositories-to-become-a-css-master-%F0%9F%8E%A8%F0%9F%A7%99%E2%80%8D%E2%99%82%EF%B8%8F\">#</a> <a href=\"https://madza.hashnode.dev/18-github-repositories-to-become-a-css-master\">18 GitHub Repositories to Become a CSS Master 🎨🧙‍♂️</a></h3>\n<p>這篇文章對於想學習 CSS 的人來說真的是大秘寶，裡面提到的 repo 都用自己的方式在講解關於 CSS 的知識、概念或技巧，那如果一個 repo 不夠看怎麼辦？文章裡可是列出了 18 個！</p>\n<h3 id=\"%E5%A4%A7%E8%8F%A0%E8%90%9D%EF%BC%9Fpinia%E5%B7%B2%E7%BB%8F%E6%9D%A5%E4%BA%86%EF%BC%8C%E5%86%8D%E4%B8%8D%E5%AD%A6%E4%BD%A0%E5%B0%B1out%E4%BA%86\"><a class=\"direct-link\" href=\"#%E5%A4%A7%E8%8F%A0%E8%90%9D%EF%BC%9Fpinia%E5%B7%B2%E7%BB%8F%E6%9D%A5%E4%BA%86%EF%BC%8C%E5%86%8D%E4%B8%8D%E5%AD%A6%E4%BD%A0%E5%B0%B1out%E4%BA%86\">#</a> <a href=\"https://juejin.cn/post/7078281612013764616\">大菠萝？Pinia已经来了，再不学你就out了</a></h3>\n<p>Pinia 是在 Vue 框架內，除了 Vuex 外的另一個 state 管理工具，在 Pinia 的 <a href=\"https://github.com/vuejs/pinia#faq\">README.md</a> 中，也直接說明了 Pinia 就是 Vuex 的後繼者，那它在使用上和 Vuex 有什麼不同呢？一起看看文章中的用法介紹和下方的留言討論吧！</p>\n",
      "date_published": "2022-05-03T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/130/smalltown-130/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/130/smalltown-130/",
      "title": "第 130 期 後端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 後端開發</h2>\n<!-- summary -->\n<h3 id=\"10-microservice-best-practices%3A-the-80%2F20-way\"><a class=\"direct-link\" href=\"#10-microservice-best-practices%3A-the-80%2F20-way\">#</a> <a href=\"https://www.simform.com/blog/microservice-best-practices/\">10 Microservice Best Practices: The 80/20 Way</a></h3>\n<p>微服務架構帶來高彈性與服務開發之間的解耦合，然後他也帶來一些挑戰，例如效率，一致性，安全...等，所以這篇文章為大家帶來 10 個 Microservice 的最佳守則，以下僅列出各個主題，文章內對於每個主題都有詳細的說明與參照</p>\n<!-- summary -->\n<ul>\n<li>使用 Domain-Driven Design(DDD) 來改善生產力</li>\n<li>使用 Single Responsibility Principle (SRP) 做出快速回應</li>\n<li>通過獨立的微服務實現微服務自我治理</li>\n<li>擁抱平行化地異步溝通方式</li>\n<li>透過容器化微服務來改善效率</li>\n<li>通過微前端來增加原生 UI 的能力</li>\n<li>透過安全的微服務來保護重要資料</li>\n<li>使用不可變的 API 來簡化平行化程式</li>\n<li>透過 DevOps 文化來提升交付速度</li>\n</ul>\n<h3 id=\"23-basic-principles-in-software-architecture\"><a class=\"direct-link\" href=\"#23-basic-principles-in-software-architecture\">#</a> <a href=\"https://azeynalli1990.medium.com/23-basic-principles-in-software-architecture-7913f109decc\">23 Basic Principles in Software Architecture</a></h3>\n<p>此篇文章介紹了 23 種軟體架構的基礎原則，例如：Dependency Inversion, Separation of Concerns, Inversion of Control, Dependency Injection...等，有些附有程式碼說明，自己覺得把這些原則都理解之後，應該可以對於設計服務，撰寫程式時避開不少冤枉路，減少技術債的產生</p>\n<h3 id=\"comments%3A-how-google-developers-write-their-comments\"><a class=\"direct-link\" href=\"#comments%3A-how-google-developers-write-their-comments\">#</a> <a href=\"https://paigeshin1991.medium.com/comments-how-google-developers-write-their-comments-5443657ecc4b\">Comments: How Google Developers write their comments</a></h3>\n<p>寫程式需要寫 Comment 這件事情從一開始學程式就一直被教導著，不過大家知道 Comment 其實有不少種類型嗎？！例如有關於法律上的，提供資訊的，說明意圖，用來澄清，警告以及 TODO，這篇文章嘗試解釋這些不同的 Comment 類型；而在回文有不少人覺得其實將變數命名妥當，程式撰寫完善就可以讓 Comment 寫的更少，甚至不需要，大家也是這樣覺得嗎？！</p>\n",
      "date_published": "2022-04-26T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/130/rico-130/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/130/rico-130/",
      "title": "第 130 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"new-wave-for-helm!\"><a class=\"direct-link\" href=\"#new-wave-for-helm!\">#</a> <a href=\"https://medium.com/wriketechclub/new-wave-for-helm-b9800733587f\">New Wave for Helm!</a></h3>\n<p>作者原本使用 helmfile 來管理 Kubernetes 的部署，也很喜歡裡面的諸多的功能，不過作者依舊尋找更好的工具。作者認為 helmwave 除了常見的 everything as code 的功能外，還有循序部署、即時追蹤 Kubernetes resources、不需要額外的工具就可以直接使用 helmwave，很多測試工具如 kube-linter、Kubeval、Pluto 都可以整合，還有一個特色就是使用體驗跟 docker-compose 很像。<!-- summary --></p>\n<h3 id=\"stop-using-branches-for-deploying-to-different-gitops-environments\"><a class=\"direct-link\" href=\"#stop-using-branches-for-deploying-to-different-gitops-environments\">#</a> <a href=\"https://medium.com/containers-101/stop-using-branches-for-deploying-to-different-gitops-environments-7111d0632402\">Stop Using Branches for Deploying to Different GitOps Environments</a></h3>\n<p>此推薦文章和下篇是同一系列，作者講述很多組織在使用 GitOps 如何在同一個 release 前進到下一個環境是大家一直探討的，因為答案有很多種，所以作者就索性說明哪些我們應該避免：</p>\n<ol>\n<li>依環境分 git branches 只適用於 legacy applications（這裡指的是傳統 git-flow），採用 trunk-based 並且用依環境用 feature flag 來控制，application code 和 configuration code 也建議放在不同 repository</li>\n<li>前進到下個環境從來不是只有 git merge 這麼簡單，兩次的 merge 都修改同一個地方時有可能會被忽略而 merge 進去了，hotfix 時的 cherry-picks 也得小心使用</li>\n<li>依照環境分 branches 不太適合 Helm/Kustomize，因為它們並不會知道 git branches、git merge 或 pull request，因為他們都是靠檔案做環境分類</li>\n</ol>\n<h3 id=\"how-to-model-your-gitops-environments-and-promote-releases-between-them\"><a class=\"direct-link\" href=\"#how-to-model-your-gitops-environments-and-promote-releases-between-them\">#</a> <a href=\"https://medium.com/containers-101/how-to-model-your-gitops-environments-and-promote-releases-between-them-ff40fd3008\">How to Model Your Gitops Environments and Promote Releases between Them</a></h3>\n<p>接續上篇，作者持續探討 GitOps 如何順利地 release 在各個環境中：</p>\n<ol>\n<li>要先了解你維護的服務</li>\n<li>五個範例來解釋每次的變更對環境的互動</li>\n<li>如何初始化新的部署</li>\n<li>對照不同環境的設定</li>\n<li>要如何 release 在不同的 GitOps 環境</li>\n<li>更改設定就要改全部的環境</li>\n<li>環境依照資料夾來分的好處</li>\n<li>如何在 GitOps 環境中使用 Helm</li>\n<li>大型組織可以考慮依環境分 repository</li>\n<li>環境分類請愛用資料夾，而非 branches</li>\n</ol>\n",
      "date_published": "2022-04-26T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/130/larry-130/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/130/larry-130/",
      "title": "第 130 期 Cloud 推薦文章",
      "content_html": "<h2 id=\"cloud\"><a class=\"direct-link\" href=\"#cloud\">#</a> Cloud</h2>\n<!-- summary -->\n<h3 id=\"aws-csa-associate-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98---s3(simple-storage-service)\"><a class=\"direct-link\" href=\"#aws-csa-associate-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98---s3(simple-storage-service)\">#</a> <a href=\"https://godleon.github.io/blog/AWS/AWS-CSA-associate-S3-part1/\">AWS CSA Associate 學習筆記 - S3(Simple Storage Service)</a></h3>\n<p>大家都用過 S3，但 S3 還分成很多 storage class，想要存取速度快又要跨區存取，那就貴，但如果只是拿來封存一些可能一輩子開不了幾次的檔案，也不要求需要時馬上拿到，那就可以用很便宜的價格存很多東西</p>\n<!-- summary -->\n<h3 id=\"%E4%B8%89%E5%8D%81%E5%A4%A9%E8%80%83%E9%81%8Eaws-ccp%E8%AD%89%E7%85%A7%EF%BC%8C%E7%9C%9F-awesome-%E7%B3%BB%E5%88%97\"><a class=\"direct-link\" href=\"#%E4%B8%89%E5%8D%81%E5%A4%A9%E8%80%83%E9%81%8Eaws-ccp%E8%AD%89%E7%85%A7%EF%BC%8C%E7%9C%9F-awesome-%E7%B3%BB%E5%88%97\">#</a> <a href=\"https://ithelp.ithome.com.tw/articles/10235699\">三十天考過AWS CCP證照，真 awesome 系列</a></h3>\n<p>如果想有系統的學習 AWS，而不是東學西學的話，我覺得這系列寫得還蠻好的。就算沒有打算考 AWS 的 CCP(Certified Cloud Practitioner) 還是可以來看</p>\n<h3 id=\"aws-vs-azure-vs-gcp%3A-comparing-the-big-3-cloud-platforms\"><a class=\"direct-link\" href=\"#aws-vs-azure-vs-gcp%3A-comparing-the-big-3-cloud-platforms\">#</a> <a href=\"https://www.bmc.com/blogs/aws-vs-azure-vs-google-cloud-platforms/\">AWS vs Azure vs GCP: Comparing The Big 3 Cloud Platforms</a></h3>\n<p>AWS、Azure 跟 GCP 是現在最大的三個雲端平台，也有各自的優缺點，所以在做選擇的時候記得先做一番比較，否則就可能會發生像我之前用 GCP，結果發現他們沒有像 AWS SES 一樣用來寄信的服務XD，只好再把架構搬到 AWS 上</p>\n",
      "date_published": "2022-04-26T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/130/gqsm-130/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/130/gqsm-130/",
      "title": "第 130 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"writing-strong-front-end-test-element-locators\"><a class=\"direct-link\" href=\"#writing-strong-front-end-test-element-locators\">#</a> <a href=\"https://css-tricks.com/front-end-test-element-locators/\">Writing Strong Front-end Test Element Locators</a></h3>\n<p>自動化測試可以寫下程式碼，讓程式碼代替人類的行為，操作你的網頁或是一個 Component，並且為所有行為下斷言，確保所有事情都如同你預期的那樣運作。文章中介紹了許多在寫測試案例時的知識，非常值得一讀！</p>\n<!-- summary -->\n<h3 id=\"css-tips\"><a class=\"direct-link\" href=\"#css-tips\">#</a> <a href=\"https://markodenic.com/css-tips/\">CSS Tips</a></h3>\n<p>作者介紹滿多只用 CSS 就能達成的網頁效果，其中包含 Typing Effect、Modals 和 Dynamic Tooltips 等等，幾乎所有例子都有附上 CodePen 的程式碼頁面。</p>\n<h3 id=\"how-to-escape-from-memory-leaks-in-javascript\"><a class=\"direct-link\" href=\"#how-to-escape-from-memory-leaks-in-javascript\">#</a> <a href=\"https://blog.logrocket.com/escape-memory-leaks-javascript/\">How to escape from memory leaks in JavaScript</a></h3>\n<p>Memory Leak 可能會造成 JavaScript 的應用程師效能低落，但在開發的時候又常常會忽略記憶體管理，這篇文章內容主要是在探討記憶體管理、Memory Leak 的類型和如何使用 Chrome 的 Devtools 尋找問題！</p>\n",
      "date_published": "2022-04-26T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/129/smalltown-129/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/129/smalltown-129/",
      "title": "第 129 期 後端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 後端開發</h2>\n<!-- summary -->\n<h3 id=\"30-coding-concepts-i-learned-after-reading-%E2%80%9Cclean-code%E2%80%9D\"><a class=\"direct-link\" href=\"#30-coding-concepts-i-learned-after-reading-%E2%80%9Cclean-code%E2%80%9D\">#</a> <a href=\"https://betterprogramming.pub/thoughts-on-clean-code-d373c0d93ea4\">30 Coding Concepts I Learned After Reading “Clean Code”</a></h3>\n<p>作者本身喜愛將自己所讀完的書給記下來，因此在讀完 Uncle Bob 所撰寫的 Clean Code 之後，將讀完此書學到的 30 個概念給整理出來，首先講述 Clean Code 的整體思想與概念，然後再深入探討這三十個概念的細節，策略與實作相關訊息，假如沒有太多時間來讀這本書的話，可以考慮花個 15 分鐘閱讀此篇整理文章</p>\n<!-- summary -->\n<h3 id=\"1%2C000%2C000-concurrent-connections\"><a class=\"direct-link\" href=\"#1%2C000%2C000-concurrent-connections\">#</a> <a href=\"https://josephmate.github.io/2022-04-14-max-connections/\">1,000,000 Concurrent Connections</a></h3>\n<p>作者最近看到不少文章有一個錯誤的觀念，述說著一台伺服器最多只能接受 65,000 個連線，作者首先提出一些證據來打臉，首先是 WhatsApp 所使用到的 Phoenix Web Framework 早就演示過可以在單一個 Port 上接受數百萬的連線，再來要是任何人假如不相信的話，可以使用簡單的 Java 在自己的機器做個實驗就可以了；但為了證實自己所說，作者還是詳細的做了個 PoC 將結果展示給大家看，結果顯示在 Mac 就可以接受到將近八萬個連線，並且將可能遇到的問題給記錄下來</p>\n<h3 id=\"cqrs-software-architecture-pattern%3A-the-good%2C-the-bad%2C-and-the-ugly\"><a class=\"direct-link\" href=\"#cqrs-software-architecture-pattern%3A-the-good%2C-the-bad%2C-and-the-ugly\">#</a> <a href=\"https://betterprogramming.pub/cqrs-software-architecture-pattern-the-good-the-bad-and-the-ugly-e9d6e7a34daf\">CQRS Software Architecture Pattern: The Good, the Bad, and the Ugly</a></h3>\n<p>Command and Query Responsibility Segregation (CQRS) 是一種專門用來將資料的讀與寫分離開來的架構，其中的 Queries 就是負責來讀取資料的模型，Commands 就是用來負責更新資料的模型；這篇文章將會詳細的介紹 CQRS 的架構，並且詳細地說明如何實作 CQRS，以及他的優缺點，跟可能會遇到的問題</p>\n",
      "date_published": "2022-04-19T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/129/rico-129/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/129/rico-129/",
      "title": "第 129 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"finding-vulnerable-info-using-google-dorks-%E2%80%94-ethical-hacking\"><a class=\"direct-link\" href=\"#finding-vulnerable-info-using-google-dorks-%E2%80%94-ethical-hacking\">#</a> <a href=\"https://infosecwriteups.com/finding-vulnerable-info-using-google-dorks-ethical-hacking-23f358117ceb\">Finding Vulnerable Info Using Google Dorks — Ethical Hacking</a></h3>\n<p>此篇撰寫了如何用 Google 搜尋引擎的特性尋找敏感的資訊，例如：鎖定檔案類型為 log 且內容含有 username 的結果，以及尋找可以直接看的公開線上鏡頭（我第一個搜尋結果可以看到塞爾維亞街頭攝影機的即時影像），其實推薦這篇不為別的，就是希望提醒大家維運系統時盡量不要把 credential 上傳到網路上啊！<!-- summary --></p>\n<h3 id=\"opentelemetry%2C-the-standardized-observability-framework-for-everyone\"><a class=\"direct-link\" href=\"#opentelemetry%2C-the-standardized-observability-framework-for-everyone\">#</a> <a href=\"https://blog.devgenius.io/opentelemetry-the-standardized-observability-framework-for-everyone-76b10c4148f7\">OpenTelemetry, the standardized observability framework for everyone</a></h3>\n<p>OpenTelemetry 算是在業界引起了一波浪潮，其提供完整的 APIs、SDKs、工具和整合讓 tracing、metrics 和 logs 可以得到更好地整合。作者分享自己整合 jaeger 和 datadog 的經驗和 demo，另外作者也有把 demo code 上傳到 Github 上，有興趣的可以照著文章的步驟做。</p>\n<h3 id=\"how-to-generate-terraform-code-with-opta\"><a class=\"direct-link\" href=\"#how-to-generate-terraform-code-with-opta\">#</a> <a href=\"https://blog.runx.dev/how-to-generate-terraform-code-with-opta-f255f71c73d3\">How to Generate Terraform Code with Opta</a></h3>\n<p>作者介紹 Opta 是以 Terraform 為底層做抽象化封裝，與之相比 Terraform 太多底層的細節要注意，在建造 infrastructure 堆積木的過程中很容易有設定錯誤的情況發生。反之，向 Opta 表示意圖並且產出 Terraform files 之後也可以對 Terraform files 做細節的調整，相比之下使用 Opta 是比較人性化的。不過此專案還算早期，抽象化的封裝還不夠多而且都以 AWS 為主，但可以看得出來團隊很認真經營社群，slack channel 都還算活躍。</p>\n",
      "date_published": "2022-04-19T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/129/larry-129/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/129/larry-129/",
      "title": "第 129 期 MongoDB 推薦文章",
      "content_html": "<h2 id=\"mongodb\"><a class=\"direct-link\" href=\"#mongodb\">#</a> MongoDB</h2>\n<!-- summary -->\n<h3 id=\"%E8%A9%B2%E7%94%A8-mysql-%E6%88%96-mongodb%EF%BC%9F%E9%81%B8%E6%93%87%E8%B3%87%E6%96%99%E5%BA%AB%E5%89%8D%E4%BD%A0%E8%A9%B2%E4%BA%86%E8%A7%A3%E7%9A%84%E4%BA%8B\"><a class=\"direct-link\" href=\"#%E8%A9%B2%E7%94%A8-mysql-%E6%88%96-mongodb%EF%BC%9F%E9%81%B8%E6%93%87%E8%B3%87%E6%96%99%E5%BA%AB%E5%89%8D%E4%BD%A0%E8%A9%B2%E4%BA%86%E8%A7%A3%E7%9A%84%E4%BA%8B\">#</a> <a href=\"https://tw.alphacamp.co/blog/mysql-and-mongodb-comparison\">該用 MySQL 或 MongoDB？選擇資料庫前你該了解的事</a></h3>\n<p>在剛開始學習使用資料庫時，第一個會先碰到的問題就是要使用 MySQL/PostgreSQL 還是 MongoDB，但要使用什麼資料庫跟你的應用場景其實有很大的關係，如果還不知道怎麼選的話來看看這篇的分析吧</p>\n<!-- summary -->\n<h3 id=\"mongodb-%E4%B8%8D%E6%87%82-esr-%E5%88%A5%E8%AA%AA%E4%BD%A0%E6%9C%83%E7%94%A8-index-!!\"><a class=\"direct-link\" href=\"#mongodb-%E4%B8%8D%E6%87%82-esr-%E5%88%A5%E8%AA%AA%E4%BD%A0%E6%9C%83%E7%94%A8-index-!!\">#</a> <a href=\"https://blog.myctw.cc/post/d50d.html\">MongoDB 不懂 ESR 別說你會用 Index !!</a></h3>\n<p>在 MongoDB 中進行 query 時，如果希望盡量吃到 index，那在設計 index 以及進行搜尋、排序時就要遵守 ESR(Equality, Sort, Range) 原則，但不知道為什麼這個原則並沒有寫在官方文件裡XD，所以如果你有在用 MongoDB 卻沒聽過 ESR 的話趕快來這邊補一下</p>\n<h3 id=\"getting-started-with-mongodb-explain()\"><a class=\"direct-link\" href=\"#getting-started-with-mongodb-explain()\">#</a> <a href=\"https://www.dbkoda.com/blog/2017/11/12/MongoDBExplain\">Getting started with MongoDB explain()</a></h3>\n<p>在使用資料庫時，為了加快搜尋的速度我們都會使用 index，但怎麼知道你建立的 index 是不是真的有被吃進去呢，總不能憑感覺吧，所以這時候就要把 explain 請出來，看看 Mongo 是不是真的有照你想的去使用建出來的 index</p>\n",
      "date_published": "2022-04-19T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/129/gqsm-129/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/129/gqsm-129/",
      "title": "第 129 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"css-parent-selector\"><a class=\"direct-link\" href=\"#css-parent-selector\">#</a> <a href=\"https://ishadeed.com/article/css-has-parent-selector/\">CSS Parent Selector</a></h3>\n<p>你有曾經想要去確認過是不是有某個特定的 element 包含在 parent 之中嗎？這邊要介紹的 :has 就能讓你判斷這件事情，作者在文章裡先是描述了網頁排版中會遇到的狀況，並以 :has 來解決。可惜的是 :has 在瀏覽器之間還沒有很高的支援，這點是要注意的地方！</p>\n<!-- summary -->\n<h3 id=\"javascript--iterators-and-generators\"><a class=\"direct-link\" href=\"#javascript--iterators-and-generators\">#</a> <a href=\"https://towardsdev.com/javascript-iterators-and-gen-9e14133b57c5\">Javascript -Iterators and Generators</a></h3>\n<p>作者介紹 JavaScript 中的 iterators 和 generators 方法，記得之前面試的時候，就有被考過 iterators 的概念，以及如何在不用 Array、也不使用多餘空間（例如宣告 100 個 index 的 array，或是 100 個 key 的 object）的情況下，用 for...of 跑過 1-100 執行，當時的答案就是使用 generators</p>\n<h3 id=\"those-html-elements-you-never-use-%F0%9F%8C%9A%F0%9F%95%B5%F0%9F%8F%BF\"><a class=\"direct-link\" href=\"#those-html-elements-you-never-use-%F0%9F%8C%9A%F0%9F%95%B5%F0%9F%8F%BF\">#</a> <a href=\"https://dev.to/eludadev/those-html-elements-you-never-use-16bi\">Those HTML Elements You Never Use 🌚🕵🏿</a></h3>\n<p>又到了稀有 HTML 標籤的介紹時間了，作者列出了超過十個你可能沒看過的 HTML 標籤，雖然有些功能我們已經透過 UI Framework 使用很久了，但默默地 HTML 也偷偷追了上來。</p>\n",
      "date_published": "2022-04-19T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/128/smalltown-128/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/128/smalltown-128/",
      "title": "第 128 期 後端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 後端開發</h2>\n<!-- summary -->\n<h3 id=\"how-to-design-a-system-to-scale-to-your-first-100-million-users\"><a class=\"direct-link\" href=\"#how-to-design-a-system-to-scale-to-your-first-100-million-users\">#</a> <a href=\"https://levelup.gitconnected.com/how-to-design-a-system-to-scale-to-your-first-100-million-users-4450a2f9703d\">How to design a system to scale to your first 100 million users</a></h3>\n<p>如何設計一個可以服務增加到 1 億使用者的系統？作者使用很淺顯易懂的例子，跟精美的架構圖，一步一步帶著使用者去理解怎麼設計出一個可以服務 一億個使用者的系統，大概會提到的範圍如下：</p>\n<!-- summary -->\n<ul>\n<li>首先從把所有的東西都塞在同一台機器裡面為例</li>\n<li>分析什麼叫做 Scaling Out 與 Scaling Up</li>\n<li>解釋為什麼要把 Web Server 和 Database 拆開來</li>\n<li>如何讓 Web Server 可以達成 Scaling Out</li>\n<li>如何讓 Database 可以達成 Scaling Out</li>\n<li>怎麼去選擇 NoSQL 或是 SQL</li>\n<li>最後提到怎麼去利用 CDN 來幫助自己的系統服務使用者</li>\n</ul>\n<h3 id=\"7-tools-for-visualizing-a-codebase\"><a class=\"direct-link\" href=\"#7-tools-for-visualizing-a-codebase\">#</a> <a href=\"https://lmy.medium.com/7-tools-for-visualizing-a-codebase-41b7cddb1a14\">7 tools for visualizing a codebase</a></h3>\n<p>想要撰寫文件但是卻不知道該從何開始嗎？假如有這樣困擾的話，可以考慮直接在文件中加入圖片，畢竟有圖有真相 😂 而此篇文章的作者推薦了幾個可以從程式碼或是組態，直接視覺化的工具</p>\n<ul>\n<li>docker-compose-viz: 將 docker-compose.yml 檔案轉換成圖片</li>\n<li>Code2flow: 將 Python, Javascript, Ruby 和 Ruby 程式碼內函式的呼叫關係轉換成圖片</li>\n<li>pycallgraph, pyan: 跟 Code2flow 一樣的功能，但是特別針對 Python 語言做處理</li>\n<li>Bazel: 他是一個用來 Build Java, C++, Go, ANdroid, iOS...等其他語言的工具，而他剛他剛好也可以將程式與其使用到的函式庫相依性用視覺化呈現出來</li>\n<li>pipdeptree: 跟 Bazel 可以達到同樣的效果，不過是針對 Python 語言</li>\n<li>depgraph-maven-plugin: 跟 Bazel 可以達到同樣的效果，不過是針對使用 Maven 的 Java 程式</li>\n<li>Gource, CodeSee: 假如不是想要撰寫文件，只是想要快速瞭解某個 Code Repo的話，可以試試看這兩個工具</li>\n</ul>\n<h3 id=\"6-algorithms-every-developer-should-know\"><a class=\"direct-link\" href=\"#6-algorithms-every-developer-should-know\">#</a> <a href=\"https://medium.com/dare-to-be-better/6-algorithms-every-developer-should-know-f78b609c7e7c\">6 Algorithms Every Developer Should Know</a></h3>\n<p>作者自己並不是一個很喜愛研究資料結構和演算法的工程師，但他現在在他的工作生涯中經歷過的大大小小專案之後，發現有 6 個演算法是每個工程師都應該要知道的，因為這 6 個演算法幾乎可以解決開發流程中的每個問題，每個演算法的詳細介紹可以參閱內文</p>\n<ul>\n<li>Sorting Algorithm (排序演算法)</li>\n<li>Searching Algorithm (搜尋演算法)</li>\n<li>Dynamic Programming (動態規劃)</li>\n<li>Recursion Algorithm (遞迴演算法)</li>\n<li>Divide and Conquer (分治法)</li>\n<li>Hashing (雜湊函式)</li>\n</ul>\n",
      "date_published": "2022-04-12T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/128/rico-128/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/128/rico-128/",
      "title": "第 128 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"camel-k-%E2%80%94-%E2%80%9Ccontainerless%E2%80%9D-deployments-on-kubernetes\"><a class=\"direct-link\" href=\"#camel-k-%E2%80%94-%E2%80%9Ccontainerless%E2%80%9D-deployments-on-kubernetes\">#</a> <a href=\"https://itnext.io/camel-k-containerless-deployments-349da12bfa9d\">Camel K — “Containerless” Deployments on Kubernetes</a></h3>\n<p>Camel 是一款幾乎可以整合所有系統跟服務的輕量整合框架，而 Camel K 則是專門用在 Kubernetes 上的套件，只要 developer 寫好 code 邏輯就可以直接部署上 Kubernetes 裡面，不用特別定義 container image 或寫 Kubernetes yaml，減少開發人員驗證想法的時間。<!-- summary -->雖然文章的標題寫說 containerless，但跟 serverless 的想法也很雷同，總體而言，該工具或許值得一試。</p>\n<h3 id=\"version-control-and-artifact-management\"><a class=\"direct-link\" href=\"#version-control-and-artifact-management\">#</a> <a href=\"https://rickhw.github.io/2022/04/06/SoftwareEngineering/Artifact-Management-and-Version-Control/\">Version Control and Artifact Management</a></h3>\n<p>作者討論了關於 CICD 源頭的分支策略，與 CI 與 CD 中間 Artifact Management 的關係。分支策略會影響到 pipeline 複雜度，作者提到很多眉角需要去思考怎麼設計最好，打包 artifact 也建議使用 semantic versioning。萬變不離其宗的是，設計這些 pipeline 還是要給團隊使用的，必須隨時接受成員們的 feedback。</p>\n<h3 id=\"mobile-devops%3A-code-signing-ios-apps-automatically\"><a class=\"direct-link\" href=\"#mobile-devops%3A-code-signing-ios-apps-automatically\">#</a> <a href=\"https://hackernoon.com/mobile-devops-code-signing-ios-apps-automatically\">Mobile DevOps: Code Signing iOS Apps Automatically</a></h3>\n<p>對於 Apple iOS 生態的 CICD pipeline 的設計每個團隊都不同，有些人會直接拿 Mac 直接跑，有些直接使用 SaaS 服務，而 Bitrise 是蠻不錯的平台，使用者體驗對開發人員都很好。本篇文章以大量的 gif 圖介紹 iOS code singing 的原理以及如何設定。</p>\n",
      "date_published": "2022-04-12T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/128/gqsm-128/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/128/gqsm-128/",
      "title": "第 128 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"33-javascript-concepts-every-developer-should-know-%F0%9F%A4%93%EF%B8%8F%F0%9F%92%AF%EF%B8%8F\"><a class=\"direct-link\" href=\"#33-javascript-concepts-every-developer-should-know-%F0%9F%A4%93%EF%B8%8F%F0%9F%92%AF%EF%B8%8F\">#</a> <a href=\"https://dev.to/eludadev/33-javascript-concepts-every-beginner-should-know-with-tutorials-4kao\">33 JavaScript Concepts Every Developer Should Know 🤓️💯️</a></h3>\n<p>作者精心列出 33 個在 JavaScript 中常會出現的一些名詞、方法、原理或是問題，每個項目下都有簡單的說明和更詳細的教學文章連結，如果有時間的話可以再確認一下，看看有沒有自己不小心忽略的部分。</p>\n<!-- summary -->\n<h3 id=\"ui-design-principles\"><a class=\"direct-link\" href=\"#ui-design-principles\">#</a> <a href=\"https://acetech.hashnode.dev/ui-design-principles\">UI Design Principles</a></h3>\n<p>文章中以表達是否明確、熟悉的介面、一致性、內部控制、最小化使用者的負擔和簡約的設計，這 6 個原則讓你去思考該如何設計出友善的 UI。</p>\n<h3 id=\"web-design-principles\"><a class=\"direct-link\" href=\"#web-design-principles\">#</a> <a href=\"https://blog.devgenius.io/web-design-principles-with-examples-b3fb9c622e57\">Web design principles</a></h3>\n<p>作者從顏色、字體、佈局等角度切入設計，並比較各種設計、佈局和 UI 的差別，解釋為什麼在不同的情境下會這樣選擇，以及這麼做的特點在哪裡。文章中包含非常多的圖片，內容也很棒！</p>\n",
      "date_published": "2022-04-12T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/127/smalltown-127/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/127/smalltown-127/",
      "title": "第 127 期 後端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 後端開發</h2>\n<!-- summary -->\n<h3 id=\"whatsapp-system-architecture\"><a class=\"direct-link\" href=\"#whatsapp-system-architecture\">#</a> <a href=\"https://medium.com/interviewnoodle/whatsapp-system-architecture-8df0250d572f\">WhatsApp System Architecture</a></h3>\n<p>WhatsApp 是在歐美相當普遍的即時通訊軟體，幾乎人人都會使用到，假如要設計這麼樣的一個即時通訊軟體服務要怎麼做呢？首先類似的聊天系統其實分成兩大類，一類是像 Facebook Messenger 會永遠儲存所有的聊天訊息，另外一類是像 WhatApp 一旦訊息被使用者接收後，就會從系統端被移除掉，知道這個最主要的不同點之後，作者開始做主要功能需求分析，例如：支援 1 對 1 聊天，支援離線傳送訊息，支援傳送訊息給離線使用者，支援群組聊天...等</p>\n<!-- summary -->\n<p>並且根據這些需求將約略的系統元件架構圖給勾勒出來，緊接著開始最精彩的部分，針對每一個系統元件去做分析，從 Profile 資料庫與服務，負責 Mapping 的資料庫，Group 服務，訊息儲存的機器跟資料庫，多媒體訊息的處理機制，然後在不同的前端平台與後端各自需要哪一些語言或是作業系統，都條列出來，最後再繪製出更完整詳細的系統架構圖，整篇文章是一個很完整的系統逆向工程，感覺是要成為一個架構師的必備技能！</p>\n<h3 id=\"how-to-become-a-blockchain-developer\"><a class=\"direct-link\" href=\"#how-to-become-a-blockchain-developer\">#</a> <a href=\"https://python.plainenglish.io/how-to-become-a-blockchain-developer-1b5090e56420\">How to Become a Blockchain Developer</a></h3>\n<p>最近讀到不少新聞指出矽谷很多大企業員工都紛紛跳槽到跟 Web 3.0 相關的產業，畢竟這可能是下一個網路世界變革的前哨戰，其中的區塊鏈產業或是部門也在各大企業挖角中，薪水也都開得不錯，不過假如想要成為一名區塊鏈工程師一起往 Web 3.0 的世界前進的話， 會需要具備什麼樣的能力呢？</p>\n<p>其實區塊鏈工程師還可以分成兩類，一類是區塊鏈核心開發人員，負責研究，設計和開發架構面，安全面和底層協議，或是其他與區塊鏈相關的技術，基本上會是負責監督整個區塊鏈網路的角色；另外一類是區塊鏈軟體開發人員，他們負責開發去中心化應用程式 (DApps)，網路應用服務和智能合約，所以建議需要從幾個特定領域開始著手學習起，包含 Blockchain 架構，資料結構，密碼學，智能合約和網路應用程式，對於成為區塊鏈工程師有興趣的話，可以參閱詳細文章內容</p>\n<h3 id=\"how-to-use-ssh-config-file-to-boost-your-productivity\"><a class=\"direct-link\" href=\"#how-to-use-ssh-config-file-to-boost-your-productivity\">#</a> <a href=\"https://betterprogramming.pub/use-ssh-config-file-to-boost-your-productivity-b3867ce8cbfe\">How to Use SSH Config File to Boost Your Productivity</a></h3>\n<p>現今的工作環境避不掉需要連接很多的遠端機器，有可能是要部署，管理或是為程式碼除錯，而隨著連接機器數量的上升，越來越不可能將所有的 IP, Port 跟 Credential 存放位置給通通記住，這時候就需要依靠 SSH Config File 來解決這個問題。一般來說要透過 SSH 登入某一台機器時的指令會類似底下這樣：</p>\n<pre><code>ssh -i ~/.ssh/smalltown.pem ubuntu@10.1.2.3.4\n</code></pre>\n<p>不過透過妥善設置的 SSH Config File 可以讓你的登入指令更加簡單，使用者就不再需要去記得要使用什麼 IP, Port, Credential 等等，而只要輸入目標名稱就可以了</p>\n<pre><code>#  登入指令\nssh smalltown\n</code></pre>\n<pre><code># SSH Config File\nHost smalltown\n  HostName 10.1.2.3.4\n  User ubuntu\n  IdentityFile ~/.ssh/smalltown.pem\n</code></pre>\n<p>而 SSH Config File 還可以透過類似正規表示式來設定，例如使用 * 來代表多個字元，？ 來代表單一字元，！代表不符合的字元，例如可以設定 Alpha 的機器要使用什麼樣的使用者名稱與 Credential，Production 的 Log Level 要是什麼...等，隨自己的需求組合出適合自己的 SSH Config File，讓自己事半功倍，更多詳細的資訊可以參閱內文</p>\n",
      "date_published": "2022-04-05T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/127/rico-127/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/127/rico-127/",
      "title": "第 127 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"cncf-argo-project-2022-user-survey-results\"><a class=\"direct-link\" href=\"#cncf-argo-project-2022-user-survey-results\">#</a> <a href=\"https://blog.argoproj.io/cncf-argo-project-2022-user-survey-results-f9caf46df7fd\">CNCF Argo Project 2022 User Survey Results</a></h3>\n<p>作者帶大家看 CNCF 2022 年使用者對 Argo 專案的社群回饋報告，樣本數為 147 份，其中 92 份來自 CD/Rollouts，55 份為 Workflows/Events：</p>\n<!-- summary -->\n<p>Argo CD/Rollouts：</p>\n<ul>\n<li>所有的調查回覆中有 80% 已經把 Argo CD 用於生產環境超過 6 個月</li>\n<li>NPS 分數（Net Promoter Score，調查的方法類似為 0-10 分你有多推薦 Argo CD）為 74，比去年還多 4 分</li>\n</ul>\n<p>Argo Workflows/Events</p>\n<ul>\n<li>所有的調查回覆中有 75% 已經把 Argo Workflows 用於生產環境，50% 表示在生產環境超過 6 個月</li>\n<li>NPS 分數落在 48 分</li>\n</ul>\n<p>另外也有描寫什麼角色會使用這些工具、生產環境的詳細使用時間、使用數量、生態等等。</p>\n<h3 id=\"why-let%E2%80%99s-encrypt-is-a-really%2C-really%2C-really-bad-idea%E2%80%A6\"><a class=\"direct-link\" href=\"#why-let%E2%80%99s-encrypt-is-a-really%2C-really%2C-really-bad-idea%E2%80%A6\">#</a> <a href=\"https://medium.com/swlh/why-lets-encrypt-is-a-really-really-really-bad-idea-d69308887801\">Why Let’s Encrypt is a really, really, really bad idea…</a></h3>\n<p>Let’s Encrypt 雖然方便，但其實當全世界的網站把雞蛋放在同一個籃子裡是有風險的，在資安的角度來看，CAs 的碎片化——也就是說憑證散落在各個供應商是件好事，而非 bug 一樣的存在。如果想要改善的話可以從三點著手：</p>\n<ol>\n<li>網站架設完就完全不用煩惱憑證的方案是不存在的，盡量避免「免費」或「方便」的方案</li>\n<li>要注意憑證商負責保護網站的哪些部分，且使用憑證供應商的工具發出 CSR（certificate signing request）</li>\n<li>可以考慮向憑證供應商保保險</li>\n</ol>\n<h3 id=\"3-must-haves-when-implementing-devsecops\"><a class=\"direct-link\" href=\"#3-must-haves-when-implementing-devsecops\">#</a> <a href=\"https://devops.com/3-must-haves-when-implementing-devsecops/\">3 Must-Haves When Implementing DevSecOps</a></h3>\n<p>DevSecOps 這個詞已經不陌生了，但實踐時要注意哪些呢？作者講解和秀出例子來佐證 DevSecOps 的重要性，並表示要順利的導入組織必須要有三大要點，教育、流程和工具都要到位才行。</p>\n",
      "date_published": "2022-04-05T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/127/gqsm-127/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/127/gqsm-127/",
      "title": "第 127 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"react-v18.0\"><a class=\"direct-link\" href=\"#react-v18.0\">#</a> <a href=\"https://reactjs.org/blog/2022/03/29/react-v18.html\">React v18.0</a></h3>\n<p>React v18 在上禮拜出現後就在 React 生態圈中鬧得沸沸揚揚的，究竟在 React 升級到 18 後會出現了哪些酷東西？其中包含了 <a href=\"https://reactjs.org/blog/2022/03/29/react-v18.html#new-feature-automatic-batching\">Automatic Batching</a>、<a href=\"https://reactjs.org/blog/2022/03/29/react-v18.html#new-feature-automatic-batching\">Transitions</a> 還有新的 <a href=\"https://reactjs.org/blog/2022/03/29/react-v18.html#new-hooks\">Hooks</a> 等更多功能，一起看看官網如何介紹吧！</p>\n<!-- summary -->\n<h3 id=\"understanding-layout-algorithms\"><a class=\"direct-link\" href=\"#understanding-layout-algorithms\">#</a> <a href=\"https://www.joshwcomeau.com/css/understanding-layout-algorithms/\">Understanding Layout Algorithms</a></h3>\n<p>作者介紹了 CSS 的幾種排版的結構（像是 Flexbox、Positioned、Grid 等），每個算法都有自己的規則和機制，但如果我們只去了解特定的語法在做什麼事情是不夠的，因為有些屬性會因為一些微妙的父層佈局而改變行為。</p>\n<h3 id=\"5-coding-interview-questions-i-hate\"><a class=\"direct-link\" href=\"#5-coding-interview-questions-i-hate\">#</a> <a href=\"https://thoughtspile.github.io/2022/03/21/bad-tech-interview/\">5 coding interview questions I hate</a></h3>\n<p>在面試中，總是會出現一堆在平時工作上幾乎不會遇見的問題。這作者在經歷了超過百次的面試後，列出了五個它認為根本沒有任何技術含量的技術問題。對求職者來說，你無法改變你會遇到的這些問題，但還是要準備承認這些你不了解的部分，並陳述在你了解的區塊是如何運作的。</p>\n",
      "date_published": "2022-04-05T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/126/smalltown-126/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/126/smalltown-126/",
      "title": "第 126 期 後端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 後端開發</h2>\n<!-- summary -->\n<h3 id=\"multi-tenant-application\"><a class=\"direct-link\" href=\"#multi-tenant-application\">#</a> <a href=\"https://levelup.gitconnected.com/multi-tenant-application-a29153d31c5a\">Multi-Tenant Application</a></h3>\n<p>所謂的 Multi-Tenancy 概念就是眾多的使用者在看不到彼此資料的前提之下，一起分享運算資源，網路和儲存裝置，所以 Multi-Tenancy 應用程式必須讓每一群使用者 (或稱為 Tenant) 可以去客製化，但是整個架構和核心功能仍然保持一致，所以 Multi-Tenancy 也是 SaaS 廠商常常採用的方式，讓資源利用達到最大化</p>\n<!-- summary -->\n<p>💡 使用案例<br>\n以 Multi-Tenant 的架構來說通常適合下列的應用情境：<br>\n👉 ＳaaS (software as a service) 或是  AaaS (application as a service)<br>\n👉 PaaS (platform as a service)<br>\n👉 IaaS (infrastructure as a service)<br>\n👉 對於那種擁有眾多 Client 且都使用相同演算法推疊起來的應用服務，也就是說主要的功能都一樣或是已經模組化，而且可以滿足不同使用者的需求</p>\n<p>💡 Multi-Tenant vs. Single-Tenant<br>\n為了更深入了解，讓我們來了解 Multi-Tenant 和 Single-Tenant 兩者分別是如何運行的</p>\n<p>👉 Single-Tenant: 每個使用者獲得專用的運算，網路和儲存資源，每個環境都是獨立開發與管理，本質上來說就是不允許共享任何的資源<br>\n👉 Multi-Tenant: 允許在同一個環境中服務多個客戶且重複使用程式的核心功能，每個 Tenant 都是隔離且無法看到彼此，同一個環境的資源只有在邏輯上是切開的，實體上是共享的，好處是可以簡化安全性上的管理，更容易負擔的 Licensing 授權，將時間投資在彼此共用的核心功能上，而不是去開發很多功能不同且分歧的程式</p>\n<p>💡 不同的 Multi-Tenancy 資料庫管理方式</p>\n<p>👉 Single Database + Single Schema:<br>\nTenant 間資料的隔離是這種作法最需要注意的地方，可能可以使用例如 TeantID 或是 ClientID 的 Database Index 來讓資料具有隔離的效果<br>\n😊 好處: 跟其他方式比起來維護相對容易，可以任意增加新的客戶<br>\n😢 壞處: 對於需要不同資料使用方式的客戶來說彈性太低，會需要為了非典型客戶特別去做特別的修補；需要耗費很大的心力去妥善分離資料庫使用權限，然後再備份和還原時也會遇到問題，因為所有客戶的資料都混合在一起，所以無法擁有個別政策</p>\n<p>👉 Single Database + Multiple Schemas: 利用多個 Table 來拆分不同客戶的資料，Schema 變得像是 Namespace 一樣包含特定的 Table, Procedure 和權限<br>\n😊 好處: Schema 在 DBMS 層級上算是達成安全地共享存取，只需擁有少數的資料庫，意味著更少的硬體資源，彈性相對高，假如需要新的 Schema，可以根據既有的去建立起來，再根據需求做客製化即可<br>\n😢 壞處: 不同客戶的資料還是存放在一起，因為只是邏輯性的隔離而不是物理性，因此再備份和還原上還是會遭遇問題，因為只有一個資料庫，假如其中有什麼東西壞掉了，所有在資料庫中的東西就必須跟著一起恢復到正常時的狀態，但裡面有不同客戶的資料，這樣是不可被接受的，所以管理者可能會需要合併新舊資訊，這可能不是那麼地簡單</p>\n<p>👉 Separate Databases: 多個資料庫的模式可以達成程式碼和資料在觀念上是共享 (透過共同的使用者介面和商業邏輯)，但在不同的客戶之間是實體分離<br>\n😊 好處: 增加一個新的客戶時，只需要設定一組新的資料庫；當不同的客戶擁有自己的 Database 時，要擴展也相對容易，要針對不同的客戶去做客製化也容易，再備份和還原也不用擔心上面遇到的問題<br>\n😢 壞處: 成本昂貴！在硬體和管理層面上都是</p>\n<h3 id=\"1-min-guide-to-golang-development-best-practices-in-2022\"><a class=\"direct-link\" href=\"#1-min-guide-to-golang-development-best-practices-in-2022\">#</a> <a href=\"https://blog.canopas.com/1-min-guide-to-golang-development-best-practices-in-2022-b50d846fd6c\">1 min guide to Golang development best practices in 2022</a></h3>\n<p>推薦一篇不錯的小品，作者希望用最短的時間讓讀者快速了解在 2022 的當下，開發 Golang 時必使用的函示庫和最重要的小事，讓 Golang 開發者天天擁有高效率與簡易的開發人生 😊</p>\n<ol>\n<li>熟悉如何使用 Go Modules 來管理 Golang 套件相依性</li>\n<li>使用 Gin 來構建 Web API</li>\n<li>透過 Repository Structure 來避免濫用全域變數</li>\n<li>利用 SQLX 來完成資料庫查詢作業</li>\n<li>一定要在 API 加上認證機制</li>\n<li>使用 Microservices 的概念來撰寫 API 功能</li>\n<li>輸出良好的 Log 來追蹤錯誤或是臭蟲，例如 Zap, Logrus</li>\n<li>使用 HttpTest 和 asset 來做測試</li>\n<li>使用 Redigo 來處理跟 Redis 的連線</li>\n<li>利用 CI/CD 來自動化開發流程</li>\n<li>讓 pre-commit hooks 幫助省下 commit 前要花費的時間</li>\n</ol>\n<h3 id=\"macos-tools-and-apps-for-development-in-2022\"><a class=\"direct-link\" href=\"#macos-tools-and-apps-for-development-in-2022\">#</a> <a href=\"https://medium.com/@etc088/macos-tools-and-apps-for-development-in-2022-963bd4d0f876\">macOS Tools and Apps for Development in 2022</a></h3>\n<p>相信有不少人使用 macOS 來當作日常的開發環境，正所謂工欲善其事必先利其器，這篇文章的作者表示雖然網路上有不少介紹 macOS 相關的開發工具文章，不過好像介紹的東西對他來說都不那麼有用，有些甚至還讓他浪費更多寶貴的時間</p>\n<p>所以他決定自己寫一篇來介紹真的對改善他自己工作效率有效的 macOS 開發工具大補帖💪 底下簡易列出分類和名稱，有興趣的人可以直接參閱內文通通裝起來 🤩  (自己覺得這個作者應該是比較偏前端一點的工程師，不過他推薦的東西，我這個 SRE 也使用超過一半以上 👍 )</p>\n<p>📚 Terminal 工具類<br>\n🛠️ Homebrew: macOS 套件管理工具<br>\n🛠️ iTerm2：取代 macOS 預設 Terminal<br>\n🛠️ ZSH: 構築於 Bash 上的 Unix Shell, 目前已經是預設<br>\n🛠️ Oh My ZSH!: Zsh 套件，組態管理工具<br>\n🛠️ Fig: 讓 Terminal 也有 VSCode 般的自動完成功能<br>\n🛠️ Volta: 可以想像是更好的 NVM 工具<br>\n🛠️ Ngrok: 允許在自己的本地端環境擁有一個公開且對外的網站</p>\n<p>📚 桌面軟體<br>\n🛠️ VS Code 跟他的 plugins 小夥伴們: Auto Close Tag, Auto Rename Tag, Bracket Peek, GitLens, Import Cost, Indent-Rainbow, Path Intellisense, Project Manager, Shortcut, Menu Bar, Thunder Client, Trailing Spaces, Turbo Console Log<br>\n🛠️ GitKraken: Git 的 GUI 工具<br>\n🛠️ ResponsivelyApp: 檢視在不同視窗大小時，網站的呈現會是如何<br>\n🛠️ RunJS: JavaScript 的 playground 工具<br>\n🛠️ Altair GraphQL Client: 協助除錯 GraphQL 搜尋和實作</p>\n<p>📚 其他工具<br>\n🛠️ Moom: 視窗管理工具<br>\n🛠️ CleanShot X: 強大的截圖工具<br>\n🛠️ Sli.dev: 一個線上投影片製作與呈現工具<br>\n🛠️ Notion: 讓你紀錄任何事情的服務</p>\n",
      "date_published": "2022-03-29T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/126/rico-126/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/126/rico-126/",
      "title": "第 126 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"prometheus---investigation-on-high-memory-consumption\"><a class=\"direct-link\" href=\"#prometheus---investigation-on-high-memory-consumption\">#</a> <a href=\"https://source.coveo.com/2021/03/03/prometheus-memory/\">Prometheus - Investigation on high memory consumption</a></h3>\n<p>作者先幫讀者複習一次 Prometheus 的名詞解釋和運作原理，之後循序漸進分析出記憶體幾乎是用在哪裡，最後得出的結論是 Prometheus label 比 metric 本身還要消耗記憶體，拿掉作者認為不重要的 <code>id</code> label 後，生產環境的記憶體使用量減少了 75%。</p>\n<!-- summary -->\n<h3 id=\"prometheus-rate-function\"><a class=\"direct-link\" href=\"#prometheus-rate-function\">#</a> <a href=\"https://www.metricfire.com/blog/understanding-the-prometheus-rate-function/\">Prometheus rate function</a></h3>\n<p>Prometheus alert rule 在網路上常常看到 <code>rate()</code> function 的範例，但個人覺得官方文件解釋稍微抽象了一點。於是找到這篇作者除了解釋 <code>rate()</code> 原理外，也說明跟 <code>irate()</code> 的差異，並且分享了實際的使用心得建議，甚至提供了 alert rule 和 SLO 計算的範例，另外作者也提醒 <code>rate()</code> function 計算期間沒有 scrape 到資料的話會失真。</p>\n<h3 id=\"getting-started-with-grafana-dashboard-design\"><a class=\"direct-link\" href=\"#getting-started-with-grafana-dashboard-design\">#</a> <a href=\"https://grafana.com/go/webinar/guide-to-dashboard-design/\">Getting started with Grafana dashboard design</a></h3>\n<p>這篇以影片為主，主要是 Grafana dashboard 展示的確以影片的傳達媒介較佳。這次 webinar 說明在設計 dashboard 時要注意的人類瀏覽的行爲、顏色的使用、觀看者是誰以及 panel 呈現的優先度等等。後半段也有大量 dashboard 火力展示和 Q&amp;A，Q&amp;A 內容可以看到一些精彩的示範，例如從 50:12 主持人回答如何在同一個時間點對比 metric 和 log。</p>\n",
      "date_published": "2022-03-29T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/126/gqsm-126/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/126/gqsm-126/",
      "title": "第 126 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"remix-%E2%80%93-web-standards-are-cool-again\"><a class=\"direct-link\" href=\"#remix-%E2%80%93-web-standards-are-cool-again\">#</a> <a href=\"https://www.simplethread.com/remix-web-standards-are-cool-again/\">Remix – Web Standards Are Cool Again</a></h3>\n<p><a href=\"https://remix.run/\">Remix</a> 是 React Router 的團隊開發，並在去年正式開源的全端框架。文章中作者介紹了他對 Remix 中感興趣的地方，像是 SSR、Routes 和 錯誤處理等，看完我都想要來試試 Remix 了！</p>\n<!-- summary -->\n<h3 id=\"why-does-javascript%E2%80%99s-parseint(0.0000005)-print-%E2%80%9C5%E2%80%9D%3F\"><a class=\"direct-link\" href=\"#why-does-javascript%E2%80%99s-parseint(0.0000005)-print-%E2%80%9C5%E2%80%9D%3F\">#</a> <a href=\"https://javascript.plainenglish.io/why-is-javascripts-parseint-0-0000005-5-eb9e2432f1b0\">Why does JavaScript’s parseInt(0.0000005) print “5”?</a></h3>\n<p>JavaScript 有許多方法的回傳值都讓人匪夷所思，這篇文章就來解析 <code>parseInt</code> 這個方法，看看為什麼在 JavaScript 裡將 0.0000005 透過 <code>parseInt</code> 轉換成整數會得到 5。</p>\n<h3 id=\"tailwind-vs-sass%2Fscss%3A-structure-and-consistency-over-style-and-comfort\"><a class=\"direct-link\" href=\"#tailwind-vs-sass%2Fscss%3A-structure-and-consistency-over-style-and-comfort\">#</a> <a href=\"https://dev.to/this-is-learning/tailwind-vs-sassscss-structure-and-consistency-over-style-and-comfort-44cd\">Tailwind vs Sass/SCSS: Structure and Consistency over Style and Comfort</a></h3>\n<p>雖然 Tailwind 和 Sass/SCSS 寫起來的方式完全不同，但畢竟都是用來提高寫 CSS 的質量用，難免會被拿出來比較一下。那對於這兩種編寫 CSS 的方式，你又有什麼想法呢？</p>\n",
      "date_published": "2022-03-29T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/125/smalltown-125/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/125/smalltown-125/",
      "title": "第 125 期 後端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 後端開發</h2>\n<!-- summary -->\n<h3 id=\"system-design-basics%3A-proxy-vs.-reverse-proxy\"><a class=\"direct-link\" href=\"#system-design-basics%3A-proxy-vs.-reverse-proxy\">#</a> <a href=\"https://medium.com/interviewnoodle/system-design-basics-proxy-vs-reverse-proxy-90d48da385be\">System Design Basics: Proxy vs. Reverse Proxy</a></h3>\n<p>在一個分散式的系統中，我們時常會聽到 Proxy 跟 Reverse Proxy，這兩個詞總是令人感到混肴，這兩者其中最大的不同之處在哪裡？而在什麼樣的情況之下會需要使用到它們？使用之後可以獲得什麼好處？這篇文章使用動畫圖來說明當 Proxy 代替 Client 送出請求到 Server 端，如何去達成 Caching, Anonymity, Traffic Control, Logging 等功能；同樣透過動畫去解釋 Reverse Proxy 將最終接受請求的 Server 對 Client 隱藏起來的同時，又是怎麼樣去 Caching, Anoymity, Load Balancing, Experimentation, Router/Ingress，對於這兩個詞彙也常常感到混肴的人，可以參考一下這篇文章</p>\n<!-- summary -->\n<h3 id=\"postgresql%3A-lessons-learned-while-optimising-query-performance\"><a class=\"direct-link\" href=\"#postgresql%3A-lessons-learned-while-optimising-query-performance\">#</a> <a href=\"https://betterprogramming.pub/postgresql-lessons-learned-while-optimising-query-performance-56e1652ecd86\">PostgreSQL: Lessons Learned While Optimising Query Performance</a></h3>\n<p>作者在去年學到很多關於如何去優化 PostgreSQL 效能的知識，所以想要透過這篇文章跟大家分享如何充分利用 Database 的關鍵點，他覺得有兩點特別重要，並且使用圖示詳細說明為什麼以及如何改善，對於 Tuning Database 底層有興趣的人可以參考看看</p>\n<ol>\n<li>最常造成 Database 效能問題的原因通常在於 Index 並沒有被包含在搜尋中，或是建出來的 Index 並沒有被使用到</li>\n<li>不知道目前 Database 到底是好是壞，例如怎麼找到目前最慢的三個查詢語法？</li>\n</ol>\n<h3 id=\"how-do-i-resolve-merge-conflicts%3F\"><a class=\"direct-link\" href=\"#how-do-i-resolve-merge-conflicts%3F\">#</a> <a href=\"https://dev.to/github/how-do-i-resolve-merge-conflicts-5438\">How Do I Resolve Merge Conflicts?</a></h3>\n<p>作者剛從 coding boot camp 畢業時其實還不會處理 Git Merge Conflict，他的當時的解決方式是直接重開一個新的 Git Repository，不過他在 2019 年作為一個軟體工程師跟著團隊一起工作之後，他不可能再透過開啟新的 Git Repository 來解決問題，所以他在那一年常常解 Merge Conflict 解到泛淚，不過在經歷那段時間之後，他現在已經很有信心自己去解決 Merge Conflict，雖然還是會有點感到壓力XD 所以他想要提供一些小技巧給大家，首先可以從了解為什麼 Merge Conflict 發生開始，接著提到如何去解決 Merge Conflict，內容講得滿詳細的，推薦給對於解決 Merge Conflict 也感到苦惱的人</p>\n",
      "date_published": "2022-03-22T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/125/rico-125/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/125/rico-125/",
      "title": "第 125 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"a-better-alternative-for-docker-desktop%3F\"><a class=\"direct-link\" href=\"#a-better-alternative-for-docker-desktop%3F\">#</a> <a href=\"https://medium.com/@oribenhur/a-better-alternative-for-docker-desktop-3e8fa38d618\">A better alternative for Docker Desktop?</a></h3>\n<p>我想不少公司應該有認真考慮過 Docker Desktop license 付費的問題，這篇分享作者在使用多個方案後決定使用 Rancher Desktop，選擇的理由不外乎社群活耀度、支援 docker 和 contained、支援 docker-cli 和 nerdctl、支援 Apple M1 以及支援 build-in local volume mounts，會特別強調 local volume mounts 是因為 Podman 不太支援這點。</p>\n<!-- summary -->\n<p>作者介紹了兩種安裝 Rancher Desktop 的方法，一個是從 shell script 安裝，另外一種比較簡單許多，直接下載 .dmg 檔案。</p>\n<h3 id=\"replace-docker-desktop-with-lima\"><a class=\"direct-link\" href=\"#replace-docker-desktop-with-lima\">#</a> <a href=\"https://medium.com/itnext/replace-docker-desktop-with-lima-88ec6f9d6a19\">Replace Docker Desktop with lima</a></h3>\n<p>這篇介紹另外一個取代 Docker Desktop 的選擇 Lima，作者也表示他嘗試了一下 Podman 發現 local volume mount 的問題（而且這個 issue 從 2020 就已經有了）。Lima 安裝的 script 看似很複雜但其實只是一些簡單的設定，例如：為了連線而改 hostname、設定 rootless container 以及必要的 healthcheck 等等。</p>\n<p>附帶一提的是，不論是 Rancher Desktop 或 Lima 都有支援 docker-compose。</p>\n<h3 id=\"5-unusual-docker-container-use-cases\"><a class=\"direct-link\" href=\"#5-unusual-docker-container-use-cases\">#</a> <a href=\"https://medium.com/itnext/5-unusual-docker-container-use-cases-547804d64c35\">5 unusual Docker container use cases</a></h3>\n<p>介紹 5 種平常不會用到的 container 用法，不過老實說這 5 種我就蠻常用其中 3 種，讓我們來看看哪些你也中了吧：</p>\n<ul>\n<li>跑真正有 UI 的 container\n<ul>\n<li>裡面舉例了相片管理軟體 <a href=\"https://www.digikam.org/\">digikam</a>、瀏覽器或 Libre Office 等等都可以跑 container。</li>\n</ul>\n</li>\n<li>跑 Linux 桌面版的 container\n<ul>\n<li>跟上一個用法有點雷同，Linux 桌面是從網頁去看的，也剛好有 Youtuber 拍實際跑起來的<a href=\"https://youtu.be/Gd9bvdkIXOQ\">影片</a>。</li>\n</ul>\n</li>\n<li>把 container 當作指令\n<ul>\n<li>個人蠻常用的，畢竟有的時候不會想要安裝太多在自己的電腦裡。不過作者在這裡描述的是想要更高客製化的執行環境，他的<a href=\"https://itnext.io/portable-kubernetes-management-with-kubectl-in-docker-cb861a2c3c02\">另外一篇文章</a>裡就有寫為了執行 kubectl 所安裝的一系列環境。</li>\n</ul>\n</li>\n<li>把 container 當作開發環境\n<ul>\n<li>也算是很常用的場景，畢竟 Apple M1 還是處處受限制，也剛好有 Gitpod 這個 SaaS 選擇。</li>\n</ul>\n</li>\n<li>把 container 當作 Kubernetes 環境\n<ul>\n<li>有在使用 Kubernetes 的人一定不陌生這個使用方法，雖然不比真實的 Kubernetes，但是可以快速驗證一些基本的想法或除錯。</li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2022-03-22T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/125/gqsm-125/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/125/gqsm-125/",
      "title": "第 125 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"getting-started-with-three.js\"><a class=\"direct-link\" href=\"#getting-started-with-three.js\">#</a> <a href=\"https://medium.com/geekculture/getting-started-with-three-js-1c2d02e18330\">Getting Started With Three.js</a></h3>\n<p>如果有想要學習 Three.js 然後做出各各種漂亮的 3D 場景，那從這篇文章入門會是不錯的選擇，文章裡面介紹了 Three.js 內的幾個重要的元素，包含 scene、3D geometry、Materials、Mesh、Loaders、Camera、Lighting 等等，每段介紹的時候都有再貼上用來實現的範例程式碼，有興趣的話也可以花時間看看唷！</p>\n<!-- summary -->\n<h3 id=\"css-interview-questions\"><a class=\"direct-link\" href=\"#css-interview-questions\">#</a> <a href=\"https://kumarsonsoff.hashnode.dev/css-interview-questions#comments-list\">CSS Interview Questions</a></h3>\n<p>作者整理了常見的 CSS 面試問題，像是 CSS 的 Box Model 是什麼等等。雖然看上去都很基本，但是金魚腦如我，過一段時間不複習，就很容易就忘記，大家也可以看看自己曾經學過的知識是否還記得喲！</p>\n<h3 id=\"is-vite-better-than-webpack%3F\"><a class=\"direct-link\" href=\"#is-vite-better-than-webpack%3F\">#</a> <a href=\"https://blog.bitsrc.io/vite-is-better-than-webpack-d5dd59610d56\">Is Vite Better than Webpack?</a></h3>\n<p>Vite 從出現以來就一直以快速為它的特點，那相較於 Webpack 從一個 entry point 開始打包成 Bundle.js 的流程，Vite 究竟是如何改善我們的開發體驗呢？</p>\n",
      "date_published": "2022-03-22T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/125/andy-125/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/125/andy-125/",
      "title": "第 125 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"%E4%BD%BF%E7%94%A8-javascript-%E7%9A%84%E6%95%B8%E5%AD%97%E6%99%82%E7%9A%84%E5%B8%B8%E8%A6%8B%E9%8C%AF%E8%AA%A4\"><a class=\"direct-link\" href=\"#%E4%BD%BF%E7%94%A8-javascript-%E7%9A%84%E6%95%B8%E5%AD%97%E6%99%82%E7%9A%84%E5%B8%B8%E8%A6%8B%E9%8C%AF%E8%AA%A4\">#</a> <a href=\"https://blog.huli.tw/2022/03/14/javascript-number/?fbclid=IwAR08Nf-haBUeJx3xDdFvUfYSySRxCck63msLvnZbMfvMlW1-6GiOeCCX-EA\">使用 JavaScript 的數字時的常見錯誤</a></h3>\n<p>這篇是胡立大大寫的文章，裡面提到了 JavaScript 在處理數字的資料型態時有些結果可能跟你想像的不太一樣，想要了解 JavaScript number type 的冷知識的讀者不妨可以看看這篇文章。</p>\n<!-- summary -->\n<h3 id=\"%E7%82%BA%E4%BB%80%E9%BA%BC%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E8%B6%8A%E4%BE%86%E8%B6%8A%E6%84%9B%E4%BD%BF%E7%94%A8-monorepo-%E6%9E%B6%E6%A7%8B\"><a class=\"direct-link\" href=\"#%E7%82%BA%E4%BB%80%E9%BA%BC%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E8%B6%8A%E4%BE%86%E8%B6%8A%E6%84%9B%E4%BD%BF%E7%94%A8-monorepo-%E6%9E%B6%E6%A7%8B\">#</a> <a href=\"https://medium.com/hannah-lin/%E7%82%BA%E4%BB%80%E9%BA%BC%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E8%B6%8A%E4%BE%86%E8%B6%8A%E6%84%9B%E4%BD%BF%E7%94%A8-monorepo-%E6%9E%B6%E6%A7%8B-661afa90910a\">為什麼前端工程越來越愛使用 Monorepo 架構</a></h3>\n<p>Monorepo 真的是越來越多開發者在使用了，連本週的週刊都在講這個架構XD<br>\n想要了解一些 Monorepo 相關先輩知識的讀者不妨可以看看這篇文章。</p>\n<h3 id=\"we-abandoned-npm-install%2C-maybe-you-should-too\"><a class=\"direct-link\" href=\"#we-abandoned-npm-install%2C-maybe-you-should-too\">#</a> <a href=\"https://medium.com/strise/we-abandoned-npm-install-maybe-you-should-too-2340b1ac6116\">We abandoned npm install, maybe you should too</a></h3>\n<p>隨著前端架構越來越複雜，對於 package manager 要做的事情也越來越多了，為了因應現在的 Monorepo 架構就有一個專門為了 Monorepo 架構而生的 package manager 名字為 rush，究竟 rush 可以做到哪些事情呢？有興趣的讀者不妨可以看看這篇文章。</p>\n",
      "date_published": "2022-03-22T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/activity/20220306-OCF-intern-2022/",
      "url": "https://starbugs-blog.netlify.app/posts/activity/20220306-OCF-intern-2022/",
      "title": "OCF intern",
      "content_html": "<p><a href=\"https://blog.ocf.tw/2022/03/2022.html\">OCF 開放文化基金會 2022 年社群實習</a></p>\n<!-- summary -->\n<p>為了延續台灣開源、開放的生態，培養能夠熟悉社群運作、洞悉國際趨勢的人才，OCF 即日起開始與四個合作社群：CCTW, FreeBSD, CNTUG, CSCS 一起誠徵實習夥伴，快來和我們一起加入社群運作、貢獻的行列！！</p>\n<p>報名時間只到 3/31 心動不如馬上行動</p>\n<!-- summary -->\n<h2 id=\"%E7%A4%BE%E7%BE%A4%E5%88%97%E8%A1%A8\"><a class=\"direct-link\" href=\"#%E7%A4%BE%E7%BE%A4%E5%88%97%E8%A1%A8\">#</a> 社群列表</h2>\n<p><a href=\"https://ocf.tw/p/cctw/\">CCTW (CC Taiwan Chapter)</a></p>\n<p>Creative Commons 是美國的非營利組織提出的公眾授權條款，台灣稱為「創用 CC」授權條款，是現今網路世代身為一個創作者所不可或缺的開放共享的授權方式。</p>\n<p><a href=\"https://bsdtw.org/\">FreeBSD Taiwan</a></p>\n<p>FreeBSD 是一套寬鬆自由軟體授權的開放原始碼作業系統。具備高度的可調整性，廣泛使用於伺服器，桌面與嵌入式平台。由於先進的網路、安全性與儲存方面的特色，成為許多大型網站以及各種嵌入式系統與儲存裝置的平台選擇。</p>\n<p><a href=\"https://www.facebook.com/groups/cloudnative.tw/\">CNTUG (Cloud Native Taiwan User Group)</a></p>\n<p>Cloud Native Taiwan User Group 希望整合台灣雲端相關社群如 OpenStack, Kubernetes, Ceph, SDN 等，並利用 Meetup 定期在各台灣地區舉辦技術與推廣分享活動。</p>\n<p><a href=\"https://ocf.tw/p/cscs/\">CSCS (Civil Society Cyber Shield)</a></p>\n<p>CSCS 全名 Civil Society Cyber Shield, 是由台灣資安專業人士為主組成的志工服務團體，2017 年起專門為公民團體 (NGO) 提供資訊安全相關的培訓、健檢、顧問，並透過不定期的講座、擺攤活動推廣資安、隱私、數位權利等議題。CSCS 曾服務的公民團體議題類型包含言論自由、婦女、環境等等。今日，越來越多社會活動轉移至線上，而網路環境中的資訊安全和隱私威脅也日漸複雜，公民團體往往沒有足夠的資源來應對。CSCS 希望整合專業資安知識，提供公民團體資安協助，進而維護台灣的自由公民社會。</p>\n",
      "date_published": "2022-03-22T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/124/smalltown-124/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/124/smalltown-124/",
      "title": "第 124 期 後端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 後端開發</h2>\n<!-- summary -->\n<h3 id=\"rapid-event-notification-system-at-netflix\"><a class=\"direct-link\" href=\"#rapid-event-notification-system-at-netflix\">#</a> <a href=\"https://netflixtechblog.com/rapid-event-notification-system-at-netflix-6deb1d2b57d1\">Rapid Event Notification System at Netflix</a></h3>\n<p>Netflix 擁有超過 2.2 億活躍用戶，他們必須確保用戶在不同的裝置間進行的任何動作 (修改 Profile, 觀看電影標題...等) 保持體驗的一致性，考量到支援的眾多裝置種類和使用者可以執行的動作之多，其實這不是一件容易達成的事情，因此 Netflix 開發了一個快速事件通知系統，用來支援任何需要 Server 與裝置間溝通的使用情境，而在這篇文章中將會介紹這套系統的大致樣貌，而且分享 Netflix 在構築它時所學到的事情</p>\n<!-- summary -->\n<h3 id=\"code-verify%3A-an-open-source-browser-extension-for-verifying-code-authenticity-on-the-web\"><a class=\"direct-link\" href=\"#code-verify%3A-an-open-source-browser-extension-for-verifying-code-authenticity-on-the-web\">#</a> <a href=\"https://engineering.fb.com/2022/03/10/security/code-verify/\">Code Verify: An open source browser extension for verifying code authenticity on the web</a></h3>\n<p>自從去年 WhatsApp 推出多裝置功能之後，Meta 這邊看到越來越多人直接使用瀏覽器拜訪 WhatsApp Web，考慮到此一使用者行為轉變， Meta 這邊開始想要增加 WhatsApp Web 的安全性，所以最近推出了一個開源的瀏覽器 Extension - Code Verify，他可以自動驗證使用者拜訪的 WhatsApp Web 程式碼沒有被其他人竄改，文章內進一步 Code Verify 的運作機制與使用方式</p>\n<h3 id=\"modern-application-load-balancing-with-a-centralized-control-plane\"><a class=\"direct-link\" href=\"#modern-application-load-balancing-with-a-centralized-control-plane\">#</a> <a href=\"https://www.cncf.io/blog/2022/03/10/modern-application-load-balancing-with-a-centralized-control-plane-2/\">Modern application load balancing with a centralized control plane</a></h3>\n<p>一個服務或是系統，一般來說可以分成 Control Plane 和 Data Plane，將兩者分開可以實現 Software-Defined Everything 和 Infrastructure as Code，這樣的做法可以將應用程式跟其運行的基礎設施解耦合，好處有增加執行效率，增加部署彈性，執行成本最佳化；而傳統的 Load Balancer 和 Web Application Firewalls 通常都沒有將 Control Plane 和 Data Plane 拆開來，當你處在數千個應用服務的環境中時，這樣的模式將會成為 Wordload 的瓶頸，所以文章中提到對於這類型的系統或是服務要如何將 Control Plane 集中化，並將 Data Plane 拆分開來，以及其帶來的好處</p>\n",
      "date_published": "2022-03-15T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/124/rico-124/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/124/rico-124/",
      "title": "第 124 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"awesome-compose\"><a class=\"direct-link\" href=\"#awesome-compose\">#</a> <a href=\"https://github.com/docker/awesome-compose\">awesome-compose</a></h3>\n<p>有時想要快速架一個環境做測試的時候 awesome-compose 就非常的好用，裡面有不同的語言甚至前後端資料庫整個架構都有了，有些範例可以讓使用這快速學習到這個服務怎麼使用，畢竟有時候直接看文件還是有點抽象，但直接看 docker-compose 就一目了然。<!-- summary -->裡面最特別的就屬創世神（Minecraft）伺服器 docker-compose 了。</p>\n<h3 id=\"awesome-selfhosted\"><a class=\"direct-link\" href=\"#awesome-selfhosted\">#</a> <a href=\"https://github.com/awesome-selfhosted/awesome-selfhosted\">awesome-selfhosted</a></h3>\n<p>自己架設服務讓組織有更多的彈性，而且資安規範必須要把服務架設在內網是很常見的事，在選擇服務的時候就可以來 awesome-selfhosted 找找有沒有特別的。除了介紹單一服務外，還有 self-hosting solutions 讓使用者一次建立多個 self-hosted 服務環境，讓你省去個別選擇的煩惱。這個專案看得出來很用心，甚至附上 demo 和 source code 的連結，也有一些分類直接導向別的 awesome 專案連結，甚至還有 License 以及程式語言的 tag。</p>\n<h3 id=\"awesome-baremetal\"><a class=\"direct-link\" href=\"#awesome-baremetal\">#</a> <a href=\"https://github.com/alexellis/awesome-baremetal\">awesome-baremetal</a></h3>\n<p>awesome-baremetal 是搜集了跟實體機器有關的專案，除了工具之外還有介紹不錯的 bare metal 雲服務商。本專案特別的地方在於精挑細選的規則，就必須一直有在開發、要真的有公司使用這些工具、能夠真的被廣泛使用而不是客製化的專案以及不得有廣告的嫌疑，像是這樣的篩選讓人們可以安裝從 awesome-baremetal 專案中做選擇。</p>\n",
      "date_published": "2022-03-15T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/124/gqsm-124/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/124/gqsm-124/",
      "title": "第 124 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"what-web-frameworks-solve-and-how-to-do-without-them-(part-1)\"><a class=\"direct-link\" href=\"#what-web-frameworks-solve-and-how-to-do-without-them-(part-1)\">#</a> <a href=\"https://www.smashingmagazine.com/2022/01/web-frameworks-guide-part1/\">What Web Frameworks Solve And How To Do Without Them (Part 1)</a></h3>\n<p>作者在文章裡探討幾個現代 Web Frameworks 的差異，以及這些 Frameworks 實現相同技術所花費的成本，這可以讓我們思考 Frameworks 提供的功能是否存在另一種替代方案，或是當我們選擇使用某個方案時，也能從中學習。</p>\n<!-- summary -->\n<h3 id=\"a-future-made-of-javascript\"><a class=\"direct-link\" href=\"#a-future-made-of-javascript\">#</a> <a href=\"https://blog.bitsrc.io/a-future-made-of-javascript-5ab417f34355\">A Future Made of JavaScript</a></h3>\n<p>JavaScript 除了原本跑在瀏覽器上的功能外，還多了各種不同的功能及用途。作者認為 JavaScript 能夠擺脫瀏覽器限制的最大原因是 Node.js 的出現，而在現今或未來的開發人員的生活中，又有哪些技術是與 JavaScript 有所關聯呢？</p>\n<h3 id=\"the-future-of-micro-frontends\"><a class=\"direct-link\" href=\"#the-future-of-micro-frontends\">#</a> <a href=\"https://betterprogramming.pub/the-future-of-micro-frontends-2f527f97d506\">The Future of Micro-Frontends</a></h3>\n<p>在 2021 年底開始，作者花了幾週的時間研究 micro-frontends（微前端），並分析 micro-frontends 對團隊造成的影響，以及思考如何能夠使 micro-frontends 架構變得更好。</p>\n",
      "date_published": "2022-03-15T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/124/andy-124/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/124/andy-124/",
      "title": "第 124 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"everything-you-need-to-know-about-the-react-18-rc\"><a class=\"direct-link\" href=\"#everything-you-need-to-know-about-the-react-18-rc\">#</a> <a href=\"https://dev.to/kathryngrayson/everything-you-need-to-know-about-the-react-18-rc-3kc6\">Everything You Need to Know About the React 18 RC</a></h3>\n<p>React 18 在最近幾天正式進入 release candidate 的階段了！對於前端工程師來說應該是一項非常振奮人心的消息，究竟 React 18 為各位開發者帶來哪些好用的 feature，有興趣的讀者不妨可以看看這篇文章。</p>\n<!-- summary -->\n<h3 id=\"12-gorgeous-ui-components-for-your-design-inspiration\"><a class=\"direct-link\" href=\"#12-gorgeous-ui-components-for-your-design-inspiration\">#</a> <a href=\"https://dev.to/madza/12-gorgeous-ui-components-for-your-design-inspiration-3feh\">12 Gorgeous UI Components for Your Design Inspiration</a></h3>\n<p>對於前端工程師來說要自己純手刻出一些非常炫砲的畫面應該是相當的費時又費力，作者精挑細選了 12 個可以讓你的網頁看起來相當炫砲的 UI component，有興趣想使用的讀者不妨可以參考看看。</p>\n<h3 id=\"what's-new-in-es2022%3F\"><a class=\"direct-link\" href=\"#what's-new-in-es2022%3F\">#</a> <a href=\"https://dev.to/jasmin/whats-new-in-es2022-1de6\">What's new in ES2022?</a></h3>\n<p>ES2022 即將於 2022 年的 6 月正式推出，究竟 ES2022 提供了哪些全新的功能在 JavaScript 裡頭呢？有興趣的讀者可以點進來這篇文章看看。</p>\n",
      "date_published": "2022-03-15T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/123/smalltown-123/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/123/smalltown-123/",
      "title": "第 123 期 後端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%BE%8C%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 後端開發</h2>\n<!-- summary -->\n<h3 id=\"19-valuable-github-repositories-for-beginner-developers\"><a class=\"direct-link\" href=\"#19-valuable-github-repositories-for-beginner-developers\">#</a> <a href=\"https://dev.to/madza/19-valuable-github-repositories-for-beginner-developers-3i18\">19 Valuable GitHub Repositories for Beginner Developers</a></h3>\n<p>作者經常被詢問假如想要開始踏入 Web 開發職涯的話，有哪一些資源可以推薦給初學者，所以就將他覺得最棒的 Repository 給條列出來，雖然大部分都比較適合初學者，但或許資深的工程師也可以從中溫故知新，這些連結經過分類，其中包含課程，Handbook, 最佳守則，專案，面試的各種資源<!-- summary --></p>\n<h3 id=\"the-streaming-bridges-%E2%80%94-a-kafka%2C-rabbitmq%2C-mqtt%2C-and-coap-example\"><a class=\"direct-link\" href=\"#the-streaming-bridges-%E2%80%94-a-kafka%2C-rabbitmq%2C-mqtt%2C-and-coap-example\">#</a> <a href=\"https://medium.com/swlh/the-streaming-bridges-a-kafka-rabbitmq-mqtt-and-coap-example-9077a598169\">The streaming bridges — A Kafka, RabbitMQ, MQTT, and CoAP example</a></h3>\n<p>當前大家常用來當 Queue 的各種解決方案其實都相當的成熟，看一下其發展歷史: MQTT (1999) -&gt; AMQP (2003) -&gt; RabbitMQ (2007) -&gt; CoAP (2009) -&gt; Kafka (2010)，可以發現這中間已有超過 20 年的淬煉，大家現在常聽到的 RabbitMQ 和 Kafka 其實也超過十年有餘，作者利用一個火車運輸系統來展示 RabbitMQ, Kafka, MQTT 和 CoAP 如何各展長才，其中還包含了RabbitMQ, MQTT, CoAP 和 Kafka 的設定步驟，以及 Database PostgreSQL 和 Cassandra 的 DB Scheme，導致篇幅滿長的，有空想要細細品味這個 Queue 是怎麼使用的人可以參考看看</p>\n<h3 id=\"david-boggs%2C-co-inventor-of-ethernet%2C-dies-at-71\"><a class=\"direct-link\" href=\"#david-boggs%2C-co-inventor-of-ethernet%2C-dies-at-71\">#</a> <a href=\"https://www.nytimes.com/2022/02/28/technology/david-boggs-dead.html\">David Boggs, Co-Inventor of Ethernet, Dies at 71</a></h3>\n<p>Ethernet 的聯合發明者 David Boggs 於日前 (2022/02/19) 過世，享年 71 歲，他在 1973 年時加入 Xerox PARC 研究室與開發夥伴 Bob Metcalfe 一同投入電腦資訊傳輸的研究，他們花了差不多兩年的時間設計出第一版的 Ethernet，感謝有他們的發明，才讓現今有這麼多采多姿的網路世界</p>\n",
      "date_published": "2022-03-08T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/123/rico-123/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/123/rico-123/",
      "title": "第 123 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"workshops-as-code\"><a class=\"direct-link\" href=\"#workshops-as-code\">#</a> <a href=\"https://www.gitpod.io/blog/workshops-as-code\">Workshops as code</a></h3>\n<p>自己也蠻喜歡參加或者舉辦 workshop 所以對這篇很有感觸，以前 workshop 在真正體驗核心技術之前就得花很多時間做前置環境設定，作者就提及之前 2019 年舉辦 NixOS workshop 攏長的前置過程，創虛擬機看似簡單但每個人的環境都不一樣，出問題很難 debug。<!-- summary -->而 Gitpod 正好解決上述的問題，我們可以把 workshop 環境標準化寫成 code，藉由 container 的重複使用和重複再製的特性，以及 Gitpod 基本上是跑在雲端上的，就讓所有參加者的環境確保一模一樣。</p>\n<p>現在你可以直接在網頁按個按鈕就有 NixOS 的環境了，作者也有提供 <a href=\"https://gitpod.io/#https://github.com/gitpod-io/template-nixos\">gitpod-io/template-nixo</a> 給大家嘗試。</p>\n<h3 id=\"the-best-devops-blogs\"><a class=\"direct-link\" href=\"#the-best-devops-blogs\">#</a> <a href=\"https://dev.to/karllhughes/the-best-devops-blogs-1bn5\">The Best DevOps Blogs</a></h3>\n<p>雖然這篇文章有點舊了，但其中分享 blogs 的評分非常實用，作者依照 5 個角度去評分這個 blog，分析的依據有：</p>\n<ol>\n<li>文章品質</li>\n<li>一致性</li>\n<li>文章有效壽命</li>\n<li>技術深度</li>\n<li>用途廣泛程度</li>\n</ol>\n<p>有些偏向新聞或者文件、有些像是論壇、有些不免俗的會寫自家產品的 DevOps 解決方案或者累積的經驗談，作者也是給經驗談最高的分數。除了文字之外，裡面也有 podcast 的形式，適合通勤的時候聽。</p>\n<h3 id=\"how-many-aws-accounts-do-i-need%3F\"><a class=\"direct-link\" href=\"#how-many-aws-accounts-do-i-need%3F\">#</a> <a href=\"https://medium.com/geekculture/how-many-aws-accounts-do-i-need-d54261a0ab04\">How many AWS Accounts do I need?</a></h3>\n<p>我想當 AWS 使用久了就會有這個煩惱，作者就以這些面向去探討，幫讀者分析自己要怎麼設計多個 AWS 帳號的用途。</p>\n<ul>\n<li>未來商業發展與團隊\n<ul>\n<li>例如以 Infrastructure、Network、Security、Application 和 Data Warehouse 等等不同的團隊做 AWS 帳號的區分。</li>\n</ul>\n</li>\n<li>Domain Driven Design（領域驅動設計，俗稱 DDD）\n<ul>\n<li>依照不同的商業領域做區分，要注意的判斷哪些 services 應該在同個 AWS 帳號，哪些可以分開。</li>\n</ul>\n</li>\n<li>環境\n<ul>\n<li>同一個 service 依照不同的環境分 AWS 帳號，如果本身環境很多的確可以考慮把多個環境合併在一個 AWS 帳號裡。</li>\n</ul>\n</li>\n<li>災難恢復\n<ul>\n<li>為了減少 service 恢復的時間，可以把全部或者部分的 service 複製到另外一個 AWS 帳號。</li>\n</ul>\n</li>\n<li>多個 region\n<ul>\n<li>這邊比較特別的是作者是以非技術的角度作切入的，每個地理位置的資料隱私政策都不一樣，為了提供更好的使用體驗而做不同 region 和不同 AWS 帳號的決策。</li>\n</ul>\n</li>\n<li>沙盒/測試\n<ul>\n<li>跟環境分帳號不一樣的是這需求純粹做類似 infrastructure PoC，或者測試串接多個 AWS 帳號 VPC 網路，或者同個 service 以不同的沙盒環境做測試而區分 AWS 帳號。</li>\n</ul>\n</li>\n<li>正確使用 CI/CD Pipeline 的 AWS 帳號\n<ul>\n<li>這也是很有挑戰性的設計，CICD pipeline 要如何「觀察」你的 infrastructure 和 services 在不同的環境、region 和 AWS 帳號之後再做部署。</li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2022-03-08T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/123/gqsm-123/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/123/gqsm-123/",
      "title": "第 123 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"new-css-features-in-2022\"><a class=\"direct-link\" href=\"#new-css-features-in-2022\">#</a> <a href=\"https://www.smashingmagazine.com/2022/03/new-css-features-2022/\">New CSS Features In 2022</a></h3>\n<p>作者列出她認為在 2022 年值得關注的 CSS 語法以及使用情境，其中包含了 Container Queries、<code>@when/@else</code> 和 Color Functions 等等，或許有些還沒有辦法被所有瀏覽器支持，但也有部分是已經可以使用的！</p>\n<!-- summary -->\n<h3 id=\"a-new-year%2C-a-new-mdn\"><a class=\"direct-link\" href=\"#a-new-year%2C-a-new-mdn\">#</a> <a href=\"https://hacks.mozilla.org/2022/03/a-new-year-a-new-mdn/\">A new year, a new MDN</a></h3>\n<p>不曉得大家有沒有發現，會用來查詢前端相關語法的 MDN 默默地就改版了！因為 MDN 獲得的貢獻數已經超過了 45,000 人，導致在閱讀體驗時會有點不一致，因此官方團隊在 2021 年開始考慮 MDN 改版，讓使用者的體驗更好！但根據官方團隊的說明，這還不是結束，如果對該社群有興趣的話，不妨一起來看看 MDN 的下一步吧！</p>\n<h3 id=\"5-things-you-don't-need-javascript-for\"><a class=\"direct-link\" href=\"#5-things-you-don't-need-javascript-for\">#</a> <a href=\"https://lexoral.com/blog/you-dont-need-js/\">5 things you don't need Javascript for</a></h3>\n<p>JavaScript 日益強大，能做到的事情也越來越多，但是這可能會導致我們「過度使用它」。作者列出了 5 項常見的功能，是可以在不需要使用到 JavaScript，好好的利用 HTML 及 CSS 也能夠實現的。</p>\n",
      "date_published": "2022-03-08T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/123/andy-123/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/123/andy-123/",
      "title": "第 123 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"%E4%B8%8D%E7%94%A8%E5%AF%AB%E7%A8%8B%E5%BC%8F%E4%B9%9F%E8%83%BD%E7%94%A2%E7%94%9F-api-%E2%80%94-strapi\"><a class=\"direct-link\" href=\"#%E4%B8%8D%E7%94%A8%E5%AF%AB%E7%A8%8B%E5%BC%8F%E4%B9%9F%E8%83%BD%E7%94%A2%E7%94%9F-api-%E2%80%94-strapi\">#</a> <a href=\"https://medium.com/%E9%BB%91%E6%B4%9E%E5%89%B5%E9%80%A0-blackhole-creative/%E4%B8%8D%E7%94%A8%E5%AF%AB%E7%A8%8B%E5%BC%8F%E5%B0%B1%E8%83%BD%E7%94%A2%E7%94%9F-api-strapi-%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%B4%B9-f40d01570322\">不用寫程式也能產生 API — strapi</a></h3>\n<p>最近在研究從 0 開始開發一套 CMS 系統，發現原來 CMS 的世界比我想的還要大多了，有一般傳統的例如 wordpress、joomla 等會有各式各樣的樣板可以提供使用者選擇，以及 Headless CMS 一種只負責輸出 api 以及 config 讓前端 UI 自己 render，這篇文章就在介紹 <a href=\"https://strapi.io/\">strapi</a> 這套 Headless CMS open source，對 CMS 有興趣的讀者不妨可以看看。</p>\n<!-- summary -->\n<h3 id=\"a-thorough-analysis-of-css-in-js\"><a class=\"direct-link\" href=\"#a-thorough-analysis-of-css-in-js\">#</a> <a href=\"https://css-tricks.com/a-thorough-analysis-of-css-in-js/\">A Thorough Analysis of CSS-in-JS</a></h3>\n<p>隨著 JS 框架能做的事情越來越多，如今 css in js 的概念也越來越興盛，像 React 常用的 <a href=\"https://styled-components.com/\">styled-components</a> 就是這樣的套件，這篇文章分析了一些常用的 css in js library 有興趣的讀者可以看看。</p>\n<h3 id=\"%E7%A7%91%E6%99%AE%EF%BD%9C%E4%BB%80%E9%BA%BC%E6%98%AF-web3.0%EF%BC%9F%E7%94%A8%E6%B7%BA%E9%A1%AF%E6%98%93%E6%87%82%E7%9A%84%E6%96%B9%E5%BC%8F%E8%AB%87%E8%AB%87-web3\"><a class=\"direct-link\" href=\"#%E7%A7%91%E6%99%AE%EF%BD%9C%E4%BB%80%E9%BA%BC%E6%98%AF-web3.0%EF%BC%9F%E7%94%A8%E6%B7%BA%E9%A1%AF%E6%98%93%E6%87%82%E7%9A%84%E6%96%B9%E5%BC%8F%E8%AB%87%E8%AB%87-web3\">#</a> <a href=\"https://www.blocktempo.com/what-is-web-3-let-us-explain-using-simple-terms/\">科普｜什麼是 Web3.0？用淺顯易懂的方式談談 Web3</a></h3>\n<p>隨著區塊鍊的技術越來越成熟，Web 3.0 也開始慢慢被推動，基本上現在的前端工程師只要了解 web2 就好，但隨著時代的進步後續一定會慢慢開始用 web3 的技術，所以想要了解 web3 的一些概念的讀者不妨可以看看這篇文章。</p>\n",
      "date_published": "2022-03-08T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/122/smalltown-122/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/122/smalltown-122/",
      "title": "第 122 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"%5Bdevops%5D-create-your-first-ci%2Fcd-pipeline!!\"><a class=\"direct-link\" href=\"#%5Bdevops%5D-create-your-first-ci%2Fcd-pipeline!!\">#</a> <a href=\"https://faun.pub/devops-create-your-first-ci-cd-pipeline-ed054ba1404f\">[DevOps] Create your first CI/CD pipeline!!</a></h3>\n<p>CI/CD Pipeline 要將新版本軟題發佈所必須要執行的一連串步驟，它透過監控和自動化來改善應用程式開發的流程，特別是在整合跟測試的階段，當然還有交付跟部署，雖然 CI/CD 的所有步驟都可以手動執行，但 CI/CD 真的的價值需要透過自動化才能體現，所以作者將自身經驗和詳細設定過程透過這篇文章<!-- summary -->介紹分享給大家</p>\n<p>主要使用到的工具為 Ubuntu EC2, Java, Jenkins, Maven, Tomcat, Docker, Jira 和 DefectDojo，談到 Build, Test, Release, Deploy 以及 Validation 和 Compliance，過程鉅細彌遺，很適合初學者跟著一起試試看</p>\n<h3 id=\"chaos-mesh-moves-to-the-cncf-incubator\"><a class=\"direct-link\" href=\"#chaos-mesh-moves-to-the-cncf-incubator\">#</a> <a href=\"https://www.cncf.io/blog/2022/02/16/chaos-mesh-moves-to-the-cncf-incubator/\">Chaos Mesh moves to the CNCF Incubator</a></h3>\n<p>CNCF Committee 最近投票通過接受 Chaos Mesh 成為 CNCF Incubating 專案，Chaos Mesh 是一個功能眾多的 Chaos Engineering 平台，讓 Chaos 可以在 Kubernetes 的環境中實驗，自從在 2020 年七月成為 CNCF Sandbox 之後，他已經釋出兩個主要大版本更新 (v1.0 和 v2.0) 和 30 幾個次要更新，這些改動讓他在觀測，功能和安全性上帶來重大的改善，感覺是個滿有前景的專案，可以投資一點時間在上面</p>\n<h3 id=\"1password-for-ssh-%26-git-(beta)\"><a class=\"direct-link\" href=\"#1password-for-ssh-%26-git-(beta)\">#</a> <a href=\"https://developer.1password.com/docs/ssh/\">1Password for SSH &amp; Git (Beta)</a></h3>\n<p>自己本來就有購買 1Password 供個人使用，不然不好做到不同網站的密碼又複雜又相異，兩天看到 1Password 的文章發現竟然釋出 SSH 的功能，以後就可以把 SSH Key 也存在 1Password 裡面，都過他去存取 Git 或是 SSH 到其他的伺服器內，目前已經有支援 Mac, Linux 跟 Windows，有使用 1Password 的人可以趕緊一起來使用看看 😊</p>\n",
      "date_published": "2022-03-01T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/122/gqsm-122/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/122/gqsm-122/",
      "title": "第 122 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"%E5%81%9A%E4%BA%86%E4%B8%80%E4%BB%BD%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A0%E8%AE%A1%E5%88%92%EF%BC%8C%E4%BF%9D%E7%86%9F%EF%BD%9E\"><a class=\"direct-link\" href=\"#%E5%81%9A%E4%BA%86%E4%B8%80%E4%BB%BD%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A0%E8%AE%A1%E5%88%92%EF%BC%8C%E4%BF%9D%E7%86%9F%EF%BD%9E\">#</a> <a href=\"https://juejin.cn/post/7061588533214969892\">做了一份前端面试复习计划，保熟～</a></h3>\n<p>與面試題相關的文章就是那種平常不會去看，但是需要用到的時候又恨著自己平常沒有找時間讀的文章，尤其是只會出現在面試中的那種題目 😂，這裡有個作者就把常見的面試題整理成大補帖，幾乎涵蓋了前端的所有領域，有空或面試之前可以就拿出來看個一兩題！ 🙌</p>\n<!-- summary -->\n<h3 id=\"future-javascript%3A-records-and-tuples\"><a class=\"direct-link\" href=\"#future-javascript%3A-records-and-tuples\">#</a> <a href=\"https://dzone.com/articles/future-javascript-records-and-tuples\">Future JavaScript: Records and Tuples</a></h3>\n<p>Records 和 Tuples 是 JavaScript 未來有可能會出現的新功能，目前在 <a href=\"https://github.com/tc39/proposal-record-tuple\">tc39 提案的第二階段</a>。他們長得很像 Object 和 Array，但又有哪些其他特別的新功能，看看文章裡怎麼說吧！</p>\n<h3 id=\"exotic-objects-in-javascript\"><a class=\"direct-link\" href=\"#exotic-objects-in-javascript\">#</a> <a href=\"https://blog.bitsrc.io/exotic-objects-understanding-why-javascript-behaves-so-moody-5f55e867354f\">Exotic Objects in JavaScript</a></h3>\n<p>你有聽過 JavaScript 中的 Exotic Objects 嗎？當你對一個 String 使用一些原生的方法（像是 <code>.split()</code> 等）時，JavaScript 的內部機制會在方法呼叫時，替你把該 String 轉換成 Object 以順利執行 <code>.split()</code>，這件事背後就是 Exotic Objects 的概念。</p>\n",
      "date_published": "2022-03-01T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/122/andy-122/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/122/andy-122/",
      "title": "第 122 期 Design Pattern 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"%E5%BE%AE%E6%9C%8D%E5%8B%99%E7%9E%8E%E8%AB%87(7)-saga-pattern\"><a class=\"direct-link\" href=\"#%E5%BE%AE%E6%9C%8D%E5%8B%99%E7%9E%8E%E8%AB%87(7)-saga-pattern\">#</a> <a href=\"https://ithelp.ithome.com.tw/articles/10236124\">微服務瞎談(7) Saga Pattern</a></h3>\n<p>在 microservice 的架構中，每個 service 都有自己的儲存資料的空間，那麼要如何確保這些資料可以保持一致性，這時候就可以利用 saga pattern 這個 design pattern 來處理這個問題。</p>\n<!-- summary -->\n<h3 id=\"%5Bdesign-pattern%5D-decorator-%E8%A3%9D%E9%A3%BE%E8%80%85%E6%A8%A1%E5%BC%8F\"><a class=\"direct-link\" href=\"#%5Bdesign-pattern%5D-decorator-%E8%A3%9D%E9%A3%BE%E8%80%85%E6%A8%A1%E5%BC%8F\">#</a> <a href=\"https://ithelp.ithome.com.tw/articles/10218692\">[Design Pattern] Decorator 裝飾者模式</a></h3>\n<p>Decorator pattern 可以說是蠻常使用的一種 design pattern，解決了需要多次繼承或者建立多種實作方式的困擾，如果讀者有遇到重複性很高或者邏輯相識度很高的程式碼，不妨也可以利用 decorator pattern 來進行一個重構的設計。</p>\n<h3 id=\"%5B-day-13-%5D-%E8%87%AA%E5%B7%B1%E4%B8%8D%E6%9C%83%E6%B2%92%E9%97%9C%E4%BF%82%EF%BD%9E%E6%89%BE%E4%B8%80%E5%80%8B%E4%BB%A3%E7%90%86%E4%BA%BA%E5%B9%AB%E5%BF%99%E8%99%95%E7%90%86---%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-(-proxy-pattern-)\"><a class=\"direct-link\" href=\"#%5B-day-13-%5D-%E8%87%AA%E5%B7%B1%E4%B8%8D%E6%9C%83%E6%B2%92%E9%97%9C%E4%BF%82%EF%BD%9E%E6%89%BE%E4%B8%80%E5%80%8B%E4%BB%A3%E7%90%86%E4%BA%BA%E5%B9%AB%E5%BF%99%E8%99%95%E7%90%86---%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-(-proxy-pattern-)\">#</a> <a href=\"https://ithelp.ithome.com.tw/articles/10205659\">[ Day 13 ] 自己不會沒關係～找一個代理人幫忙處理 - 代理模式 ( Proxy Pattern )</a></h3>\n<p>Proxy pattern 是一種 design pattern 讓你可以利用代理人的方式來進行物件的控管，假如讀者在開發的過程中，遇到一個邏輯相當複雜的物件，可能複雜到很難管理，這時候就可以利用 proxy pattern 進行物件的邏輯改寫，這樣說不定就不會讓這個物件變得難以控管喔！</p>\n",
      "date_published": "2022-03-01T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/121/smalltown-121/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/121/smalltown-121/",
      "title": "第 121 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"introducing-opta%3A-terraform-on-rails\"><a class=\"direct-link\" href=\"#introducing-opta%3A-terraform-on-rails\">#</a> <a href=\"https://www.cncf.io/blog/2022/02/18/introducing-opta-terraform-on-rails/\">Introducing Opta: Terraform on Rails</a></h3>\n<p><a href=\"https://github.com/run-x/opta\">Opta</a> 是一個 IaC Framework，讓你可以使用高階語法來建構雲端架構，而不會迷失在低階的雲端設定組態當中，它提供使用者大量的函式庫來建立出理想中的架構，而且更棒的是他的底層使用 Terraform，所以使用者不會被鎖定在某個平台上，使用者永遠可以撰寫客製化的 Terraform，甚至是將 Opta 直接整合 Terraform 來使用<!-- summary --></p>\n<p>而它主要目標是希望除了業務邏輯跟 Unit Testing 由 Developer 去負責之外，其他諸如 Provision, Deployment, Observatility, Multiple Envs, Security 都由他來完成， Opta 目前支援三大主要公有雲 (AWS, GCP 跟 Azure)，現在主要有底下幾個 Module:</p>\n<ul>\n<li>Microservices (powered by Kubernetes)</li>\n<li>Databases - Postgres, MySQL, Redis</li>\n<li>Serverless workloads</li>\n<li>Networking - VPCs, Subnets, Load balancers</li>\n<li>CDN (Content Delivery Network)</li>\n<li>Object storage (S3, GCS)</li>\n</ul>\n<p>除此之外他也將一些 Best Practice 融合近來，例如：</p>\n<ul>\n<li>Observability (Datadog, LogDNA)</li>\n<li>SOC2 compliance</li>\n<li>Continuous Deployment</li>\n<li>Hardened network and security configurations (AWS, GCP, Azure)</li>\n<li>Auto-scaling and high availability (HA)</li>\n</ul>\n<h3 id=\"introducing-a-google-cloud-architecture-diagramming-tool\"><a class=\"direct-link\" href=\"#introducing-a-google-cloud-architecture-diagramming-tool\">#</a> <a href=\"https://cloud.google.com/blog/topics/developers-practitioners/introducing-google-cloud-architecture-diagramming-tool\">Introducing a Google Cloud architecture diagramming tool</a></h3>\n<p>相較於上面的 Opta 使用 YAML 檔案格式來描述雲端架構，GCP 這邊則是推出了 Google 雲端架構繪圖工具，讓使用者可以再將想要的雲端架構圖透過該工具繪製完成後，透過指標點一下，就直接將該架構在 GCP 內給部署出來，看來以後在 IaC 的世界裡，搞不好畫圖比寫 Code 來得重要了 😂</p>\n<h3 id=\"hashicorp-terraform-aws-provider-introduces-significant-changes-to-amazon-s3-bucket-resource\"><a class=\"direct-link\" href=\"#hashicorp-terraform-aws-provider-introduces-significant-changes-to-amazon-s3-bucket-resource\">#</a> <a href=\"https://www.infoq.com/news/2022/02/terraform-aws-provider-s3/\">HashiCorp Terraform AWS Provider Introduces Significant Changes to Amazon S3 Bucket Resource</a></h3>\n<p>看完高階的 IaC，接著來看低階一些的，HashiCorp 最近釋出 Terraform AWS Provider 4.0，在這個更新版當中，在 S3 Bucket 這個資源中包含了巨大且不可向下相容的變更，因此沒有鎖定 AWS Provider 版本的人，在最近使用的時候要注意一下，假如發生不意外的錯誤，就有可能是因為這次的更新所造成的，看是要降板，或是捲起袖子來修改一番了💪</p>\n<h3 id=\"include-diagrams-in-your-markdown-files-with-mermaid\"><a class=\"direct-link\" href=\"#include-diagrams-in-your-markdown-files-with-mermaid\">#</a> <a href=\"https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/\">Include diagrams in your Markdown files with Mermaid</a></h3>\n<p>上週情人節時 GitHub 宣佈一個新功能，就是以後可以在 Markdown 檔案格式中透過 Mermaid 來增加圖像了！這樣一來以後想要在 Markdown 檔案中加入流程圖的話就可以不用特地畫一張圖，然後再把圖片轉成 JPG/PNG 檔之後加到 Repository 中，然後再讓 Markdown 去引用他，可以省下不少時間 🕒</p>\n",
      "date_published": "2022-02-22T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/121/gqsm-121/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/121/gqsm-121/",
      "title": "第 121 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"solid-principles-in-typescript\"><a class=\"direct-link\" href=\"#solid-principles-in-typescript\">#</a> <a href=\"https://blog.bitsrc.io/solid-principles-in-typescript-153e6923ffdb\">SOLID Principles in TypeScript</a></h3>\n<p>作者用 TypeScript 寫範例程式碼，列出在 SOLID 原則下，我們應該要避免的幾種寫法，以及該如何正確的實作。</p>\n<!-- summary -->\n<h3 id=\"%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6%E3%80%81%E9%87%8D%E7%BB%98%E3%80%81%E9%87%8D%E6%8E%92\"><a class=\"direct-link\" href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6%E3%80%81%E9%87%8D%E7%BB%98%E3%80%81%E9%87%8D%E6%8E%92\">#</a> <a href=\"https://juejin.cn/post/7067087200143278116\">浏览器渲染机制、重绘、重排</a></h3>\n<p>你還記得瀏覽器載入 HTML 後的渲染流程嗎？在文章中作者介紹了渲染機制中的重排（Reflow）和重繪（Replant），並且提供建議以減少 Reflow 和 Replant 所產生的效能消耗。</p>\n<h3 id=\"9-javascript-design-patterns-you-will-love\"><a class=\"direct-link\" href=\"#9-javascript-design-patterns-you-will-love\">#</a> <a href=\"https://hackernoon.com/9-javascript-design-patters-you-will-love\">9 JavaScript Design Patterns You Will Love</a></h3>\n<p>這是一篇滿長的文章，作者詳細的介紹了 JavaScript 內的幾個特性，又介紹了 Design Patterns 的各種種類後才開始列出他要推薦的 9 個 Pattern，如果想要了解在 JavaScript 的語言特性下，該如何使用 Design Patterns 的話，可以花一些時間閱讀！ 🙌</p>\n",
      "date_published": "2022-02-22T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/121/andy-121/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/121/andy-121/",
      "title": "第 121 期 state management 推薦文章",
      "content_html": "<h2 id=\"state-management\"><a class=\"direct-link\" href=\"#state-management\">#</a> State management</h2>\n<!-- summary -->\n<h3 id=\"jotai-vs.-recoil%3A-what-are-the-differences%3F\"><a class=\"direct-link\" href=\"#jotai-vs.-recoil%3A-what-are-the-differences%3F\">#</a> <a href=\"https://blog.logrocket.com/jotai-vs-recoil-what-are-the-differences/\">Jotai vs. Recoil: What are the differences?</a></h3>\n<p><a href=\"https://github.com/pmndrs/jotai\">Jotai</a> 以及 <a href=\"https://github.com/facebookexperimental/Recoil\">Recoil</a> 可以說是兩個相當新的 state management，這兩個 state management 的用法可以說是相當接近，這篇文章比較了這兩種 state management，有興趣的讀者可以參考這篇文章來決定要使用哪種 state management。</p>\n<h3 id=\"managing-react-state-with-zustand\"><a class=\"direct-link\" href=\"#managing-react-state-with-zustand\">#</a> <a href=\"https://dev.to/aaronksaunders/managing-react-state-with-zustand-2e8k\">Managing React State with Zustand</a></h3>\n<p><a href=\"https://github.com/pmndrs/zustand\">Zustand</a> 是一套基於 Flux 設計模式而設計出來的 state management，跟 Redux 一樣都是用這種設計模式，如果讀者想用一些比較新穎的 state management 但是又不想跳脫 Flux 的設計模式，不妨也可以試試看 Zustand 喔～</p>\n<h3 id=\"intro-to-xstate-%E2%80%94-a-true-state-management-library-for-react\"><a class=\"direct-link\" href=\"#intro-to-xstate-%E2%80%94-a-true-state-management-library-for-react\">#</a> <a href=\"https://medium.com/weekly-webtips/intro-to-xstate-a-true-state-management-system-library-for-react-d8c0051c71e4\">Intro to XState — a true state management library for react</a></h3>\n<p><a href=\"https://github.com/statelyai/xstate\">XState</a> 是一套基於 finite state machine 的設計理念所產出的 state management，也因為 finite state machine 需要考慮的 flow 相當多，所以 XState 也可以對於一個很操作邏輯相當複雜的網站可以說是相當完整的一套 state management，如果讀者目前有遇到這種情形不妨也可以利用 Xstate 進行 state 管理喔～</p>\n",
      "date_published": "2022-02-22T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/120/smalltown-120/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/120/smalltown-120/",
      "title": "第 120 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"why-you-should-not-use-service-mesh\"><a class=\"direct-link\" href=\"#why-you-should-not-use-service-mesh\">#</a> <a href=\"https://medium.com/google-cloud/when-not-to-use-service-mesh-1a44abdeea31\">Why you should NOT use Service Mesh</a></h3>\n<p>Service Mesh 已經變成雲端架構中滿重要的一環，因為假如你使用正確的話，確實可以帶來很多好處，並且解鎖很多功能來讓你的團隊更省時省事，Service Mesh 要不要使用會建議在專案比較早期的階段就決定會比較好，而很多人決定的方式都是...要更安全，所以要 mTLS，所以要 Service Mesh，然後就用了，但作者認為不能這麼草率地去做這樣的決定，他提出幾個需要考慮的<!-- summary -->要素，讓使用者可以更謹慎的評估要不要去使用 Service Mesh</p>\n<ul>\n<li>\n<p>組織內是否具備擁有 Service Mesh 知識與經驗的人員？<br>\n假如團隊內沒有人知道 Service Mesh 甚至是 Kubernetes 就貿然使用的話，將會對專案造成負面的影響，尤其是當服務發生中斷或是遇到問題時，沒有人有辦法去除錯自己不懂的東西，所以必須確保有人員至少了解 Service Mesh 是什麼，以及他的基本概念</p>\n</li>\n<li>\n<p>準備好面對採用 Service Mesh 將增加的技術債了嗎？<br>\n在 Production 環境使用 Service Mesh 當然比 Get Started 裡面的範例來的複雜很多，例如要怎麼自動化的部署 Service Mesh，怎麼去監控跟追蹤他是否正常，遇到問題的時候要怎麼去除錯跟找出原因，換句話說採用 Service Mesh 需要做的事情會比想像來得多，會有更多的設定需要在架構面落實，並且可能因此引入更多的工具並且也需要去維護它，這些都將有可能導致技術債的增加</p>\n</li>\n<li>\n<p>Service Mesh 是否與組織的應用程式相容嗎？<br>\n假如是自己開發的應用程式應該是不用擔心跟 Service Mesh 有相容問題，但第三方工具可就不一定了，例如作者發現他在 Argo Workflows 裡面加上 Service Mesh 之後，導致運行時間跟過時的機率增加，也增加了資源的使用，所以必須要先做過實驗才能知道自己想要使用的工具會不會跟 Service Mesh 八字不合</p>\n</li>\n</ul>\n<h3 id=\"akamai-acquires-linode-for-%24900m\"><a class=\"direct-link\" href=\"#akamai-acquires-linode-for-%24900m\">#</a> <a href=\"https://techcrunch.com/2022/02/15/akamai-acquires-linode-for-900m/\">Akamai acquires Linode for $900M</a></h3>\n<p>聽到 Akamai 這間公司應該都是聯想到 CDN，但其實他也有提供安全和邊緣運算的相關服務，他在今天宣布將使用 9 億美金併購 Linode，Akamai 預估 Linode 可以為他在 2022 年就帶來 1 億美金的收入，Akamai 宣稱此併購可以讓 Linode 不管是在雲端或是邊緣運算方面變成世界上最分散的運算平台，而在併購後 Linode 將會保持跟以往一樣的運作方式為大家服務</p>\n<h3 id=\"how-to-use-the-linux-cut-command\"><a class=\"direct-link\" href=\"#how-to-use-the-linux-cut-command\">#</a> <a href=\"https://www.howtogeek.com/775824/how-to-use-the-linux-cut-command/\">How to Use the Linux cut Command</a></h3>\n<p>大家或多或少應該都會需要在 Terminal 處理有規則的字串，例如使用 kubectl get pod 後，想把某一些 Pod 給刪除掉，這時候可以先透過 <code>grep</code> 過濾資料，但該如何把 Pod 的名稱從過濾完的資料內再萃取出來呢？這時候就可以使用 Linux 裡面一個很強大的 <code>cut</code> 指令，他可以幫你把結構化資料的特定欄位給抓取出來，透過這篇文章可以詳細的知道如何使用它來讓自已日常工作事半功倍</p>\n<h3 id=\"spongebob-cli\"><a class=\"direct-link\" href=\"#spongebob-cli\">#</a> <a href=\"https://github.com/trakBan/spongebob-cli\">spongebob-cli</a></h3>\n<p>當一直在 Terminal 做事情做到感覺有點疲憊時，該如何讓自己放鬆一下呢？！答案就是下指令 <code>spongebob-cli</code> 看一集海綿寶寶 🤣 自己滿喜歡看海綿寶寶的，因為裡面有很多大人才看得懂的劇情，沒想到有同好竟然把觀看海綿寶寶做成了 CLI 工具，透過該指令還可以選擇要看哪一集，喜歡海綿寶寶的人不要錯過了!</p>\n",
      "date_published": "2022-02-15T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/120/gqsm-120/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/120/gqsm-120/",
      "title": "第 120 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"patterns\"><a class=\"direct-link\" href=\"#patterns\">#</a> <a href=\"https://www.patterns.dev/posts/\">Patterns</a></h3>\n<p>如果最近有想要學習一些開發常用的 Patterns 的話（例如：Design Patterns、Rendering Patterns 和 Performance Patterns），這是一個滿不錯的學習資源，裡面的範例都是用 JavaScript 或是相關的 Framework 撰寫的。快把它存到書籤中，想到就拿起來讀一下吧！</p>\n<!-- summary -->\n<h3 id=\"front-end-development-trends-to-watch-in-2022\"><a class=\"direct-link\" href=\"#front-end-development-trends-to-watch-in-2022\">#</a> <a href=\"https://www.freecodecamp.org/news/front-end-development-trends/\">Front End Development Trends to Watch in 2022</a></h3>\n<p>作者整理了幾個在 2022 年的前端走向，裡頭包含了 <a href=\"https://svelte.dev/\">Svelte</a> 變得越來越流行、前端三巨頭 React、Vue 和 Angular 短時間內都還不會消失，和主流框架必須要繼續支援靜態和動態頁面等，文章裡還有關於上方幾點的詳細資訊和其他更多內容喲！</p>\n<h3 id=\"create-your-word-portrait-using-css\"><a class=\"direct-link\" href=\"#create-your-word-portrait-using-css\">#</a> <a href=\"https://kumarsonsoff.hashnode.dev/word-portrait-using-css#comments-list\">Create Your Word Portrait Using CSS</a></h3>\n<p>作者透過 CSS 裡的 background-clip 屬性，做出了類似用字母排出圖片輪廓的效果，非常有趣！但如果是有密集恐懼症的開發者請慎入！ 😂</p>\n",
      "date_published": "2022-02-15T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/120/andy-120/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/120/andy-120/",
      "title": "第 120 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"nextui\"><a class=\"direct-link\" href=\"#nextui\">#</a> <a href=\"https://nextui.org/\">NextUI</a></h3>\n<p>在前端變化越來越快的年代，又有一套新的 UI Library 誕生了，這套 UI Library 是 NextUI，雖然這名字聽起來好像跟 vercel 團隊做出來的 Next.js 很像，但目前好像不是相關團隊設計出來的，有興趣的讀者可以上來看看這套新的 UI Library。</p>\n<!-- summary -->\n<h3 id=\"yarn-3.0-%F0%9F%9A%80%F0%9F%A4%96-performances%2C-esbuild%2C-better-patches\"><a class=\"direct-link\" href=\"#yarn-3.0-%F0%9F%9A%80%F0%9F%A4%96-performances%2C-esbuild%2C-better-patches\">#</a> <a href=\"https://dev.to/arcanis/yarn-3-0-performances-esbuild-better-patches-e07\">Yarn 3.0 🚀🤖 Performances, ESBuild, Better Patches</a></h3>\n<p>眾所皆知 Yarn 每一代都會有不少大的改動需要調整，假如讀者有想要將專案的 Yarn workspace 升級到 Yarn 3 的話不妨可以先看看 Yarn 3 的一些特性再來決定是否要升版吧XD</p>\n<h3 id=\"%E4%B8%BA%E4%BB%80%E4%B9%88%E7%8E%B0%E5%9C%A8%E6%88%91%E6%9B%B4%E6%8E%A8%E8%8D%90-pnpm-%E8%80%8C%E4%B8%8D%E6%98%AF-npm%2Fyarn%3F\"><a class=\"direct-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E7%8E%B0%E5%9C%A8%E6%88%91%E6%9B%B4%E6%8E%A8%E8%8D%90-pnpm-%E8%80%8C%E4%B8%8D%E6%98%AF-npm%2Fyarn%3F\">#</a> <a href=\"https://jishuin.proginn.com/p/763bfbd3bcff\">为什么现在我更推荐 pnpm 而不是 npm/yarn?</a></h3>\n<p>前端用來進行 package management 的工具越來越多，早期很多 Yarn 派的到後來的 npm 6 到現在又有 pnpm，究竟這幾個 package management 有什麼差別呢？有興趣的讀者可以看看這篇文章。</p>\n",
      "date_published": "2022-02-15T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/119/smalltown-119/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/119/smalltown-119/",
      "title": "第 119 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"scaling-kubernetes-to-over-4k-nodes-and-200k-pods\"><a class=\"direct-link\" href=\"#scaling-kubernetes-to-over-4k-nodes-and-200k-pods\">#</a> <a href=\"https://medium.com/paypal-tech/scaling-kubernetes-to-over-4k-nodes-and-200k-pods-29988fad6ed\">Scaling Kubernetes to Over 4k Nodes and 200k Pods</a></h3>\n<p>PayPal 目前主要的 Workload 運行在 Mesos，而在準備把部分的 Workload 搬遷到 Kubernetes 前，他們需要先測試看看 K8s 的擴展性有沒有辦法滿足他們的需求，他們一開始運行 2,000 Pod 在 1,000 Node 中，接著增加到 16,000 Pod 在 32,000 Node 中，然後跳到 150,000 Pod 在 4,100 Node 中，最後透過增加每台 Node 的 CPU，讓 Pod 的個數上升到 200,000，在這個過程中他們遇到一些挑戰，而這篇文章中描述的他們如何面對且克服這些挑戰的過程 (看起來主要都是在 Control Plane 上的調校)，有興趣的人請詳閱內文</p>\n<!-- summary -->\n<h3 id=\"kubernetes-vault-integration-via-sidecar-agent-injector-vs.-csi-provider\"><a class=\"direct-link\" href=\"#kubernetes-vault-integration-via-sidecar-agent-injector-vs.-csi-provider\">#</a> <a href=\"https://www.hashicorp.com/blog/kubernetes-vault-integration-via-sidecar-agent-injector-vs-csi-provider\">Kubernetes Vault Integration via Sidecar Agent Injector vs. CSI Provider</a></h3>\n<p>HashiCorp Vault 算是目前開源軟體圈內，數一數二的密碼管理工具，而官方這邊跟 Kubernetes 的整合方式有兩種，本文將比較這兩種方式有何不同，根據結論來看的話，第一種方式功能比較齊全，詳細比較的可以參考內文</p>\n<ol>\n<li>The Vault Sidecar Agent Injector</li>\n</ol>\n<p>透過 <a href=\"https://github.com/hashicorp/vault-k8s\">vault-k8s</a> 這個 Project 所實作的 Side Car 模式，讓 K8s mutating webhook controller 將機敏資料注入到 Pod 中</p>\n<ol start=\"2\">\n<li>The Vault Container Storage Interface (CSI) provider</li>\n</ol>\n<p>透過 <a href=\"https://www.vaultproject.io/docs/platform/k8s/csi\">Vault CSI provider</a> 讓 Pod 可以直接去使用暫時性的 <a href=\"https://github.com/kubernetes-sigs/secrets-store-csi-driver\">CSI Secrets Store</a> 空間</p>\n<h3 id=\"decoupled-microservices-architecture-with-materialize\"><a class=\"direct-link\" href=\"#decoupled-microservices-architecture-with-materialize\">#</a> <a href=\"https://dev.to/bobbyiliev/decoupled-microservices-architecture-with-materialize-2l67\">Decoupled Microservices Architecture with Materialize</a></h3>\n<p>目前有數種方式可以用來處理 Microservice Architecture 中的資料，本文想要介紹幾種分散式資料庫的做法，而作者主要講解的東西是構築於 <a href=\"https://www.youtube.com/channel/UCCYR9GpcE3skVnyMU8Wx1kQ\">Houssem Dellai</a> 的影片 - <a href=\"https://www.youtube.com/watch?v=31AD6Nobt1o\">Data in a Microservice Architecture</a> 之上，文中假設有一個電子商務網站，並且由兩個 Microservice 所構成 (Catalog Service &amp; Basket Service)，兩個服務前面由 API Gateway 負責接收請求，並且有各自的資料庫，而且為了讓 Basket 可以跟 Catalog 溝通，所以中間還有實作 Restful API，這個架構最大的問題就在於 Basket 對於 Catalog 的高耦合，所以有不少缺點，那要如何改善這樣的架構呢？答案就在文中！</p>\n",
      "date_published": "2022-02-08T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/119/gqsm-119/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/119/gqsm-119/",
      "title": "第 119 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"4-most-important-features-coming-in-es2022-that-you-should-know-about\"><a class=\"direct-link\" href=\"#4-most-important-features-coming-in-es2022-that-you-should-know-about\">#</a> <a href=\"https://medium.com/@bsalwiczek/4-most-important-features-coming-in-es2022-that-you-should-know-about-f7e18c1bff9b\">4 most important features coming in ES2022 that you should know about</a></h3>\n<p>JavaScript 的新標準 ES2022 會在今年的六月釋出，而這篇文章會介紹 4 個已經在 TC39 中達到第 4 階段的酷東西。其中包含了 Array 的 <code>at()</code>、使用 <code>new Error</code> 時可帶的 <code>cause</code>、<code>Top-level await</code> 和 Class 中的 Private 成員。</p>\n<!-- summary -->\n<h3 id=\"react-virtual-dom-%E2%80%93-explained-in-simple-words\"><a class=\"direct-link\" href=\"#react-virtual-dom-%E2%80%93-explained-in-simple-words\">#</a> <a href=\"https://tekolio.com/react-virtual-dom-explained-in-simple-words/\">React Virtual DOM – Explained in Simple words</a></h3>\n<p>文章中解釋了 React 中的 Virtual DOM 的運作概念，以及使用 Virtual DOM 的優勢，內容沒有涉及到太艱深的底層原理，連用詞都簡單到我不用翻譯就完全看懂了呢！😂</p>\n<h3 id=\"%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F\">#</a> <a href=\"https://juejin.cn/post/7060851296491798535\">前端的设计模式系列-责任链模式</a></h3>\n<p>作者以改寫一道演算法為例子，描述責任鏈模式的使用場景，以及如何用 JavaScript 來實現該設計模式想提供給開發者的意義。</p>\n",
      "date_published": "2022-02-08T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/119/andy-119/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/119/andy-119/",
      "title": "第 119 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"%E4%BD%A0%E7%9F%A5%E9%81%93%E7%9A%84-javascript-%E7%9F%A5%E8%AD%98%E9%83%BD%E6%9C%89%E5%8F%AF%E8%83%BD%E6%98%AF%E9%8C%AF%E7%9A%84\"><a class=\"direct-link\" href=\"#%E4%BD%A0%E7%9F%A5%E9%81%93%E7%9A%84-javascript-%E7%9F%A5%E8%AD%98%E9%83%BD%E6%9C%89%E5%8F%AF%E8%83%BD%E6%98%AF%E9%8C%AF%E7%9A%84\">#</a> <a href=\"https://blog.huli.tw/2022/01/30/how-to-validate-javascript-knowledge/?fbclid=IwAR17M-W6YRBGF01YI0DaFNmY1_mYRIJQxcKcXBagl5U3R9T6khmTHlngCSg\">你知道的 JavaScript 知識都有可能是錯的</a></h3>\n<p>眾所皆知 JavaScript 是個擁有非常多地雷等著開發者去踩，一些你對於 JavaScript 觀念上的認知在你還沒去研讀 ECMAScript 的 spec 之前，有可能跟你想像的結果是不一樣，作者在這篇文章整理了一些你可能在認知上是錯誤的 JavaScript 小知識。</p>\n<!-- summary -->\n<h3 id=\"webpack-or-esbuild%3A-why-not-both%3F\"><a class=\"direct-link\" href=\"#webpack-or-esbuild%3A-why-not-both%3F\">#</a> <a href=\"https://blog.logrocket.com/webpack-or-esbuild-why-not-both/\">webpack or esbuild: Why not both?</a></h3>\n<p>Builder 的套件一直以來都是前端工程師必備的技能，目前檯面上最有名的莫過於是 Webpack 了，Webpack 擁有強大的 plugins 可以使用，然而最近也有一個很強大的 builder 叫 esbuild，esbuild 擁有強大的編譯效率來減少 build 的時間，身為工程師的我們一定要想辦法達到兩個都要的效果，這篇文章就利用了 <a href=\"https://github.com/privatenumber/esbuild-loader\">esbuild-loader</a> 這個 webpack 的 loader 來提升 webpack 的 build 效率。</p>\n<h3 id=\"10-must-know-patterns-for-writing-clean-code-with-react-and-typescript\"><a class=\"direct-link\" href=\"#10-must-know-patterns-for-writing-clean-code-with-react-and-typescript\">#</a> <a href=\"https://dev.to/alexomeyer/10-must-know-patterns-for-writing-clean-code-with-react-and-typescript-1m0g\">10 Must-Know Patterns for Writing Clean Code with React and TypeScript</a></h3>\n<p>Clean code 一直以來都是許多開發者想要追求的最終目標，然而實務上真的是不好達成XD<br>\n這篇文章作者舉了 10 個例子並且用 React 搭配 TypeScript 的方式來撰寫 clean code，有興趣的讀者可以收藏起來日後閱讀，畢竟 clean code 真的太難了XD</p>\n",
      "date_published": "2022-02-08T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/118/smalltown-118/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/118/smalltown-118/",
      "title": "第 118 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"kubernetes-jobs-market-trends-for-2021\"><a class=\"direct-link\" href=\"#kubernetes-jobs-market-trends-for-2021\">#</a> <a href=\"https://kube.careers/report-2021-q4\">Kubernetes jobs market trends for 2021</a></h3>\n<p>在 2022 的一開始讓我們來回顧一下 2021 年 Kubernetes 相關工作職缺的趨勢吧！從數量上來看的話， 2021 Q3 是最多 Kubernetes 工作職缺出現的時候，而在這些工作職缺中，以北美和歐洲為最大宗，份別佔比 30% 和 29% (東南亞為 15%)；而且在所有 Kubernetes 職缺中有超過 21% 為純遠端，而這些職缺在美國平均來說薪資範圍落在 US$ 123,494 到 US$ $162,177，比較高的薪資區間落在 US$200,000 到 US$ 260,000，而且從 Q1 到 Q4 平均薪資慢慢增加 10%</p>\n<p>在 91.66% 中的職缺中並不要求應徵者需要具備證照，假如有提到的話，以 AWS 證照為最大宗，再來則是 CKA, 接著分別是 GCP 和 Azure 的證照，有一半左右的職缺提及 Configuration Management 工具的使用能力，其中以 Terraform 為大宗，再來則是 Ansible...想知道其他更多關於 Kubernetes 職缺需要具備哪些技術門檻可以直接參考內文</p>\n<!-- summary -->\n<h3 id=\"announcing-the-kubernetes-policy-management-paper\"><a class=\"direct-link\" href=\"#announcing-the-kubernetes-policy-management-paper\">#</a> <a href=\"https://www.cncf.io/blog/2022/01/28/announcing-the-kubernetes-policy-management-paper/\">Announcing the Kubernetes Policy Management Paper</a></h3>\n<p>Kubernetes Seucirty SIG 和 Policy WG 最近一起釋出 Kubernetes Policy Management 的白皮書，用來協助社群了解使用 Policy 管理 K8s 組態的最佳方式；這份白皮書目標在於讓大家知曉為什麼 K8s Policy 的管理對於 K8s Cluster 和 Worklaod 的安全性和自動化為什麼如此的重要，同時也描述 K8s Policy 可以協助解決什麼樣的問題，以及怎麼去實作 K8s Policy，有興趣的人可以直接到這個 <a href=\"https://github.com/kubernetes/sig-security/tree/main/sig-security-docs/papers/policy\">GitHub</a> 連結裡面去下載白皮書 PDF 檔案來研究看看</p>\n<h3 id=\"6-programming-languages-you-should-not-learn-(and-what-to-learn-instead)\"><a class=\"direct-link\" href=\"#6-programming-languages-you-should-not-learn-(and-what-to-learn-instead)\">#</a> <a href=\"https://levelup.gitconnected.com/6-programming-languages-you-should-not-learn-and-what-to-learn-instead-95c0c3ff1fa1\">6 Programming Languages You Should Not Learn (and What To Learn Instead)</a></h3>\n<p>學習一門新的語言可以是一段很有趣的旅程，但學習新事物意味著在時間上的投資，還有你的精力，甚至是全心投入，換句話說，做出一定程度的犧牲是難免的，因此一開始如何做出正確的決定就相當的重要，所以作者列舉出 6 個不應該去學習的語言，並且述說為什麼不該去學習他們，而是應該去學習其他的替代語言，底下簡單條列重點，細節可以參考原文</p>\n<ol>\n<li>Objective-C -&gt; Swift</li>\n<li>Jave -&gt; Kotlin or Scala</li>\n<li>HTML and CSS -&gt; Javascript</li>\n<li>PHP -&gt; Python, Javascript or Go</li>\n<li>C -&gt; Rust or Ruby</li>\n<li>C++ -&gt; Rust or Ruby</li>\n</ol>\n",
      "date_published": "2022-02-01T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/118/gqsm-118/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/118/gqsm-118/",
      "title": "第 118 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"learn-typescript-%E2%80%93-the-ultimate-beginners-guide\"><a class=\"direct-link\" href=\"#learn-typescript-%E2%80%93-the-ultimate-beginners-guide\">#</a> <a href=\"https://www.freecodecamp.org/news/learn-typescript-beginners-guide/\">Learn TypeScript – The Ultimate Beginners Guide</a></h3>\n<p>如同文章標題，如果是想要學習 TypeScript 的初學者，那這是篇很好入門的文章。雖然文章內容偏長，但剛好可以利用年假找時間看完！😂</p>\n<!-- summary -->\n<h3 id=\"how-to-make-money-with-css%3F\"><a class=\"direct-link\" href=\"#how-to-make-money-with-css%3F\">#</a> <a href=\"https://nazanin-ashrafi.hashnode.dev/how-to-make-money-with-css#comments-list\">How To Make Money With CSS?</a></h3>\n<p>CSS 不只可以拿來讓網頁變得更漂亮，還可以拿來賺錢？如果你熱愛 CSS，並且理解 CSS 的話，也許能考慮作者介紹幾個利用 CSS 這項技能賺取額外收入的方式！</p>\n<h3 id=\"my-honest-opinion-on-tailwind-css\"><a class=\"direct-link\" href=\"#my-honest-opinion-on-tailwind-css\">#</a> <a href=\"https://h.daily-dev-tips.com/my-honest-opinion-on-tailwind-css\">My honest opinion on Tailwind CSS</a></h3>\n<p>對於 Tailwind CSS，作者認為如果你還沒有相當的經驗，那就不太適合使用 Tailwind CSS，因為你可能無法找到正確的 class 實現你想做的事情，那對於熟悉 CSS 的開發者又如何呢？看看文章怎麼說吧！🙌</p>\n<h3 id=\"making-pixel-art-with-pure-css\"><a class=\"direct-link\" href=\"#making-pixel-art-with-pure-css\">#</a> <a href=\"https://pokecoder.hashnode.dev/making-pixel-art-with-pure-css\">Making pixel-art with pure CSS</a></h3>\n<p>在 CodePen 上常常看到一些把 CSS 用到出神入化的開發者，雖然我沒辦法理解那些看了也不懂的 CSS，但要學學這篇文章的像素藝術還是沒問題的！</p>\n<h3 id=\"why-you-should-use-a-developer-font\"><a class=\"direct-link\" href=\"#why-you-should-use-a-developer-font\">#</a> <a href=\"https://dev.to/anthonyjdella/why-you-should-use-a-developer-font-2gio\">Why you should use a developer font</a></h3>\n<p>在幾個月前我才安裝了開發者字體（單純覺得帥 😂），但從來沒有了解過開發者字體為什麼存在，這篇文章提供了幾個開發者字體的特別之處！🙌</p>\n<h3 id=\"%E4%B8%80%E8%B5%B7%E7%A8%8D%E5%BE%AE%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B-v8-%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B\"><a class=\"direct-link\" href=\"#%E4%B8%80%E8%B5%B7%E7%A8%8D%E5%BE%AE%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B-v8-%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B\">#</a> <a href=\"https://juejin.cn/post/7059361714575245319\">一起稍微了解一下 V8 的工作流程</a></h3>\n<p>V8 引擎是 Google 開發用來解析 JavaScript 用的開源專案，但你知道 V8 引擎是如何解析 JavaScript 的嗎？</p>\n",
      "date_published": "2022-02-01T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/117/smalltown-117/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/117/smalltown-117/",
      "title": "第 117 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"90daysofdevops\"><a class=\"direct-link\" href=\"#90daysofdevops\">#</a> <a href=\"https://github.com/MichaelCade/90DaysOfDevOps\">90DaysOfDevOps</a></h3>\n<p>iThome 鐵人賽是要在一個月內完成每天一篇技術文章的挑戰，而這個作者打算做的是三倍份量，也就是 90 天！開始時間就是今年 2022/01/01，預計結束時間為 2022/03/31，他打算使用 90 天的時間來介紹有關於 DevOps 領域的相關知識，預計會處理 13 個技術領域，從介紹 DevOps 開始，學習程式語言，認識 Linux 基礎，了解網路知識，探討一個 Cloud Provider，如何使用 Git，容器，Kubernetes，學習 IaC，自動化組態管理，建立 CI/CD Pipeline，監控與日誌管理，儲存和資料保護！</p>\n<!-- summary -->\n<h3 id=\"multiple-github-accounts-on-one-laptop\"><a class=\"direct-link\" href=\"#multiple-github-accounts-on-one-laptop\">#</a> <a href=\"https://dev.to/osipovsimon/multiple-github-accounts-on-one-laptop-2dmg\">Multiple GitHub accounts on one laptop</a></h3>\n<p>假如自己私人跟公司都使用 GitHub 來儲存程式碼，兩邊都需要推 Code，而且你不想要使用公司帳號額外建立一個 GitHub 帳號的話，那該怎麼做呢？解決的方法有兩個，分別是 SSH Configuration 或是 git URL re-writing 來達成，有興趣的人可以參考這篇文章來試試看</p>\n<h3 id=\"9-open-source-add-ons-to-improve-your-mozilla-firefox-experience\"><a class=\"direct-link\" href=\"#9-open-source-add-ons-to-improve-your-mozilla-firefox-experience\">#</a> <a href=\"https://itsfoss.com/best-firefox-add-ons/\">9 Open Source Add-Ons to Improve Your Mozilla Firefox Experience</a></h3>\n<p>相信除了 Chrome 之外，大家應該或多或少會有第二選擇的瀏覽器，像我自己就是使用 Firefox，這篇文章介紹九個加強 Firefox 的開源 Add-Ons，例如有可以讓網站變成黑色模式的 Dark Reader，密碼管理工具 Bitwarden，設定快捷鍵功能工具 Vimium-FF...等，有在使用 Firefox 的人可以參考詳細內文去安裝有興趣的 Add-Ons</p>\n",
      "date_published": "2022-01-25T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/117/gqsm-117/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/117/gqsm-117/",
      "title": "第 117 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"css-practices-to-avoid-as-a-web-developer\"><a class=\"direct-link\" href=\"#css-practices-to-avoid-as-a-web-developer\">#</a> <a href=\"https://enlear.academy/5-css-practices-to-avoid-as-a-web-developer-d7645fb51d53\">CSS Practices To Avoid as a Web Developer</a></h3>\n<p>在寫 CSS 的時候會因為想要使用某些寫法，而去設定相關的屬性，以確保畫面顯示的正確（例如有些開發者會在使用 <code>position</code> 的時候，再另外將 <code>display</code> 設定成 <code>block</code>），但在某些 element 上其實是不需要這麼做的，只要你懂 element，那 element 就會幫你，一起來看看文章中舉的例子吧。 🙌</p>\n<!-- summary -->\n<h3 id=\"%E5%A6%82%E4%BD%95%E5%90%88%E7%90%86%E7%9A%84%E4%BD%BF%E7%94%A8-react-context\"><a class=\"direct-link\" href=\"#%E5%A6%82%E4%BD%95%E5%90%88%E7%90%86%E7%9A%84%E4%BD%BF%E7%94%A8-react-context\">#</a> <a href=\"https://juejin.cn/post/7056696289559314446\">如何合理的使用 React Context</a></h3>\n<p>React Context 的使用非常容易，但是在容易使用的背後，還要特別注意透過 <code>Context.Provider</code> 取得資料的 component，是否存在著不必要的 render 問題。</p>\n<h3 id=\"14-github-repositories-to-ace-your-javascript-interviews-%F0%9F%8E%AF-%F0%9F%9A%80\"><a class=\"direct-link\" href=\"#14-github-repositories-to-ace-your-javascript-interviews-%F0%9F%8E%AF-%F0%9F%9A%80\">#</a> <a href=\"https://dev.to/madza/14-github-repositories-to-ace-your-javascript-interviews-1phi\">14 GitHub Repositories to Ace Your JavaScript Interviews 🎯 🚀</a></h3>\n<p>相信在等到公司的年終三寶「尾牙、抽獎和年終」後，某些人已經準備好履歷要大投特投了，但是前端那麼大，該如何準備起呢？這裡剛好整理了 14 個和面試相關的 GitHub 專案，讓你在面試前的準備可以衝刺一波！</p>\n",
      "date_published": "2022-01-25T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/117/andy-117/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/117/andy-117/",
      "title": "第 117 期 Testing 推薦文章",
      "content_html": "<h2 id=\"testing\"><a class=\"direct-link\" href=\"#testing\">#</a> Testing</h2>\n<!-- summary -->\n<h3 id=\"%E8%AE%93%E6%88%91%E5%80%91%E4%BD%BF%E7%94%A8-cypress-%E9%96%8B%E5%A7%8B%E7%82%BA-liff-app-%E6%92%B0%E5%AF%AB%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6\"><a class=\"direct-link\" href=\"#%E8%AE%93%E6%88%91%E5%80%91%E4%BD%BF%E7%94%A8-cypress-%E9%96%8B%E5%A7%8B%E7%82%BA-liff-app-%E6%92%B0%E5%AF%AB%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6\">#</a> <a href=\"https://engineering.linecorp.com/zh-hant/blog/cypress-liff-unit-test/\">讓我們使用 Cypress 開始為 LIFF app 撰寫單元測試</a></h3>\n<p>隨著前端越來越複雜，測試這門學會也是越來越被大家重視，然而前端很多時候都是要仰賴使用者的操作才能讓元素有真正的效果，在這種 end-to-end testing 中 <a href=\"https://www.cypress.io/\">cypress.js</a> 可以說是相當有名的套件，這篇文章就在介紹 cypress 的測試方式，有興趣的讀者不妨可以收藏起來日後閱讀。</p>\n<!-- summary -->\n<h3 id=\"%E8%A1%97%E5%8F%A3%E6%94%AF%E4%BB%98-api-%E8%87%AA%E5%8B%95%E5%8C%96%E6%B8%AC%E8%A9%A6%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88\"><a class=\"direct-link\" href=\"#%E8%A1%97%E5%8F%A3%E6%94%AF%E4%BB%98-api-%E8%87%AA%E5%8B%95%E5%8C%96%E6%B8%AC%E8%A9%A6%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88\">#</a> <a href=\"https://medium.com/@dopizz/%E8%A1%97%E5%8F%A3%E6%94%AF%E4%BB%98-api-%E8%87%AA%E5%8B%95%E5%8C%96%E6%B8%AC%E8%A9%A6%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88-ecf9ec0d0209\">街口支付 API 自動化測試解決方案</a></h3>\n<p>這篇文章真的是把測試寫得相當深入，尤其像街口這麼大的公司測試更是重要，這篇文章從 QA 的角度下去說明一些測試的技巧，個人覺得蠻不錯的有興趣的讀者可以閱讀看看~</p>\n<h3 id=\"react-snapshot-testing-with-jest%3A-an-introduction-with-examples\"><a class=\"direct-link\" href=\"#react-snapshot-testing-with-jest%3A-an-introduction-with-examples\">#</a> <a href=\"https://blog.openreplay.com/react-snapshot-testing-with-jest-an-introduction-with-examples\">React Snapshot Testing With Jest: An Introduction With Examples</a></h3>\n<p>在前端的測試除了 end-to-end testing 外還有另一個前端工程師可以做的就是 snapshot testing，透過 snapshot 我們可以確保元素會正常的 render 出我們想要的結構，這篇文章就在介紹 React 的 snapshot testing，有興趣的讀者可以閱讀看看。</p>\n",
      "date_published": "2022-01-25T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/116/smalltown-116/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/116/smalltown-116/",
      "title": "第 116 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"my-jq-cheatsheet\"><a class=\"direct-link\" href=\"#my-jq-cheatsheet\">#</a> <a href=\"https://medium.com/geekculture/my-jq-cheatsheet-34054df5b650\">My jq Cheatsheet</a></h3>\n<p>身為一位 SRE 或是 DevOps 應該都有使用過 jq 這個強大的 CLI 工具，透過他可以很輕鬆地在 Terminal 環境處理 JSON 格式的資料，這篇文章的作者分享了他使用 jq 來處理由 kubectl 所獲的 JSON 資料 (可以下 flag <code>-o json</code> 獲取)，去過濾自己真的需要且重要的資訊來使用</p>\n<!-- summary -->\n<h3 id=\"postman-now-supports-grpc\"><a class=\"direct-link\" href=\"#postman-now-supports-grpc\">#</a> <a href=\"https://blog.postman.com/postman-now-supports-grpc/\">Postman Now Supports gRPC</a></h3>\n<p>相信應該有不少人都會使用 Postman 來測試線上服務，他在最新的版本 v9.7.1 宣布支援 gRPC 協定，一旦上傳 API 的 Protobuf 定義檔案 (.proto)，Postman 就可以自動得知所有的 Service 與 Method，並且會為每一個 Method 產生對應的範例 Payload，具體的功能支援內容與使用方式，請參考內文</p>\n<h3 id=\"5-best-online-tools-to-check-dns-records\"><a class=\"direct-link\" href=\"#5-best-online-tools-to-check-dns-records\">#</a> <a href=\"https://geekflare.com/online-tools-to-check-dns-records/\">5 Best Online Tools to Check DNS Records</a></h3>\n<p>當 DNS Record 設定錯誤時，將會導致你提供的服務無法正常使用，而在查詢 DNS Record 是哪邊出問題時，首先要做的當然就是先把 DNS Record 的詳細設定給撈出來好好地檢查一番，但要如何快速的檢查任何網站的 DNS Record 呢？這篇文章推薦了五個線上工具供大家使用，趕快加入到最愛書籤內，下次有需要時就可以馬上拿出來使用</p>\n",
      "date_published": "2022-01-18T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/116/gqsm-116/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/116/gqsm-116/",
      "title": "第 116 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"2021-javascript-rising-stars\"><a class=\"direct-link\" href=\"#2021-javascript-rising-stars\">#</a> <a href=\"https://risingstars.js.org/2021/en\">2021 JavaScript Rising Stars</a></h3>\n<p>前端進化的速度如此之快，那你知道在 2021 年的時候有哪些框架或工具屹立不搖，或是崛起了嗎？一起來看看這篇文章從各種類型的 repositories 中整理的數據吧！</p>\n<!-- summary -->\n<h3 id=\"how-to-build-your-first-javascript-github-action)\"><a class=\"direct-link\" href=\"#how-to-build-your-first-javascript-github-action)\">#</a> <a href=\"https://www.freecodecamp.org/news/build-your-first-javascript-github-action/\">How to Build Your First JavaScript GitHub Action)</a></h3>\n<p>GitHub Actions 可以讓你透過你定義的 Actions，替你執行一些固定且重複的操作。本篇文章中，作者會從一開始建立專案到寫出一個替 PR 增加 Label 的 Action，如果對 GitHub Actions 有興趣想入門的話，推薦看一下！</p>\n<h3 id=\"%E4%B8%8D%E4%BC%98%E9%9B%85%E7%9A%84-react-hooks\"><a class=\"direct-link\" href=\"#%E4%B8%8D%E4%BC%98%E9%9B%85%E7%9A%84-react-hooks\">#</a> <a href=\"https://juejin.cn/post/7051535411042058271\">不优雅的 React Hooks</a></h3>\n<p>這篇的作者提到一些在使用 React 的 Hooks 時，會讓工程師感到違反直覺的部分，算是從不同的角度看待 React 的 Hooks，還滿有趣的！</p>\n",
      "date_published": "2022-01-18T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/116/andy-116/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/116/andy-116/",
      "title": "第 116 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"creating-next.js-monorepo\"><a class=\"direct-link\" href=\"#creating-next.js-monorepo\">#</a> <a href=\"https://medium.com/wesionary-team/creating-next-js-monorepo-d41ea78f4afb\">Creating Next.js monorepo</a></h3>\n<p>monorepo 在現代的前端社會中越來越重要了，其實 monorepo 的實現方式有好幾種，這篇文章用 Next.js 結合 lenra 來實現 monorepo，有興趣的讀者不妨可以看看如何作者是如何實現的。</p>\n<!-- summary -->\n<h3 id=\"why-turborepo-will-be-the-first-big-trend-of-2022\"><a class=\"direct-link\" href=\"#why-turborepo-will-be-the-first-big-trend-of-2022\">#</a> <a href=\"https://dev.to/swyx/why-turborepo-will-be-the-first-big-trend-of-2022-4gfj\">Why TurboRepo Will Be The First Big Trend of 2022</a></h3>\n<p>TurboRepo 可以說是目前最潮的 monorepo 架構了，究竟 turborepo 可以帶給我們什麼全新的體驗，不妨可以看看這篇文章。</p>\n<h3 id=\"%E5%BF%8D%E8%A1%93%EF%BC%81%E6%8A%8A-same-site-%E8%AE%8A-same-origin-%E4%B9%8B%E8%A1%93%EF%BC%81\"><a class=\"direct-link\" href=\"#%E5%BF%8D%E8%A1%93%EF%BC%81%E6%8A%8A-same-site-%E8%AE%8A-same-origin-%E4%B9%8B%E8%A1%93%EF%BC%81\">#</a> <a href=\"https://blog.huli.tw/2022/01/16/same-site-to-same-origin-document-domain/?fbclid=IwAR0T0gTybWxOYtTYV2hwUxJPHuNTDIokysmypEjz-oBmerZvKrU15tIyQFw\">忍術！把 same site 變 same origin 之術！</a></h3>\n<p>CORS 一直都是網頁工程師必須要學的基本觀念，然而 same site 卻有可能藉由一些操作達到 same origin 的作用，這真的是太神奇了，就讓我們隨著胡立大大的腳步一起探索 CORS 的世界吧！</p>\n",
      "date_published": "2022-01-18T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/115/smalltown-115/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/115/smalltown-115/",
      "title": "第 115 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"the-state-of-enterprise-linux-in-2022\"><a class=\"direct-link\" href=\"#the-state-of-enterprise-linux-in-2022\">#</a> <a href=\"http://crunchtools.com/the-state-of-enterprise-linux-in-2022/\">The State Of Enterprise Linux In 2022</a></h3>\n<p>近年來 Enterprise Linux 滿熱鬧的，例如 CentOS Stream 作為 Red Hat Enterprise Linux 上游的宣布， Alma Linux 和 Rocky Linux 作為 CentOS 下游的宣布，還有作為 Fedora 下游 AWS Linux 2022...等，那麼這一些 Enterprise Linux 在 2022 年的情況又是如何呢？</p>\n<!-- summary -->\n<h3 id=\"the-full-stack-developer-vocabulary(the-full-list!)\"><a class=\"direct-link\" href=\"#the-full-stack-developer-vocabulary(the-full-list!)\">#</a> <a href=\"https://dev.to/code_jedi/the-full-stack-developer-vocabularythe-full-list-4n5d\">The Full-Stack Developer Vocabulary(The Full List!)</a></h3>\n<p>身為一位 Full-Stack Developer 帶一本科技辭海在身上也是很合理的XD 畢竟 Full-Stack 要懂的東西這麼多，而且還一直有新東西冒出來，所以這篇文章很貼心的幫大家把常見的詞彙跟說明給列出來，讓大家在日常溝通時可以順暢無礙，避免雞同鴨講的狀況發生</p>\n<h3 id=\"advanced-git-concepts-you-should-know\"><a class=\"direct-link\" href=\"#advanced-git-concepts-you-should-know\">#</a> <a href=\"https://dev.to/ruppysuppy/advanced-git-concepts-you-should-know-nle\">Advanced Git Concepts You Should Know</a></h3>\n<p>一般來說，使用 Git 最常用的指令就是 <code>git pull</code>, <code>git add</code>, <code>git commit</code>, <code>git push</code>，不過隨著使用的時間或是合作人數增加時，一定會需要一些比較進階一點點的操作，這篇文章便想要帶大家認識一下 Stash, Reflog, cherry-pick, Rebase，除此之外也解釋了各種常見的 Merge 策略</p>\n",
      "date_published": "2022-01-11T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/115/gqsm-115/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/115/gqsm-115/",
      "title": "第 115 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"2022-%E5%B9%B4%E7%9A%84-css\"><a class=\"direct-link\" href=\"#2022-%E5%B9%B4%E7%9A%84-css\">#</a> <a href=\"https://juejin.cn/post/7048260643589193765\">2022 年的 CSS</a></h3>\n<p>近幾年的 CSS 不輸給 JavaScript，也推出了許多方便的屬性可以使用（雖然很老套，但 Flex 和 Grid 真的讚到不行），那在 2022 年間又會有哪些新的 CSS 屬性可以使用呢？一起看看作者的回顧和介紹吧！ 🙌</p>\n<!-- summary -->\n<h3 id=\"10-reactjs-coding-challenge-(%F0%9F%92%A5coding-interview-prep%F0%9F%92%A5)\"><a class=\"direct-link\" href=\"#10-reactjs-coding-challenge-(%F0%9F%92%A5coding-interview-prep%F0%9F%92%A5)\">#</a> <a href=\"https://dev.to/frontendengineer/10-reactjs-coding-exercises-with-codepen-exercise-and-solution--22k7\">10 ReactJS Coding Challenge (💥Coding Interview Prep💥)</a></h3>\n<p>如果是在學習 React 的初學者，非常推薦可以試試這篇文章列出的幾個練習題！如果有解不出來的，作者也有提供解答在下方可以參考！</p>\n<h3 id=\"8-techniques-to-write-cleaner-javascript-code\"><a class=\"direct-link\" href=\"#8-techniques-to-write-cleaner-javascript-code\">#</a> <a href=\"https://dev.to/codewithahsan/8-techniques-to-write-cleaner-javascript-code-369e\">8 techniques to write cleaner JavaScript code</a></h3>\n<p>作者提供了 8 個在寫 JavaScript 時常會遇到的情境，並且提供了更容易閱讀的寫法，如果文章中舉的例子剛好被你遇到，那不妨可以考慮使用看看。 🙌</p>\n",
      "date_published": "2022-01-11T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/115/andy-115/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/115/andy-115/",
      "title": "第 115 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"%E5%B8%8C%E6%9C%9B%E6%98%AF%E6%9C%80%E6%B7%BA%E9%A1%AF%E6%98%93%E6%87%82%E7%9A%84-rxjs-%E6%95%99%E5%AD%B8\"><a class=\"direct-link\" href=\"#%E5%B8%8C%E6%9C%9B%E6%98%AF%E6%9C%80%E6%B7%BA%E9%A1%AF%E6%98%93%E6%87%82%E7%9A%84-rxjs-%E6%95%99%E5%AD%B8\">#</a> <a href=\"https://blog.techbridge.cc/2017/12/08/rxjs/\">希望是最淺顯易懂的 RxJS 教學</a></h3>\n<p>最近在學習 redux-observable 時覺得 RxJS 的資料流真的是蠻複雜的一個開發模式，但也因為 RxJS 的資料流可以讓我們可以很順利的解決一些複雜的開發模式，這篇文章用最淺顯易懂的方式帶大家進入 RxJS 的世界，有興趣的讀者不妨可以閱讀看看１</p>\n<!-- summary -->\n<h3 id=\"%E4%B8%80%E8%B5%B7%E6%8E%A2%E8%A8%8E-micro-frontends-%E7%9A%84%E4%B8%96%E7%95%8C\"><a class=\"direct-link\" href=\"#%E4%B8%80%E8%B5%B7%E6%8E%A2%E8%A8%8E-micro-frontends-%E7%9A%84%E4%B8%96%E7%95%8C\">#</a> <a href=\"https://blog.techbridge.cc/2019/01/12/micro-frontends-concept/\">一起探討 Micro Frontends 的世界</a></h3>\n<p>Micro Frontend 的議題在近年來越來越多人在討論，究竟 Micro Frontend 可以帶給我們什麼樣的便利性以及什麼壞處，就讓我們一起閱讀這篇文章一起了解吧１</p>\n<h3 id=\"monorepo-vs-multi-repo%3A-pros-and-cons-of-code-repository-strategies\"><a class=\"direct-link\" href=\"#monorepo-vs-multi-repo%3A-pros-and-cons-of-code-repository-strategies\">#</a> <a href=\"https://kinsta.com/blog/monorepo-vs-multi-repo/\">Monorepo vs Multi-Repo: Pros and Cons of Code Repository Strategies</a></h3>\n<p>一般來說正常的公司都是利用 multi repo 的方式來進行開發，可能會分成前端、後端、middleware 等等專案最後再將這些專案一起搬到同一台機器上互相獨立啟動並且溝通，但最近也有另一個聲量是 mono repo，也就是將所有的專案都集中在同一個 repo 底下，究竟這兩種管理方式有什麼優點跟缺點，這篇文章有詳細探討一番，有興趣的讀者可以參考看看喔１</p>\n",
      "date_published": "2022-01-11T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/114/smalltown-114/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/114/smalltown-114/",
      "title": "第 114 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"11-things-i-learned-after-becoming-a-coding-interviewer\"><a class=\"direct-link\" href=\"#11-things-i-learned-after-becoming-a-coding-interviewer\">#</a> <a href=\"https://betterprogramming.pub/11-things-i-learned-after-becoming-a-coding-interviewer-b951370ebda7\">11 Things I Learned After Becoming a Coding Interviewer</a></h3>\n<p>大家這次的年終有超過 40 個月嗎？要是沒有的話是不是要準備看新的工作機會啦 (大誤)，身為一個工程師擔任應徵者的機會通常比面試官來得多，作者在他將近七年的職涯中參加過 40 次的面試，他通常會因為感到緊張，尷尬和沒自信，而在 Coding 的面試階段失敗，他總是覺得面試官就像神一樣，隨時要對他宣判什麼，而最近他的職位變得相對資深，所以開始需要規律的當面試官，所以他想要分享 11 件事情給準備參加面試的人</p>\n<!-- summary -->\n<ol>\n<li>面試官並不會將履歷鉅細彌遺地看過，過往的工作經驗也不代表目前的 Coding 技巧有多強，所以不用花太多時間去準備自我介紹的部分</li>\n<li>面試官可能也跟應徵者一樣緊張，因為兩者都在做一件不是日常工作會做的事情，面試官也會怕被應徵者問倒</li>\n<li>多說一點話可以幫助自己，畢竟一面試就馬上開始寫程式有點怪，總是需要暖機一下，例如利用前面提到沒那麼重要的自我介紹，然後再真的寫程式時，可以多跟面試官確定問題，解釋為什麼要這樣寫...等，讓彼此融入在面試的過程中，這將會使面試官留下較好的印象</li>\n<li>寫程式的技能不是唯一的衡量標準，溝通能力是一個更重要的決定因素，所謂的溝通不只是在於你說了什麼，你如何去表達也很重要，例如發音，語速，面部表情...等</li>\n<li>尋求協助並不丟臉，假如你在寫程式的過程中卡關了，可以適時地尋求協助，不要花太多時間讓自己一個人卡在某個點，因為面試官通常也都很樂意給出一些提示</li>\n<li>一個問題並總是會有完美的答案，其實有時候面試官更想要看到應徵者，講答案逐步組織起來的流程，雖然這筆直接講出某個直接的答案要花時間</li>\n<li>記得要選擇自己熟悉的語言，而不是工作要求裡面的，因為在面試的時候會特別容易被看破手腳，自己熟稔的語言比較不會出包</li>\n<li>通常使用 Google 是可以被允許的，雖然一開始不會明說，但假如應徵者卡關覺得有需要的話，可以對面試官提出請求</li>\n<li>當面試官再打字或是看別的地方時，可能是在做筆記或是看面試小抄，不一定是一邊工作一邊參加面試</li>\n<li>當面試官不說話時，並不表示給應徵者吃閉門羹，因為有時候閒聊會讓應徵者受到影響，面試工程師職務時，還是會以技術相關的內容為衡量依據，其他的不用多想</li>\n<li>面試官比應徵者更希望你可以獲得這份工作，因為招募是很昂貴的流程，因為招募一個人要花很多的時間，假如面試沒有通過就整個要再重來一次</li>\n</ol>\n<h3 id=\"github%E2%80%99s-top-10-blog-posts-of-2021\"><a class=\"direct-link\" href=\"#github%E2%80%99s-top-10-blog-posts-of-2021\">#</a> <a href=\"https://github.blog/2021-12-28-githubs-top-10-blog-posts-of-2021/\">GitHub’s top 10 blog posts of 2021</a></h3>\n<p>在跨入到 2022 之後，好像沒有看到太多 2021 的技術回顧文章，最近好像只有看到這篇 GitHub 回顧自己在 2021 最熱門的十大技術文章，前三名分別是 <a href=\"https://github.blog/2021-08-11-githubs-engineering-team-moved-codespaces/\">GitHub’s Engineering Team has moved to Codespaces</a>，<a href=\"https://github.blog/2021-04-05-behind-githubs-new-authentication-token-formats/\">Behind GitHub’s new authentication token format</a> 和 <a href=\"https://github.blog/2021-06-29-introducing-github-copilot-ai-pair-programmer/\">Introducing GitHub Copilot: your AI pair programmer</a>，這樣的排名結果會讓你覺得出乎意料之外嗎？對於其他十大技術文章有興趣的人可以參閱內文</p>\n<h3 id=\"spotify-system-architecture\"><a class=\"direct-link\" href=\"#spotify-system-architecture\">#</a> <a href=\"https://medium.com/interviewnoodle/spotify-system-architecture-6bb418db6084\">Spotify System Architecture</a></h3>\n<p>目前市面上有很多的音樂串流服務，例如 Spotify, Apple Music, Pandora, Soundcloud 和 Tidal，而今天作者想要跟大家解釋更多有關於  Spotify 這個音樂串流服務，首先從他的系統功能需求開始分析起，例如可以下載歌曲，發現音樂，Spotify Connect...等，接著預估他的 Scale 有多大，例如有多少使用者，歌曲的串流品質需要的頻寬，可以下載多少首歌，支援多少種語言...等，然後根據這些要點將系統架構給勾勒出來，並且逐步分析每一個元件使用的技術，函式庫與演算法...等，讓讀者可以跟著文章一步一步去做一次完整的系統架分析</p>\n",
      "date_published": "2022-01-04T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/114/gqsm-114/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/114/gqsm-114/",
      "title": "第 114 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"defensive-css\"><a class=\"direct-link\" href=\"#defensive-css\">#</a> <a href=\"https://ishadeed.com/article/defensive-css/\">Defensive CSS</a></h3>\n<p>作者舉了非常多的例子舉出可能會讓你的畫面跑版的 CSS 程式碼片段，並且告訴你該如何在該情境下建立防衛機制，減少使用者在使用時出現了意料外的問題。</p>\n<!-- summary -->\n<h3 id=\"how-javascript-works-behind-the-scenes%3F\"><a class=\"direct-link\" href=\"#how-javascript-works-behind-the-scenes%3F\">#</a> <a href=\"https://blog.devgenius.io/how-javascript-works-behind-the-scenes-88c546173f32\">How JavaScript Works behind the scenes?</a></h3>\n<p>這篇文章並沒有講解到許多太深的內容，但是對於 JavaScript 背後的運行原理講解的很全面易懂，很適合想要更了解 JavaScript，但又害怕看到許多專有名詞的初學者入門。</p>\n<h3 id=\"a-smarter-javascript-mapper%3A-array.flatmap()\"><a class=\"direct-link\" href=\"#a-smarter-javascript-mapper%3A-array.flatmap()\">#</a> <a href=\"https://dmitripavlutin.com/javascript-array-flatmap/\">A Smarter JavaScript Mapper: array.flatMap()</a></h3>\n<p>如果看完本週的專欄，還對 JavaScript 的 array methods 意猶未盡，就繼續來看看這個也很方便的 <code>Array.flatMap</code>，<code>Array.flatMap</code> 可以讓你產生新 array 的同時，再過濾掉原 array 的某些元素。</p>\n",
      "date_published": "2022-01-04T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/114/andy-114/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/114/andy-114/",
      "title": "第 114 期 React 推薦文章",
      "content_html": "<h2 id=\"react\"><a class=\"direct-link\" href=\"#react\">#</a> React</h2>\n<!-- summary -->\n<h3 id=\"in-depth-explanation-of-state-and-props-update-in-react\"><a class=\"direct-link\" href=\"#in-depth-explanation-of-state-and-props-update-in-react\">#</a> <a href=\"https://indepth.dev/posts/1009/in-depth-explanation-of-state-and-props-update-in-react\">In-depth explanation of state and props update in React</a></h3>\n<p>React 的更新渲染機制一直以來都是前端工程師必探討的話題，這篇文章深入討論 React 是如何利用 State &amp; Props 的機制來更新整個元件的，有興趣的讀者不妨可以參考看看。</p>\n<!-- summary -->\n<h3 id=\"inside-fiber%3A-in-depth-overview-of-the-new-reconciliation-algorithm-in-react\"><a class=\"direct-link\" href=\"#inside-fiber%3A-in-depth-overview-of-the-new-reconciliation-algorithm-in-react\">#</a> <a href=\"https://indepth.dev/posts/1008/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react\">Inside Fiber: in-depth overview of the new reconciliation algorithm in React</a></h3>\n<p>React fiber 可以說是 React 16 一個相當重要的底層架構，在 fiber 的架構下讓網頁的 re-render 機制可以越來越優化，有興趣的讀者可以參考這篇文章，裡面深入了介紹 React fiber 架構下是如何優化以前的 reconciliation algorithm。</p>\n<!-- summary -->\n<h3 id=\"ssg-vs.-ssr-in-next.js\"><a class=\"direct-link\" href=\"#ssg-vs.-ssr-in-next.js\">#</a> <a href=\"https://blog.logrocket.com/ssg-vs-ssr-in-next-js/\">SSG vs. SSR in Next.js</a></h3>\n<p>隨著網頁越來越複雜，不同的 render 方式也成為了前端工程師必學的過程，從早期的 CSR 到後來的 SSR 甚至是最新的 SSG 都是前端工程師必學的，而 SSG 與 SSR 可以說是類似的概念只是在 server 端做了一些不同的動作，究竟這兩套渲染機制在 Next.js 下會有什麼不同的作用，有興趣的讀者不妨可以參考這個文章。</p>\n",
      "date_published": "2022-01-04T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/113/smalltown-113/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/113/smalltown-113/",
      "title": "第 113 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"slick%3A-adopting-slos-for-improved-reliability\"><a class=\"direct-link\" href=\"#slick%3A-adopting-slos-for-improved-reliability\">#</a> <a href=\"https://engineering.fb.com/2021/12/13/production-engineering/slick/\">SLICK: Adopting SLOs for improved reliability</a></h3>\n<p>相信大家或多或少應該都有聽過 SLO (service-level objectives) 與 SLI (service-level indicator)，Meta (Facebook) 為了能夠中心化管理與定義 SLI 與 SLO，他們建立一個叫做 SLICK 的工具，讓大家可以更簡單查詢與理解所有服務的可靠性；在使用 SLICK 之前，SLO 或是其他有關服務效能的 Metrics 通常儲存在客製化的儀表板，文件或是其他的工具內，假如你想要衡量一個團隊的 SLO，可能需要花上一個小時去搜尋，或是找人問東問西，而且 Meta 以前儲存 Metric 的系統並沒有保留太久的資料，導致幾乎不可能去分析週期比較長的 SLO，但自從使用 SLICK 之後可以達到四個目標：</p>\n<!-- summary -->\n<ol>\n<li>使用統一的方式對所有的服務定義 SLO</li>\n<li>擁有精準度為每分鐘且保存兩年的 Metric 資料</li>\n<li>對於 SLI/SLO 的 Metric 可以有一套標準的視覺化與搜尋方式</li>\n<li>提供週期性的可靠性報告給內部成員，讓團隊可以用來做可靠性檢查</li>\n</ol>\n<p>更多詳細做法可以參考內文，看他還有提供一些 UI 截圖出來，比較可惜的是看起來並不是開源專案</p>\n<h3 id=\"github-may-replace-dockerhub\"><a class=\"direct-link\" href=\"#github-may-replace-dockerhub\">#</a> <a href=\"https://levelup.gitconnected.com/github-may-replace-dockerhub-a5da5e547f01\">GitHub may replace DockerHub</a></h3>\n<p>過去數年來 Docker 的崛起，讓大家一度以為 Linux Container 就叫做 Docker，因為他讓大家很輕易地就可以發布 Container 到免費的 DockerHub，不過作者認為將 DockerHub 視為 Container Image 唯一 Repository 的時代已經過去了，他覺得 GitHub 將會把這個第一名的寶座搶到手，因為 GitHub 目前算是開源專案的不二選擇，所有的開發者幾乎被他握在手中，而且他持續不斷地在加強 CI/CD 功能，改善 Issues, Documentation 還有架站功能，除此之外，近期對於 Package 儲存功能也越來越完整...等，因此他覺得 DockerHub 最後將會被 GitHub 所取代，大家也是這樣覺得嗎？</p>\n<h3 id=\"web-1.0%2C-web-2.0-%26-web-3.0-explained\"><a class=\"direct-link\" href=\"#web-1.0%2C-web-2.0-%26-web-3.0-explained\">#</a> <a href=\"https://dev.to/narottam04/web-10-web-20-web-30-explained-591n\">Web 1.0, Web 2.0 &amp; Web 3.0 Explained</a></h3>\n<p>最近 Web 3.0 這個詞彙突然很熱門！他究竟是什麼呢？這篇文章從 Web 1.0 Beta -&gt; Web 1.0 -&gt; Web 2.0 的定義開始解釋起，並且提出 Web 2.0 的缺點，也就是所有的使用者資料都集中在大公司手上，例如 Google, Facebook，他們靠著販賣大家的資料來賺大錢，而 Web 3.0 主要就是想要建立一個去中心化又安全的網路環境，讓人類可以使用它安全的交換金錢與資訊，而不再需要中介者或是大型科技公司，所以資料不再像 Web 2.0 集中儲存在單一資料庫內，而是像運行在區塊鏈內，Peer to Peer 的節點內的感覺，有人甚至預測在 Web 3.0 的架構下，每個人都會是內容擁有者，公司將會變成由去中心化的團體所運行，又稱為 DAO (Decentralized Autonomous Organization)，而不再需要 CEO 或是任何公司的高層管理組織，而且每個人都是匿名存在於 Web 3.0 中</p>\n<p>有人認為 Web 3.0 只是加密貨幣交易者建立的騙局，然而也有人相信他是可能實現的想法，不過和 Blockchian 一樣，Web 3.0 都還在很早期的階段，所以未來會發展成什麼樣子還很難說...目前也還有很多未解決的問題，因此還有很長的一段路要走，更多參考資訊請參考文章內容</p>\n",
      "date_published": "2021-12-28T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/113/luka-113/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/113/luka-113/",
      "title": "第 113 期 Ruby 推薦文章",
      "content_html": "<h2 id=\"ruby\"><a class=\"direct-link\" href=\"#ruby\">#</a> Ruby</h2>\n<!-- summary -->\n<h3 id=\"from-node-to-ruby-on-rails-%7C-d-u-n-k\"><a class=\"direct-link\" href=\"#from-node-to-ruby-on-rails-%7C-d-u-n-k\">#</a> <a href=\"https://nikodunk.com/a-node-js-developer-discovers-rails/\">From Node to Ruby on Rails | D U N K</a></h3>\n<p>從 Node.js Express 框架到 Rails 的心路歷程。可以更專注在商業邏輯，花更少的力氣組織專案。</p>\n<!-- summary -->\n<h3 id=\"ruby-3.1.0-released\"><a class=\"direct-link\" href=\"#ruby-3.1.0-released\">#</a> <a href=\"https://www.ruby-lang.org/en/news/2021/12/25/ruby-3-1-0-released/\">Ruby 3.1.0 Released</a></h3>\n<p>Ruby 3.1 發佈了，這次有台灣人的 Code 進到了 Ruby 之中，真是可喜可賀！</p>\n<h3 id=\"benchmarking-ruby-2.5-to-3.1\"><a class=\"direct-link\" href=\"#benchmarking-ruby-2.5-to-3.1\">#</a> <a href=\"https://gettalong.org/blog/2021/benchmarking-rubies.html\">Benchmarking Ruby 2.5 to 3.1</a></h3>\n<p>從 Ruby 2.5 到 Ruby 3.1 的效能增進，用 Benchmark 來查看。從各個角度來看，Ruby 3.1 都增加了不少的效能，而不只是增進了 CPU 的處理能力。</p>\n",
      "date_published": "2021-12-28T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/113/gqsm-113/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/113/gqsm-113/",
      "title": "第 113 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"tailwind-css-v3.0\"><a class=\"direct-link\" href=\"#tailwind-css-v3.0\">#</a> <a href=\"https://tailwindcss.com/blog/tailwindcss-v3\">Tailwind CSS v3.0</a></h3>\n<p>Tailwind CSS 在十二月的時候進入到 3.0 囉！除了 Colored box shadows、Scroll snap API 和 Multi-column layout 外，快來看看還有哪些酷東西可以使用！</p>\n<!-- summary -->\n<h3 id=\"writing-clean-code-in-javascript\"><a class=\"direct-link\" href=\"#writing-clean-code-in-javascript\">#</a> <a href=\"https://blog.bitsrc.io/writing-clean-code-in-javascript-dd584bbe1874\">Writing Clean Code in JavaScript</a></h3>\n<p>有些文章只會告訴你該怎麼寫，但沒有告訴你為什麼，但這作者在解釋 arrow function 和 regular function 時，雖然推薦 arrow function，但也提出了你還是該了解它們的差別，並且在適當的時機使用 regular function。</p>\n<h3 id=\"amazing%EF%BC%81%EF%BC%81css-%E4%B9%9F%E8%83%BD%E5%AE%9E%E7%8E%B0%E7%83%9F%E9%9B%BE%E6%95%88%E6%9E%9C%EF%BC%9F\"><a class=\"direct-link\" href=\"#amazing%EF%BC%81%EF%BC%81css-%E4%B9%9F%E8%83%BD%E5%AE%9E%E7%8E%B0%E7%83%9F%E9%9B%BE%E6%95%88%E6%9E%9C%EF%BC%9F\">#</a> <a href=\"https://juejin.cn/post/7046573911957307405\">Amazing！！CSS 也能实现烟雾效果？</a></h3>\n<p>在 CSS 裡，只要透過 <code>text-shadow</code>、<code>opacity</code> 和 <code>transform</code> 的搭配，就可以輕鬆製作出厲害的煙霧效果！</p>\n",
      "date_published": "2021-12-28T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/112/smalltown-112/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/112/smalltown-112/",
      "title": "第 112 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"kubernetes-in-kubernetes-and-the-wedos-pxe-bootable-server-farm\"><a class=\"direct-link\" href=\"#kubernetes-in-kubernetes-and-the-wedos-pxe-bootable-server-farm\">#</a> <a href=\"https://kubernetes.io/blog/2021/12/22/kubernetes-in-kubernetes-and-pxe-bootable-server-farm/\">Kubernetes-in-Kubernetes and the WEDOS PXE bootable server farm</a></h3>\n<p>或許有的人正在想怎麼把應用服務搬遷進到 Kubernetes 中，但你知道現在有個專案叫做 Kubernetes-in-Kubernetes，直接把 Kubernetes 也搬遷到 Kubernetes 中 (好繞口令)，作者會有這樣的構想是因為藉由使用 K8s 的話，其實不只可以像寫程式語言一樣宣告你的應用服務，也可以像寫程式一樣去定義整個 Infrastructure，所以作者就想利用這個特性，將 Multi-Cluster K8s 運行在一個大的 Kubernetes Cluster 中，有興趣了解怎麼做到的人可以參考內文，想要試試看的人也可以透過 Helm 跟幾個簡單的指令部署看看</p>\n<!-- summary -->\n<h3 id=\"a-brief-history-of-code-search-at-github\"><a class=\"direct-link\" href=\"#a-brief-history-of-code-search-at-github\">#</a> <a href=\"https://github.blog/2021-12-15-a-brief-history-of-code-search-at-github/\">A brief history of code search at GitHub</a></h3>\n<p>GitHub 算是工程師平日生活不可或缺的網站之一，而他們最近宣布新的程式碼搜尋功能用以提升開發者的工作效率，例如更容易找到需要的結果，而且可以再搜尋時使用正規表示式，在搜尋時透過 <code>org:</code> 或是 <code>repo:</code> 來限縮限縮搜尋的範圍，或是使用邏輯運算元如 OR, NOT 來做搜尋...等功能，有興趣的人可到<a href=\"https://cs.github.com/\">封測網站註冊</a>；而在新功能推出的同時，也撰寫了這篇文章分享 GitHub 搜尋功能的歷史故事，讓大家知道他們想要達成的目標與進展過程～</p>\n<h3 id=\"improving-platform-efficiency%2C-reliability%2C-and-performance-in-one-week-with-linkerd\"><a class=\"direct-link\" href=\"#improving-platform-efficiency%2C-reliability%2C-and-performance-in-one-week-with-linkerd\">#</a> <a href=\"https://www.cncf.io/blog/2021/12/13/improving-platform-efficiency-reliability-and-performance-in-one-week-with-linkerd/\">Improving platform efficiency, reliability, and performance in one week with Linkerd</a></h3>\n<p>Salt Security 是一間提供 API 防護功能的公司，所以他們的服務不能夠容忍任何的 Down Time, 因為顧客不會有停止遭受攻擊的時候，他們一開始將微服務運行於 Kubernets Cluster 中，而隨著規模越來越大，他們開始想要遷移到使用 gRPC 的架構，但是遇到 K8s 沒有支援 Load Balancing 的問題，所以發現了 Linkerd 這個專案，因為他不僅可以讓 gRPC 具備 Load Balancing 的功能之外，而且也提高了整個平台的效率，可靠性和整體效能，文章中對於他們的每一個技術方案選擇做出詳細的解釋，有遇到一樣問題的人，或是徬徨要不要導入 Linkerd 的人可以參考看看這篇文章</p>\n",
      "date_published": "2021-12-21T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/112/gqsm-112/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/112/gqsm-112/",
      "title": "第 112 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"my-custom-css-reset\"><a class=\"direct-link\" href=\"#my-custom-css-reset\">#</a> <a href=\"https://www.joshwcomeau.com/css/custom-css-reset/#digit-box-sizing-model\">My Custom CSS Reset</a></h3>\n<p>重置 CSS 是為了維持各個瀏覽器的一致性，並且撤銷所有的預設樣式。但作者試著重新定義了自己的重置 CSS，並且深入理解各個規則的作用，以及使用的原因。</p>\n<!-- summary -->\n<h3 id=\"javascript-worst-practice\"><a class=\"direct-link\" href=\"#javascript-worst-practice\">#</a> <a href=\"https://blog.bitsrc.io/javascript-worst-practices-dc78e19d6f12\">Javascript Worst Practice</a></h3>\n<p>文章裡提到一些在 JavaScript 裡不是很好的幾個寫法，雖然大部分的寫法對於結果都不會有影響，但就因為這樣常常會讓開發者無法意識到這是錯誤的以及感到困惑。</p>\n<h3 id=\"5-upcoming-web-design-trends-for-2022\"><a class=\"direct-link\" href=\"#5-upcoming-web-design-trends-for-2022\">#</a> <a href=\"https://www.sitepoint.com/web-design-trends-2022/\">5 Upcoming Web Design Trends for 2022</a></h3>\n<p>UI 的設計一直是一大的學問，文中舉出五種截然不同的網頁設計風格，並講解這些風格是如何吸引到你的眼球。</p>\n",
      "date_published": "2021-12-21T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/112/andy-112/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/112/andy-112/",
      "title": "第 112 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"%E3%80%90react-conf-2021%E3%80%91react-without-memo-%E7%AF%87%E7%AB%A0%E7%AD%86%E8%A8%98\"><a class=\"direct-link\" href=\"#%E3%80%90react-conf-2021%E3%80%91react-without-memo-%E7%AF%87%E7%AB%A0%E7%AD%86%E8%A8%98\">#</a> <a href=\"https://juejin.cn/post/7042232224313245709\">【React Conf 2021】React without memo 篇章筆記</a></h3>\n<p>在最新的 React Conf 中提出了一個相當創新的概念，以往我們會利用 <code>useMemo</code>、<code>useCallback</code>、<code>memo</code> 等方法來進行效能優化，但 React 要開始嘗試幫開發者自動做好這件事，以後不需要再引用相當多的 dependencies 了，利用一個創新的 <code>React Forget</code> 就可以完成這件事了。</p>\n<!-- summary -->\n<h3 id=\"%E5%BE%9E%E7%9B%A3%E8%A6%96%E6%94%9D%E5%BD%B1%E6%A9%9F%E7%90%86%E8%A7%A3-log4j-%E8%B7%9F-log4shell-%E6%BC%8F%E6%B4%9E\"><a class=\"direct-link\" href=\"#%E5%BE%9E%E7%9B%A3%E8%A6%96%E6%94%9D%E5%BD%B1%E6%A9%9F%E7%90%86%E8%A7%A3-log4j-%E8%B7%9F-log4shell-%E6%BC%8F%E6%B4%9E\">#</a> <a href=\"https://tech-blog.cymetrics.io/posts/huli/what-is-log4j-and-log4shell/\">從監視攝影機理解 Log4j 跟 Log4Shell 漏洞</a></h3>\n<p>Log4j 的問題最近鬧得沸沸揚揚的，究竟 Log4j 是如何影響整個資訊安全，一起透過 Huli 大大的文章來一探究竟吧！</p>\n<h3 id=\"how-to-create-a-react-typescript-monorepo-with-git-submodules\"><a class=\"direct-link\" href=\"#how-to-create-a-react-typescript-monorepo-with-git-submodules\">#</a> <a href=\"https://dev.to/alexeagleson/how-to-create-a-node-and-react-monorepo-with-git-submodules-2g83\">How to Create a React Typescript Monorepo with Git Submodules</a></h3>\n<p>monorepo 在最近的前端生態可以說是越來越熱門，而 monorepo 的實現方式其實也隨著技術的成熟有了不少種實作方式，這篇文章作者利用了 git submodules 並搭配 React typescript 來達到這件事，有興趣的讀者不妨可以收藏起來閱讀喔！</p>\n",
      "date_published": "2021-12-21T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/111/smalltown-111/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/111/smalltown-111/",
      "title": "第 111 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"terraform-1.1-improves-refactoring-and-the-cloud-cli-experience\"><a class=\"direct-link\" href=\"#terraform-1.1-improves-refactoring-and-the-cloud-cli-experience\">#</a> <a href=\"https://www.hashicorp.com/blog/terraform-1-1-improves-refactoring-and-the-cloud-cli-experience\">Terraform 1.1 Improves Refactoring and the Cloud CLI Experience</a></h3>\n<p>HashiCorp 這幾天最大的<a href=\"https://seekingalpha.com/article/4474505-hashicorp-could-be-the-worst-ipo-of-the-year\">新聞</a>應該就是在 Nasdaq IPO 了！不過我們還是回歸技術面來看一下 Terraform 剛推出的 1.1 版有哪一些值得關注的內容:</p>\n<ul>\n<li>\n<p>Terraform 使用久了之後，難免會遇到想要 ReFactoring 的狀況，例如把單一個 Module 拆成多個，這次在 1.1 推出了 <code>moved</code> statememt，讓使用者透過 plan 來預覽跟驗證 Refactoring 的動作，有興趣的人可以參考<a href=\"https://learn.hashicorp.com/tutorials/terraform/move-config\">官方教學文章</a></p>\n</li>\n<li>\n<p>改善在 Terraform Cloud 與 Enterprise 中的 CLI 體驗</p>\n</li>\n</ul>\n<!-- summary -->\n<h3 id=\"karpenter-vs-cluster-autoscaler\"><a class=\"direct-link\" href=\"#karpenter-vs-cluster-autoscaler\">#</a> <a href=\"https://towardsdev.com/karpenter-vs-cluster-autoscaler-dd877b91629b\">Karpenter vs Cluster Autoscaler</a></h3>\n<p>上個月底 AWS re:Invent 推出了另外一套叫做 <a href=\"https://github.com/aws/karpenter\">Karpenter</a> 的 Kubernetes Cluster Autoscaler，而他跟目前大家使用的開源 <a href=\"https://github.com/kubernetes/autoscaler\">Cluster Autoscaler</a> 有什麼不一樣呢？就以 EKS 這個 Kubernetes 來舉例說明，它分成 Control Plane 和 Node Group，既有的開源 Cluster Autoscaler 會去偵測是否有 Pod 處於 Pending 的狀況，然後去叫控制 Node Group 的 AWS Auto-Scaling Group 根據需求增加多少台機器</p>\n<p>而 Karpenter 可以根據 Pending Pod 所需要的資源跳過 Node Group，直接開適合的 EC2 出來，所以其實在時間跟資源的應用上都可以更有效率，例如突然有個需要使用超級多 Memory 的 Pod 處於 Pending 的狀態，在 AWS Auto-Scaling Group 裡面所定義的機器型別根本就都不適合此 Pod 運行，Karpenter 就可以直接協助開啟一台符合此 Pod 使用的 EC2 然後直接把 Pod 指派到這台新開的 EC2 上，所以對於 Kubernets Worker Node 的擴展性來說強大很多</p>\n<h3 id=\"using-chatops-to-help-actions-on-call-engineers\"><a class=\"direct-link\" href=\"#using-chatops-to-help-actions-on-call-engineers\">#</a> <a href=\"https://github.blog/2021-12-01-using-chatops-to-help-actions-on-call-engineers/\">Using ChatOps to help Actions on-call engineers</a></h3>\n<p>在 GitHub 內常使用 ChatOps 來幫助合作更順利，使用的 Chatbot 為 Hubot，運行 ChatOps Command 很像是在 Terminal 運行自己的指令一樣，但不同之初在於所有的團隊成員都可以看到運行的成果，這讓合作時的溝通是即時的，特別是在處理 Incident 時，可以更快的恢復服務並且找出原因；而目前在 GitHub 內讓應用服務保持健康不再是某個神秘團隊的責任，而是落在建立該服務的工程師手上，因此除了幫 GitHub 建立力強大的功能之外，在 GitHub 的工程師也會貢獻他們時間在維護服務的健康上，此文便是講述前幾天一個新的 Actions on-call engineer: Mona 她處理 Incident 的經過，從其中可以看出 ChatOps 如何協助她快速且有效的處理事件</p>\n",
      "date_published": "2021-12-14T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/111/gqsm-111/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/111/gqsm-111/",
      "title": "第 111 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"%E6%83%B3%E7%9F%A5%E9%81%93%E4%B8%80%E4%B8%AA20k%E7%BA%A7%E5%88%AB%E5%89%8D%E7%AB%AF%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%98%AF%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8localstorage%E7%9A%84%E5%90%97%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E6%83%B3%E7%9F%A5%E9%81%93%E4%B8%80%E4%B8%AA20k%E7%BA%A7%E5%88%AB%E5%89%8D%E7%AB%AF%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%98%AF%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8localstorage%E7%9A%84%E5%90%97%EF%BC%9F\">#</a> <a href=\"https://juejin.cn/post/7033749571939336228\">想知道一个20k级别前端在项目中是怎么使用LocalStorage的吗？</a></h3>\n<p>文章中解釋了 LocalStorage 的用法，並提出在正常情況下使用 LocalStorage 會出現哪些問題，以及如何更好的管理存在 LocalStorage 中的資料，</p>\n<!-- summary -->\n<h3 id=\"refactoring-if..else-statement-in-js\"><a class=\"direct-link\" href=\"#refactoring-if..else-statement-in-js\">#</a> <a href=\"https://towardsdev.com/refactoring-nested-loops-in-js-e6d8a9db2db3\">Refactoring If..Else Statement In JS</a></h3>\n<p>作者提出用 Ternary operator、Switch Case、Short Circuit、Guard clauses 和 Function delegation 改善了 if...else 的寫法，可以思考哪種方式更適合目前的情境。</p>\n<h3 id=\"7-useful-html-attributes-you-may-not-know\"><a class=\"direct-link\" href=\"#7-useful-html-attributes-you-may-not-know\">#</a> <a href=\"https://dev.to/simonpaix/7-useful-html-attributes-you-may-not-know-7mn\">7 useful HTML attributes you may not know</a></h3>\n<p>所有的屬性都滿少見，但是在特定用途上又非常實用，可以稍微掃視了解一下。還有第一個留言也提到可以用 designMode 使整個網站變得可修改，方便做一些初期設計工作。</p>\n",
      "date_published": "2021-12-14T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/111/andy-111/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/111/andy-111/",
      "title": "第 111 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"a-complete-guide-to-incremental-static-regeneration-(isr)-with-next.js\"><a class=\"direct-link\" href=\"#a-complete-guide-to-incremental-static-regeneration-(isr)-with-next.js\">#</a> <a href=\"https://www.smashingmagazine.com/2021/04/incremental-static-regeneration-nextjs/\">A Complete Guide To Incremental Static Regeneration (ISR) With Next.js</a></h3>\n<p>在 Next.js 中有一個相當重要的設定叫：Incremental Static Regeneration (ISR)，拜 ISR 所賜假如只有該頁面需要更新內容，可以只重 build 該頁面即可，不需要重 build 整個專案，對於 SSG 渲染方式來說可說是相當好用的一把利器，想要了解 Next.js ISR 的完整介紹，不妨可以參考這篇文章。</p>\n<!-- summary -->\n<h3 id=\"keeping-things-fresh-with-stale-while-revalidate\"><a class=\"direct-link\" href=\"#keeping-things-fresh-with-stale-while-revalidate\">#</a> <a href=\"https://web.dev/stale-while-revalidate/\">Keeping things fresh with stale-while-revalidate</a></h3>\n<p>stale-while-revalidate (SWR) 可以說是相當重要的一個 cache 處理機制，有了這套機制可以讓使用者在面對一個內容確定過期的頁面不會在一開始進入過長的等待，瀏覽器會先從 cache 返回之前的內容，並同時更新要顯示的正確內容，待下次使用者重新進入此頁面時就會是最新的內容了，有興趣了解 SWR 機制的可以參考看看這篇文章。</p>\n<h3 id=\"learnings-from-react-conf-2021\"><a class=\"direct-link\" href=\"#learnings-from-react-conf-2021\">#</a> <a href=\"https://dev.to/alexeagleson/learnings-from-react-conf-2021-17lg\">Learnings from React Conf 2021</a></h3>\n<p>React 每年都會有一場盛大的 conference，這次的 conference 又介紹了相當多好用的工具，有興趣的讀者可以參考別人整理好的筆記。(所以我說那個 React 18 什麼時候才要正式上線呢XD</p>\n",
      "date_published": "2021-12-14T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/110/smalltown-110/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/110/smalltown-110/",
      "title": "第 110 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"aws-re%3Ainvent-2021-adam-selipsky-keynote-summary\"><a class=\"direct-link\" href=\"#aws-re%3Ainvent-2021-adam-selipsky-keynote-summary\">#</a> <a href=\"https://beabetterdev.com/2021/12/01/aws-reinvent-2021-adam-selipsky-keynote-summary/\">AWS re:Invent 2021 Adam Selipsky Keynote Summary</a></h3>\n<p>今年 AWS re:Invent 恢復在拉斯維加斯實體舉辦，這次一樣推出許多的新功能，例如之前我一直苦惱要怎麼把公開 Image 同步到，自己家裡的功能，<a href=\"https://aws.amazon.com/blos/aws/announcing-pull-through-cache-repositories-for-amazon-elastic-container-registry/\">現在在 ECR 裡面就可以辦到</a>，而且<a href=\"https://aws.amazon.com/blogs/aws/introducing-karpenter-an-open-source-high-performance-kubernetes-cluster-autoscaler/\">推出 AWS 自有的 Kubernetes AutoScaler - Karpenter</a>，當然這只是今年推出功能中的冰山一角！而在最重要的 Keynote 中又宣布的什麼大事呢？</p>\n<!-- summary -->\n<ul>\n<li>\n<p>當然就是 AWS 自家的新一代處理器 Graviton3，更快的運算速度而且更省能源，而且新的 Instance Type C7G 就會使用這顆新的處理器；除此之外也宣布了專門為訓練模型而最佳化的 Instance Type <strong>TRN1</strong></p>\n</li>\n<li>\n<p>再來則是為了金融相關產業所推出的遷移工具 AWS Mainframe Modernization，讓開發者將過時的 Infrastructure 搬遷到 Cloud 時更方便，AWS 甚至可以自動化從標準的 Cobol 程式碼產生 Java 程式碼</p>\n</li>\n<li>\n<p>再來這應該是最屌的發佈功能了 - AWS Private 5G！他讓顧客可以使用 AWS Infrastructure 去架設跟擴展 5G 網路，AWS 提供硬體，組態，沒有限制任何可連接裝置的數量，跟其他 AWS 服務一樣，只要付錢就可以使用！</p>\n</li>\n<li>\n<p>其他還有...Lake Formation Row and Cell Level Security, Lake Formation Transactions, 更多 Serverless 服務，Sagemaker Canvas，Goldman Sachs Financial Cloud For Data, AWS IoT Twinmaker, AWS IoT FleetWise 多到我連複製貼上都覺得累XD 有興趣的人可以再花點時間詳細研究</p>\n</li>\n</ul>\n<h3 id=\"kubernetes-1.23-%E2%80%93-what%E2%80%99s-new%3F\"><a class=\"direct-link\" href=\"#kubernetes-1.23-%E2%80%93-what%E2%80%99s-new%3F\">#</a> <a href=\"https://sysdig.com/blog/kubernetes-1-23-whats-new/\">Kubernetes 1.23 – What’s new?</a></h3>\n<p>除了 AWS re:Invent 大爆炸之外，Kubernetes 也即將推出 1.23 版本更新，這次帶來 45 個功能改善，雖然相對於 1.21 (50) 和 1.22 (56) 來說比較少，但其中幾個還滿有感的，例如 <a href=\"https://sysdig.com/blog/kubernetes-1-23-whats-new/#1440\">kubectl events</a> 指令，支援 <a href=\"https://sysdig.com/blog/kubernetes-1-23-whats-new/#2887\">OpenAPI v3</a> , <a href=\"https://github.com/kubernetes/enhancements/issues/2727\">gRPC probes</a>, 同時也可以看到 <a href=\"https://sysdig.com/blog/kubernetes-1-23-whats-new/#2317\">CSI Drivers</a> 和 <a href=\"https://github.com/kubernetes/enhancements/issues/2802\">Windows Support</a> 這兩個大專案的持續進展，而且也有不少功能抵達 GA 階段，有興趣的人可以閱讀原文獲得更多且詳細的資訊！</p>\n<h3 id=\"visualizing-kubernetes-clusters-with-navigate\"><a class=\"direct-link\" href=\"#visualizing-kubernetes-clusters-with-navigate\">#</a> <a href=\"https://medium.com/@brkg_/visualizing-kubernetes-clusters-with-navigate-e340e5419c19\">Visualizing Kubernetes Clusters with Navigate</a></h3>\n<p>這兩天發現有一個叫做 Navigate 的免費開源專案，他可以用來視覺化 Kubernetes Cluster 的各種資源，也可以顯示即時的 Log，範例圖看起來滿潮的，而且其中一個功能是可以從本地端的 YAML 檔案把即將部署到 K8s 中的資源也是進行視覺化呈現，讓開發者可以事先知道自己要部署到 K8s Cluster 中的組態長什麼樣子，感覺還滿不錯的，有機會再來試用看看！</p>\n",
      "date_published": "2021-12-07T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/110/larry-110/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/110/larry-110/",
      "title": "第 110 期 後端開發 推薦文章",
      "content_html": "<h2 id=\"%E8%81%B7%E6%B6%AF%E8%A6%8F%E5%8A%83\"><a class=\"direct-link\" href=\"#%E8%81%B7%E6%B6%AF%E8%A6%8F%E5%8A%83\">#</a> 職涯規劃</h2>\n<!-- summary -->\n<h3 id=\"%E6%97%8B%E8%BD%89%E6%8B%8D%E8%B3%A3-carousell-transactional-service-%E4%B9%8B%E7%94%A2%E5%93%81%E6%9E%B6%E6%A7%8B%E6%BC%94%E9%80%B2\"><a class=\"direct-link\" href=\"#%E6%97%8B%E8%BD%89%E6%8B%8D%E8%B3%A3-carousell-transactional-service-%E4%B9%8B%E7%94%A2%E5%93%81%E6%9E%B6%E6%A7%8B%E6%BC%94%E9%80%B2\">#</a> <a href=\"https://medium.com/carousell-insider/%E6%97%8B%E8%BD%89%E6%8B%8D%E8%B3%A3-carousell-transactional-service%E4%B9%8B%E7%94%A2%E5%93%81%E6%9E%B6%E6%A7%8B%E6%BC%94%E9%80%B2-a46bf210d80e\">旋轉拍賣 Carousell Transactional Service 之產品架構演進</a></h3>\n<p>因為後端架構會跟著產品需求不斷演化，所以沒有所謂最好的架構，只有最適合的架構。這篇文章就是記錄了旋轉拍賣他們的架構是怎麼跟著產品需求不斷調整，雖然已經是舊文了，但非常寶貴的經驗分享</p>\n<!-- summary -->\n<h3 id=\"pressplay-%E5%BE%9E-aws-%E6%90%AC%E5%AE%B6%E5%88%B0-gcp-%E4%B8%80%E5%B9%B4%E7%9A%84%E5%BF%83%E5%BE%97\"><a class=\"direct-link\" href=\"#pressplay-%E5%BE%9E-aws-%E6%90%AC%E5%AE%B6%E5%88%B0-gcp-%E4%B8%80%E5%B9%B4%E7%9A%84%E5%BF%83%E5%BE%97\">#</a> <a href=\"https://medium.com/@raguhnlee/pressplay%E5%BE%9Eaws%E6%90%AC%E5%AE%B6%E5%88%B0gcp%E4%B8%80%E5%B9%B4%E7%9A%84%E5%BF%83%E5%BE%97-1a00e847b3c0\">PressPlay 從 AWS 搬家到 GCP 一年的心得</a></h3>\n<p>除了上面那篇旋轉拍賣的架構演進，這篇講 PressPlay 怎麼從 AWS 搬家到 GCP 的我也覺得不錯。裡面講到了為什麼想要搬去 GCP，以及搬家前後的架構長什麼樣子，雖然會需要這樣搬的公司不多，不過當作經驗分享看看還滿有趣的</p>\n<h3 id=\"%E6%88%91%E7%9A%84-elasticsearch-%E9%80%B2%E5%8C%96%E4%B9%8B%E6%97%85\"><a class=\"direct-link\" href=\"#%E6%88%91%E7%9A%84-elasticsearch-%E9%80%B2%E5%8C%96%E4%B9%8B%E6%97%85\">#</a> <a href=\"https://medium.com/starbugs/%E6%88%91%E7%9A%84-elasticsearch-log-%E6%94%B6%E9%9B%86%E4%B9%8B%E6%97%85-39016c3b9a29\">我的 ElasticSearch 進化之旅</a></h3>\n<p>很多公司都會用 ElasticSearch 來保存 log，再用 Kibana 把資料畫成一個個圖表來做分析。但隨著資料量越來越多，架設 ElasticSearch 所需的花費也會隨之越來越高，因此小城這篇文要來分享該怎麼架設，才可以讓你的 ES 更省錢</p>\n",
      "date_published": "2021-12-07T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/110/gqsm-110/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/110/gqsm-110/",
      "title": "第 110 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"asynchronous-javascript%3A-the-restaurant-analogy\"><a class=\"direct-link\" href=\"#asynchronous-javascript%3A-the-restaurant-analogy\">#</a> <a href=\"https://javascript.plainenglish.io/asynchronous-javascript-the-restaurant-analogy-55c38d0517e0\">Asynchronous JavaScript: The Restaurant Analogy</a></h3>\n<p>看到 Restaurant 還先入為主地以為是在講前後端的溝通，沒想到是在解釋 JavaScript 的運行方式，在文章裡講解了 JS 的引擎、WebAPIs、Task Queue 和 Event Loop，不只是新手，如果已經了解的人也可以當做複習，看看作者如何用餐廳描述這些工作流程吧！</p>\n<!-- summary -->\n<h3 id=\"make-a-toast-with-html%2C-css%2C-and-js\"><a class=\"direct-link\" href=\"#make-a-toast-with-html%2C-css%2C-and-js\">#</a> <a href=\"https://devdojo.com/anishde12020/make-a-toast-with-html-css-and-js\">Make a toast with HTML, CSS, and JS</a></h3>\n<p>用 Toast 彈出的訊息，在需要向使用者顯示訊息的時候非常有用，這篇文章的作者講解如何用 HTML、CSS 和 JavaScript 從無到有打造專屬 toast！</p>\n<h3 id=\"animating-a-gradient-border-in-css\"><a class=\"direct-link\" href=\"#animating-a-gradient-border-in-css\">#</a> <a href=\"https://h.daily-dev-tips.com/animating-a-gradient-border-in-css\">Animating a gradient border in CSS</a></h3>\n<p>作者用了不到 30 行的 CSS 就做出了超酷的旋轉框線顏色的動畫，整個過程中使用了 border-image、animation 和 @property 等屬性，每個步驟都講解的很清楚，想了解入門的 CSS 動畫可以看看！</p>\n",
      "date_published": "2021-12-07T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/110/andy-110/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/110/andy-110/",
      "title": "第 110 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"enterkeyhint\"><a class=\"direct-link\" href=\"#enterkeyhint\">#</a> <a href=\"https://css-tricks.com/enterkeyhint/\">enterkeyhint</a></h3>\n<p>現在的網頁對於手機的操作可說是越來越關心，光一個 input tag 就有很多種不同的 type 方便使用者進行輸入，今天要介紹的是一個算是蠻新的 attribute 叫 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/enterKeyHint\">enterkeyhint</a>，這個 attribute 可以方便使用者進行表單的輸入，使用者鍵盤中的 enter 鍵會替換成下一步的按鍵，如此一來就不用讓使用者進行額外的點擊就能讓使用者快速輸入完每個 input 了。</p>\n<!-- summary -->\n<h3 id=\"algorithms-in-javascript-with-visual-examples\"><a class=\"direct-link\" href=\"#algorithms-in-javascript-with-visual-examples\">#</a> <a href=\"https://dev.to/swastikyadav/algorithms-in-javascript-with-visual-examples-gh3\">Algorithms in JavaScript with visual examples</a></h3>\n<p>很多人對於演算法可以說是相當害怕(我也是XD)，每次看到一些演算法的題目都會不知道該如何下手，這篇文章利用圖解的方式讓大家可以用比較輕鬆的心態來學習演算法，算是蠻平易近人的文章XD</p>\n<h3 id=\"%E5%BE%8C-redux-%E6%99%82%E4%BB%A3%EF%BC%81%EF%BC%9F%E7%95%99%E6%84%8F%E9%82%A3%E4%BA%9B%E9%81%8E%E5%8E%BB%E5%B8%B8%E8%A2%AB%E8%A6%96%E7%82%BA%E7%90%86%E6%89%80%E7%95%B6%E7%84%B6%E7%9A%84%E4%BA%8B\"><a class=\"direct-link\" href=\"#%E5%BE%8C-redux-%E6%99%82%E4%BB%A3%EF%BC%81%EF%BC%9F%E7%95%99%E6%84%8F%E9%82%A3%E4%BA%9B%E9%81%8E%E5%8E%BB%E5%B8%B8%E8%A2%AB%E8%A6%96%E7%82%BA%E7%90%86%E6%89%80%E7%95%B6%E7%84%B6%E7%9A%84%E4%BA%8B\">#</a> <a href=\"https://medium.com/onedegree-tech-blog/%E5%BE%8C-redux-%E6%99%82%E4%BB%A3-%E7%95%99%E6%84%8F%E9%82%A3%E4%BA%9B%E9%81%8E%E5%8E%BB%E5%B8%B8%E8%A2%AB%E8%A6%96%E7%82%BA%E7%90%86%E6%89%80%E7%95%B6%E7%84%B6%E7%9A%84%E4%BA%8B-debe8ffc7140\">後 Redux 時代！？留意那些過去常被視為理所當然的事</a></h3>\n<p>自從 React 正式進入大 Hooks 時代後，各方大神就開始推出一系列簡單易上手的套件讓大家可以替換掉 Redux，尤其是那 Redux 超級不方便的非同步操作XD</p>\n<p>這篇文章是由 PJ 大大所撰寫的，雖然現在很多套件都在想方設法讓開發者可以移除 Redux，但 Redux 其實背後默默的幫我們處理很多事情，再開始使用其他好用的套件前不妨先看看 Redux 到底幫我們做了哪些事情吧！</p>\n",
      "date_published": "2021-12-07T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/109/smalltown-109/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/109/smalltown-109/",
      "title": "第 109 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"infrastructure-as-code%3A-the-next-big-shift-is-here\"><a class=\"direct-link\" href=\"#infrastructure-as-code%3A-the-next-big-shift-is-here\">#</a> <a href=\"https://itnext.io/infrastructure-as-code-the-next-big-shift-is-here-9215f0bda7ce\">Infrastructure as Code: the next big shift is here</a></h3>\n<p>軟體架構一直在演進，不管是在 Provision，Delivery 或是 Maintenance 的方式都一直在進化中，而 Infrastructure as Code 尤其是如何，他可以將整個架構視覺化並且去補助服務的運行，而且這一切可以透過任何的語言，並且將其儲存在 Version Control 的 Repository 之中，而究竟 IaC 是如何走到今天這樣的面貌的呢？作者認為有幾個重要的階段，分別為...，文章中透過生動可愛的漫畫對每一個階段做詳細地說明</p>\n<ul>\n<li>Virtualization</li>\n<li>Containerisation and containers orchestration</li>\n<li>Public Cloud Infrastructure</li>\n<li>DevOps Culture</li>\n</ul>\n<!-- summary -->\n<h3 id=\"how-to-level-up-your-kubernetes-game\"><a class=\"direct-link\" href=\"#how-to-level-up-your-kubernetes-game\">#</a> <a href=\"https://itnext.io/how-to-level-up-your-kubernetes-game-96f8f7ea50b9\">How To Level Up Your Kubernetes Game</a></h3>\n<p>根據 Cloud Native Survey 2020 的調查顯示 Container 在 Production 環境的使用成長的三倍，因此 Kubernetes 的使用率只會升不會降，但使用 K8s 和擴展他是兩回事，K8s 設計是用來構建平台的平台，他的不僅僅只是用來管理 Container 而已，他的 API 和 Contril Plane 都是可擴展的，例如 K8s 的 Operator 和 Control Loop 都可以用來擴展 K8s，所以這篇文章想要介紹 Operator Pattern，讓大家一起學習如何適當地使用 Opertoar，並探索 Operator 的架構</p>\n<h3 id=\"dstp\"><a class=\"direct-link\" href=\"#dstp\">#</a> <a href=\"https://github.com/ycd/dstp\">dstp</a></h3>\n<p>當有辦公室有人跟你說某個網站不能連時，你下意識會做什麼事情？使用 nslookup 或是 curl 嗎？現在你有更好的選擇 - dstp！這個 CLI 小工具可以幫你幫目標網站做常見的網路測試，包含 ping, DNS, TLS 和 HTTP 的檢查，讓你使用單一個工具就可以做完所有的檢查，不用在使用多個工具東查西查的</p>\n",
      "date_published": "2021-11-30T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/109/larry-109/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/109/larry-109/",
      "title": "第 109 期 職涯規劃 推薦文章",
      "content_html": "<h2 id=\"%E8%81%B7%E6%B6%AF%E8%A6%8F%E5%8A%83\"><a class=\"direct-link\" href=\"#%E8%81%B7%E6%B6%AF%E8%A6%8F%E5%8A%83\">#</a> 職涯規劃</h2>\n<!-- summary -->\n<h3 id=\"%E4%B8%80%E5%80%8B%E8%B3%87%E6%B7%BA%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%B9%B4%E6%9C%AB%E7%9A%84%E8%87%AA%E6%88%91%E7%9C%81%E8%A6%96\"><a class=\"direct-link\" href=\"#%E4%B8%80%E5%80%8B%E8%B3%87%E6%B7%BA%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%B9%B4%E6%9C%AB%E7%9A%84%E8%87%AA%E6%88%91%E7%9C%81%E8%A6%96\">#</a> <a href=\"https://blog.techbridge.cc/2016/12/31/review-2016/\">一個資淺工程師年末的自我省視</a></h3>\n<p>在學習技術時，我們很常會猶豫到底是要花時間在技術的深度還是廣度上，而在挑選工作時，也很常會不知道該去大公司還是小公司，這兩個問題其實都沒有標準答案，但除了自己思考之外，也可以參考看看別人是怎麼想的。像胡立這篇年末省視就就講到很多他自己的成長歷程，不管你是想轉換領域、換工作、或只是想做點事情跳出舒適圈，這篇文章都很值得看看。</p>\n<!-- summary -->\n<h3 id=\"%E5%A6%82%E4%BD%95%E6%89%8D%E6%9C%89%E8%B3%87%E6%A0%BC%E7%A8%B1%E7%82%BA%E8%B3%87%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%AB\"><a class=\"direct-link\" href=\"#%E5%A6%82%E4%BD%95%E6%89%8D%E6%9C%89%E8%B3%87%E6%A0%BC%E7%A8%B1%E7%82%BA%E8%B3%87%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%AB\">#</a> <a href=\"https://jaceju.net/be-a-senior-engineer/\">如何才有資格稱為資深工程師</a></h3>\n<p>關於到底怎麼樣才算是「資深工程師」其實有非常多不同的意見，所以除了看這週專欄之外，也可以參考看看這篇文章，他除了講了非常多資深工程師該有的特質之外，同時還提供了反指標，讓你可以檢驗自己（或身邊的同事XD）。</p>\n<h3 id=\"%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%91%98%E7%9A%84%E5%8F%91%E5%B1%95%E4%B9%8B%E8%B7%AF\"><a class=\"direct-link\" href=\"#%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%91%98%E7%9A%84%E5%8F%91%E5%B1%95%E4%B9%8B%E8%B7%AF\">#</a> <a href=\"https://coolshell.cn/articles/17583.html\">技术人员的发展之路</a></h3>\n<p>身為一個工程師，我以前其實都沒有在做什麼太長遠的職涯規劃XD，但看了這篇文章之後突然覺得好像該好好的想一下，畢竟以後的路還長，想去怎麼樣的公司、過怎麼樣的人生，如果沒有提早規劃好的話，可能一不小心就會錯過機會，所以當然要趁年輕時，提早想好自己的路。</p>\n",
      "date_published": "2021-11-30T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/109/gqsm-109/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/109/gqsm-109/",
      "title": "第 109 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"i-made-a-working-gameboy-css-art%3A-try-it-out-%F0%9F%95%B9\"><a class=\"direct-link\" href=\"#i-made-a-working-gameboy-css-art%3A-try-it-out-%F0%9F%95%B9\">#</a> <a href=\"https://theangularguy.hashnode.dev/i-made-a-working-gameboy-css-art-try-it-out#comments-list\">I made a working Gameboy CSS art: try it out 🕹</a></h3>\n<p>如果無法弄到一台真正的 Gameboy 來邊玩邊懷舊，不如就看著這篇文章自己寫一個 Gameboy 吧！雖然文章中沒有提及所有程式碼的解釋，但是作者也挑了幾個像是遊戲的演算法或 CSS 等關鍵的觀念解釋，真的手癢的話就直接 fork 下來改一波吧！</p>\n<!-- summary -->\n<h3 id=\"rematch---a-better-redux%3F\"><a class=\"direct-link\" href=\"#rematch---a-better-redux%3F\">#</a> <a href=\"https://blog.openreplay.com/rematch-a-better-redux\">Rematch - a better Redux?</a></h3>\n<p><a href=\"https://github.com/rematch/rematch\">Rematch</a> 是基於 Redux 的狀態管理器，但又移除了一些 Redux 所需的東西！像是不再使用 middleware，而是直接內建同步操作的 <code>effects</code> 等，還有更多其他的就到文章裡看作者介紹吧！</p>\n<h3 id=\"oops-in-javascript-with-easy-to-understand-examples-%F0%9F%94%A5%F0%9F%94%A5\"><a class=\"direct-link\" href=\"#oops-in-javascript-with-easy-to-understand-examples-%F0%9F%94%A5%F0%9F%94%A5\">#</a> <a href=\"https://nehalmahida.hashnode.dev/oops-in-javascript-with-easy-to-understand-examples\">OOPS in JavaScript with easy to understand examples 🔥🔥</a></h3>\n<p>這篇文章的介紹該如何在 JavaScript 內使用 OOP（Object-oriented programming）的各種觀念，其中包含了 Object、Class、Encapsulation 和 Abstraction 等使用方法，非常適合想要了解如何在 JavaScript 使用 OOP 的開發者閱讀！</p>\n",
      "date_published": "2021-11-30T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/conference/20211120-DevOpsDay-2021/",
      "url": "https://starbugs-blog.netlify.app/posts/conference/20211120-DevOpsDay-2021/",
      "title": "DevOpsDays Taipei 2021",
      "content_html": "<p>DevOpsDays Taipei 2021 即將在 2021/11/24 於臺北文創盛大舉辦，Agile Community tw、DevOps Taiwan Community、HashiCorp User Group Taipei 以及 iThome 再次攜手合作，期盼再創屬於臺灣在地的 DevOps 高峰盛會。</p>\n<h2 id=\"devopsdays-taipei\"><a class=\"direct-link\" href=\"#devopsdays-taipei\">#</a> DevOpsDays Taipei</h2>\n<!-- summary -->\n<p>DevOpsDays Taipei 是由臺灣在地技術社群發起，結合社群、企業共同舉辦之年度 DevOps 盛會。DevOpsDays 由 DevOps 之父 Patrick Debois 發源自比利時，經過全球社群的共同響應，如今在全球，每年皆有多個城市舉辦以城市掛名的 DevOpsDays。</p>\n<p>根據 iThome 的報導，不論是國內外的知名企業例如台積電、金士頓、趨勢科技、國泰金控等皆早已擁抱 DevOps，引領企業持續改善、邁向新一波的 IT 數位轉型。DevOps 作為同時蘊含技術與文化轉型雙主軸的 IT 熱門關鍵字，其影響力已不僅是 IT 圈內人人皆知，更擴展至企業組織的各個層面。</p>\n<!-- summary -->\n<h3 id=\"%E6%82%A8%E7%B5%95%E5%B0%8D%E4%B8%8D%E8%83%BD%E9%8C%AF%E9%81%8E\"><a class=\"direct-link\" href=\"#%E6%82%A8%E7%B5%95%E5%B0%8D%E4%B8%8D%E8%83%BD%E9%8C%AF%E9%81%8E\">#</a> 您絕對不能錯過</h3>\n<p>臺灣今年度最大場 DevOpsDays 官方授權活動<br>\n專業技術論壇、解決方案 Demo、實機體驗工作坊讓您值回票價<br>\n囊括最多產業案例及導入實戰分享<br>\n議程後還有專家面對面時間讓您與大神近距離討教</p>\n<p><a href=\"https://devopsdays.tw/\">DevOpsDays TW 活動頁面</a></p>\n",
      "date_published": "2021-11-24T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/108/smalltown-108/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/108/smalltown-108/",
      "title": "第 108 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"crisp%3A-critical-path-analysis-for-microservice-architectures\"><a class=\"direct-link\" href=\"#crisp%3A-critical-path-analysis-for-microservice-architectures\">#</a> <a href=\"https://eng.uber.com/crisp-critical-path-analysis-for-microservice-architectures/\">CRISP: Critical Path Analysis for Microservice Architectures</a></h3>\n<p>Uber 的後端系統算是 MicroService 架構的榜樣，其中有數千個 MicroService 透過 RPC 的方式跟其他服務進行溝通，所以當服務請求發生時，就很像是網路傳遞時會有數個 hops 一樣，當數個 MicroService 都正常時，這個服務請求才能夠運行成功，其過程是相當複雜的，可能隱含很多的動作，非同步..等，所以當要追查一個服務請求點到點的品質時，可以想像是相當困難的，所以 Uber 開發了一個叫做 CRISP 的工具，用來解決追蹤複雜服務請求中到底是哪一個環節出了問題，CRISP 主要使用 Jaeger 這個 RPC 的追蹤工具，對於此主題有興趣的人，可以查看原文獲得更仔細的資訊</p>\n<!-- summary -->\n<h3 id=\"cloudquery\"><a class=\"direct-link\" href=\"#cloudquery\">#</a> <a href=\"https://github.com/cloudquery/cloudquery\">cloudquery</a></h3>\n<p>CloudQuery 可以將在雲端的資源資訊給萃取出來，將其轉化為 PostgreSQL Table 的資料，主要的使用情境有底下三種：</p>\n<ul>\n<li>Search: 使用標準的 SQL 語法去搜尋雲端資源</li>\n<li>Visualize:將資料透過 BI 或是視覺化工具呈現出來，例如 Grafana, QuickSight...等</li>\n<li>Policy as Code: 將 Security 和 Compliance 規則寫成 SQL 語法用以達成 PaC</li>\n</ul>\n<h3 id=\"prometheus-announces-an-agent-to-address-a-new-range-of-use-cases\"><a class=\"direct-link\" href=\"#prometheus-announces-an-agent-to-address-a-new-range-of-use-cases\">#</a> <a href=\"https://www.cncf.io/blog/2021/11/16/prometheus-announces-an-agent-to-address-a-new-range-of-use-cases/\">Prometheus announces an Agent to address a new range of use cases</a></h3>\n<p>一直以來 Prometheus 都是使用 Pull 的模式，透過 Prometheus Server 把來自各方的資料做彙整，而最近宣佈了新的模式 Agent Mode，Prometheus Agent 跟 Prometheus Server 其實有點像，他還是透過 Pull 去抓取 HTTP 所暴露的 Metric 資料，然後使用 Remote Write 的方式將資料送到遠端的 Prometheus Server，不過 Metric 資料並不會儲存在本地端，送出去後就會立即移除掉，希望可以應用在某些應用情境上，例如 Edge Networks 和 IoT</p>\n",
      "date_published": "2021-11-23T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/108/larry-108/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/108/larry-108/",
      "title": "第 108 期 Rust 推薦文章",
      "content_html": "<h2 id=\"rust\"><a class=\"direct-link\" href=\"#rust\">#</a> Rust</h2>\n<!-- summary -->\n<h3 id=\"supercharge-your-nodejs-with-rust\"><a class=\"direct-link\" href=\"#supercharge-your-nodejs-with-rust\">#</a> <a href=\"https://skwee357.medium.com/supercharge-your-nodejs-with-rust-f78952d2fa8\">Supercharge your NodeJS with Rust</a></h3>\n<p>Rust 開發起來很慢，光是要成功編譯就不行，但執行速度非常的快；而 Node.js 則是開發起來很快，但執行速度相對就慢很多。那有什麼什麼方法可以將兩者結合起來呢？這篇文章介紹了 Neon，他可以幫你把 Rust 程式碼編譯成 native Node.js module，這樣你就可以把最需要效能的地方用 Rust 寫，接著 Node.js 裡面使用它就能兼顧開發效率跟效能囉</p>\n<!-- summary -->\n<h3 id=\"what-rust-could-learn-from-kotlin\"><a class=\"direct-link\" href=\"#what-rust-could-learn-from-kotlin\">#</a> <a href=\"https://medium.com/@cedricbeust/what-rust-could-learn-from-kotlin-b32ebe2da28d\">What Rust could learn from Kotlin</a></h3>\n<p>這十多年來程式語言如雨後春筍般不斷推陳出新，像 Kotlin、Swift、Golang 這些語言其實都設計得不錯。而這篇文章就比較了 Rust 跟 Kotlin 的語法，並指出 Rust 有哪些可以跟 Kotlin 借鏡的地方。如果你跟我一樣也喜歡看看每個語言的優缺點的話，這篇文章真的很不錯</p>\n<h3 id=\"rust-lang-tips-and-tricks\"><a class=\"direct-link\" href=\"#rust-lang-tips-and-tricks\">#</a> <a href=\"https://mudit.blog/rust-tips-and-tricks/\">Rust lang Tips and Tricks</a></h3>\n<p>這篇文章介紹了一些 Rust 的小技巧，像是怎麼用 <code>dbg!</code> macro 來輸出變數、用底線來讓數字更好讀等等，如果才剛開始學習 Rust 還不太熟悉一些語法糖，可以簡單看一看這篇文章～</p>\n",
      "date_published": "2021-11-23T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/108/gqsm-108/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/108/gqsm-108/",
      "title": "第 108 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"react-%E7%9A%84%E6%9C%AA%E4%BE%86%EF%BC%9A18-%E4%BB%A5%E5%8F%8A%E5%9C%A8%E9%82%A3%E4%B9%8B%E5%BE%8C\"><a class=\"direct-link\" href=\"#react-%E7%9A%84%E6%9C%AA%E4%BE%86%EF%BC%9A18-%E4%BB%A5%E5%8F%8A%E5%9C%A8%E9%82%A3%E4%B9%8B%E5%BE%8C\">#</a> <a href=\"https://chentsulin.medium.com/react-%E7%9A%84%E6%9C%AA%E4%BE%86-18-%E4%BB%A5%E5%8F%8A%E5%9C%A8%E9%82%A3%E4%B9%8B%E5%BE%8C-d5764e258deb\">React 的未來：18 以及在那之後</a></h3>\n<p>這篇文章的作者先前有在 JSDC 2021 分享過 <a href=\"https://2021.jsdc.tw/timesheets\">The Future of React: 18 and Beyond</a>，然後又很佛的把議程的內容另外寫成一篇文章分享，雖然 React 18 目前還在 beta 狀態，但還是可以先看看 React 18 新 feature 的概念。'</p>\n<!-- summary -->\n<h3 id=\"creating-a-react-custom-hook-using-tdd\"><a class=\"direct-link\" href=\"#creating-a-react-custom-hook-using-tdd\">#</a> <a href=\"https://dev.to/mbarzeev/creating-a-react-custom-hook-using-tdd-2o\">Creating a React Custom Hook using TDD</a></h3>\n<p>作者用 TDD 的方式設計一個 Custom Hook 用來管理分頁 Component 的背後邏輯，每一步操作都有很清楚的說明，雖然文章篇幅很長，但如果想要學習測試還是很推薦看完！</p>\n<h3 id=\"functional-programming%3A-immutability\"><a class=\"direct-link\" href=\"#functional-programming%3A-immutability\">#</a> <a href=\"https://rehansattar.dev/functional-programming-immutability\">Functional Programming: Immutability</a></h3>\n<p>Immutability（不變性） 在 Functional Programming 中是個相當重要的觀念，作者用簡單的例子示範什麼是 Immutability 的概念，並清楚的解釋 Immutability 帶來的好處和壞處。</p>\n",
      "date_published": "2021-11-23T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/smalltown-107/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/smalltown-107/",
      "title": "第 107 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"announcing-grafana-oncall%2C-the-easiest-way-to-do-on-call-management\"><a class=\"direct-link\" href=\"#announcing-grafana-oncall%2C-the-easiest-way-to-do-on-call-management\">#</a> <a href=\"https://grafana.com/blog/2021/11/09/announcing-grafana-oncall/\">Announcing Grafana OnCall, the easiest way to do on-call management</a></h3>\n<p>在維運服務時，系統總是會有遇到問題需要求救的時候，設定一個彈性又有效的 On Call 輪值方式是相當重要的一件事情，很多既有的工具使用起來要嘛很麻煩，要嘛對於開發者來說很不友善，所以 Grafana 宣布推出簡單易用的 Grafana On Call 管理工具，用來降低管理 On Call 輪值所需要的功夫，目前在 Grafana Cloud 為 Beta 公測階段；Grafana On Call 主要是透過今年所收購 Amixr Inc 所開發出來的，而他主要有以下三個特點：</p>\n<!-- summary -->\n<ul>\n<li>簡單建立跟管理 On-Call 時程</li>\n<li>利用自動逐步升級 (Escalation)且彈性的引導方式 (Routing) 確保找到人協助系統問題</li>\n<li>讓 On-Call 與 Incidnet 的狀態在同一個 UI 中顯現管理</li>\n</ul>\n<h3 id=\"terraform-cloud-variable-sets-beta-now-available\"><a class=\"direct-link\" href=\"#terraform-cloud-variable-sets-beta-now-available\">#</a> <a href=\"https://www.hashicorp.com/blog/terraform-cloud-variable-sets-beta-now-available\">Terraform Cloud Variable Sets Beta Now Available</a></h3>\n<p>Terraform 的 Module 引用方式讓使用者可以一直重複利用既有的程式碼，而不需要重新造輪子，而現在 Terraform Cloud 針對變數也推出一樣的功能 - <code>variable sets</code>，他讓使用者可以重複使用 Terraform 所定義或是環境變數，而且不止是從 Root 到 Child Module，還可以橫跨某些 Workspaces 甚至是 Organization；自己發現 Terragrunt 也有類似的功能，看來 Terraform 這邊也跟上來了</p>\n<h3 id=\"flux-security-audit-has-concluded\"><a class=\"direct-link\" href=\"#flux-security-audit-has-concluded\">#</a> <a href=\"https://www.cncf.io/blog/2021/11/11/flux-security-audit-has-concluded/\">Flux Security Audit has concluded</a></h3>\n<p>CNCF 最近對旗下 Incubation Project 進行 Security Audit，做完馬上發現一個 CVE: CVE-2021-41254，可以讓有心人士可以在 Multi-Tenant Flux 提權成 Cluster Admin (有使用 Flux 的人要記得升級)，而整個詳細的<a href=\"https://fluxcd.io/FluxFinalReport-v1.1.pdf\">稽核報告</a>已經被公開在網路上，找到將近 22 條涵括各種不同的 Risk Level 的問題，目前 43% 的 Issue 在 TODO 階段，21% WIP，36% 已經修完，詳細的進度可以參考 <a href=\"https://github.com/orgs/fluxcd/projects/5\">GitHub Project</a>，看起來 Flux 從另外一個面向投入資源，試圖跟其他的 GitOps 競爭工具做出差異化</p>\n",
      "date_published": "2021-11-16T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/larry-107/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/larry-107/",
      "title": "第 107 期 Go 推薦文章",
      "content_html": "<h2 id=\"golang\"><a class=\"direct-link\" href=\"#golang\">#</a> Golang</h2>\n<h3 id=\"upcoming-features-in-go-1.18\"><a class=\"direct-link\" href=\"#upcoming-features-in-go-1.18\">#</a> <a href=\"https://sebastian-holstein.de/post/2021-11-08-go-1.18-features/\">Upcoming Features in Go 1.18</a></h3>\n<p>除了泛型之外，預計在明年發布的 Go 1.18 其實還有一些其他 feature，像是用來做測試的 fuzzing、聽說（？）更快的 go fmt，還有新的 net/netip package，看完都等不及要開始用了</p>\n<h3 id=\"best-practices-for-testing-in-go\"><a class=\"direct-link\" href=\"#best-practices-for-testing-in-go\">#</a> <a href=\"https://fossa.com/blog/golang-best-practices-testing-go/\">Best Practices for Testing in Go</a></h3>\n<p>這篇文章除了跟你說在寫測試時有哪些該注意的重點之外，也教你怎麼把 function/struct 設計得更好測試，如果你最近想寫 unit test 來增加程式的可靠性，卻發現不知道從何著手，那可以參考看看這篇文章</p>\n<h3 id=\"design-patterns-in-go\"><a class=\"direct-link\" href=\"#design-patterns-in-go\">#</a> <a href=\"https://refactoring.guru/design-patterns/go\">Design Patterns in Go</a></h3>\n<p>如果想要從 Go 下手開始學習設計模式的話，這邊有一個很不錯的網站，他除了會把每個 pattern 畫成 UML 圖之外，還會給你非常實際的範例，對於理解 pattern 的應用場景非常有幫助</p>\n",
      "date_published": "2021-11-16T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/gqsm-107/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/gqsm-107/",
      "title": "第 107 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"useref-or-usestate%2C-which-is-better%3F\"><a class=\"direct-link\" href=\"#useref-or-usestate%2C-which-is-better%3F\">#</a> <a href=\"https://dev.to/salehmubashar/useref-or-usestate-which-is-better-258j\">useRef or useState, which is better?</a></h3>\n<p>雖然 <code>useRef</code> 或 <code>useState</code> 都可以存放想要的東西，在使用上貌似滿雷同的，但其實兩者對 Component render 的影響可是完全不一樣的！會分享這篇文章也是我突然想到 <a href=\"https://swr.vercel.app/\">SWR</a> 就是利用 <code>useRef</code> 來存放 state 唷！</p>\n<!-- summary -->\n<h3 id=\"writing-clean-code-in-javascript\"><a class=\"direct-link\" href=\"#writing-clean-code-in-javascript\">#</a> <a href=\"https://blog.bitsrc.io/writing-clean-code-in-javascript-dd584bbe1874\">Writing Clean Code in JavaScript</a></h3>\n<p>JavaScript 在近幾年真的提供了很多方便的寫法，只要善用就可以讓程式碼變得更簡潔，當然同時也出現了各種古怪的寫法 😂，在使用上還是要考慮到之後的人容不容易看懂。</p>\n<h3 id=\"react-router-dom-6.x-%E7%89%88%E6%9C%AC-%E8%AE%A9%E6%88%91%F0%9F%90%93-%F0%9F%90%9D-%E4%BA%86\"><a class=\"direct-link\" href=\"#react-router-dom-6.x-%E7%89%88%E6%9C%AC-%E8%AE%A9%E6%88%91%F0%9F%90%93-%F0%9F%90%9D-%E4%BA%86\">#</a> <a href=\"https://juejin.cn/post/7030700352622034952\">react-router-dom 6.x 版本 让我🐓 🐝 了</a></h3>\n<p>最近在研究 React 的專案配置時，一如往常地裝了 react-router-dom，然後依照記憶寫下程式碼，結果在執行後卻發現錯誤狂噴，原來是 react-router-dom 更新到 v6 後，一堆寫法都變了，而今天又看到這篇文章就覺得不分享不行，希望之後的人少走一點坑。</p>\n",
      "date_published": "2021-11-16T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/andy-107/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/andy-107/",
      "title": "第 107 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"%E8%A9%B2%E5%A6%82%E4%BD%95%E5%85%A5%E9%96%80-ctf-%E4%B8%AD%E7%9A%84-web-%E9%A1%8C%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E8%A9%B2%E5%A6%82%E4%BD%95%E5%85%A5%E9%96%80-ctf-%E4%B8%AD%E7%9A%84-web-%E9%A1%8C%EF%BC%9F\">#</a> <a href=\"https://blog.techbridge.cc/2021/02/20/web-ctf-is-fun/?fbclid=IwAR2mOQnLA0NF7ukl8XLSBe03Ft2-F9qZR_8l9yj9Mg9H_LcKaCnmZ3FdE0Q\">該如何入門 CTF 中的 Web 題？</a></h3>\n<p>CTF 一直是個很有趣的比賽，參賽者必須要想辦法在網頁上尋找相對應的 flag 或者讓網頁產生一些奇怪的行為，雖然自己身為一位前端工程師但玩了 CTF 才知道自己原來對前端這麼不熟，想要一起了解 CTF 是甚麼的讀者歡迎閱讀這篇文章，之後就可以慢慢摸索一些 CTF 的練習題了！</p>\n<!-- summary -->\n<h3 id=\"custom-elements-defining-new-elements-in-html\"><a class=\"direct-link\" href=\"#custom-elements-defining-new-elements-in-html\">#</a> <a href=\"https://www.html5rocks.com/en/tutorials/webcomponents/customelements/\">Custom Elements defining new elements in HTML</a></h3>\n<p>原來 HTML tag 是可以自己隨便定義一個出來的，不一定要是 HTML5 中規範的 tag，其實會突然分享這個文章也是因為上面的 CTF 有些技巧是需要用到這種手段才能達到的，所以假如讀者不知道 HTML tag 可以自己自定義的話也可以看看這篇文章，裡面都有一些作者對於自定義 tag 的見解。</p>\n<h3 id=\"css-tricks-to-create-that-dark-futuristic-web3-look\"><a class=\"direct-link\" href=\"#css-tricks-to-create-that-dark-futuristic-web3-look\">#</a> <a href=\"https://dev.to/trishathecookie/css-tricks-to-create-that-dark-futuristic-web3-look-53bm\">CSS Tricks to Create that Dark Futuristic Web3 Look</a></h3>\n<p>這個真的太酷了，沒想到 CSS 還有這麼多的玩法可以讓一個文字有這麼多不同的顯示方式，學會了這些技巧就不用擔心設計師突然設計出一個難以開發的樣式了XD</p>\n",
      "date_published": "2021-11-16T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/106/smalltown-106/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/106/smalltown-106/",
      "title": "第 106 期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"just-7-remarkable-k8s-tools-boosting-up-your-effectiveness\"><a class=\"direct-link\" href=\"#just-7-remarkable-k8s-tools-boosting-up-your-effectiveness\">#</a> <a href=\"https://getbetterdevops.io/7-essential-tools-to-be-more-efficient-on-kubernetes/\">Just 7 Remarkable K8S Tools Boosting Up Your Effectiveness</a></h3>\n<p>Kubernetes 是目前負責管理 Container 和微服務的的主要平台，一般人在開始學習跟 K8s 互動時都是透過 <code>kubectl</code>，它的確也真的扮演著很重要的角色，不過不知道使用者是否發現透過他一直在重複著一樣的動作，因而浪費掉寶貴的時間，所以這篇文章要介紹 7 個可以幫助使用者增進效率的工具：</p>\n<!-- summary -->\n<ol>\n<li><a href=\"https://github.com/cloudnativelabs/kube-shell\">Kube-shell</a>: 透過顯示豐富的資訊和提示來減少使用 kubectl 時可能產生的錯誤並且加快操作速度</li>\n<li><a href=\"https://github.com/ahmetb/kubectx\">Kubectx - Kubens</a>: 管理 Multi-Cluster 的必備工具，協助使用者切換不同的 Cluster</li>\n<li><a href=\"https://github.com/johanhaleby/kubetail\">Kubetail</a>: 功能有點像是 <code>kubectl logs -f</code>，但可以一次將多個 Pod 的 Log 同時顯示</li>\n<li><a href=\"https://github.com/ahmetb/kubectl-tree\">Kubetree</a>: K8s 的某些資源間其實是有親子關係的，透過此工具可以將資源間的關係視覺化呈現出來</li>\n<li><a href=\"https://github.com/derailed/k9s\">K9S</a>: K9S 應該就不用多說了，強大的 K8s Terminal UI，讓你可以輕易地與 K8s Cluster 互動</li>\n<li><a href=\"https://github.com/robscott/kube-capacity\">Kube-Capacity</a>: 顯示 K8s Cluster 中 Resource 的 Request, Limit 和使用程度</li>\n<li><a href=\"https://k8slens.dev/\">Lens</a>: Lens 應該也是大家都耳熟能響的 K8s UI 工具，可以運行在各種系統中 (Windows, Linux 和 Mac)，讓使用者可以透過類似 IDE 的感覺來跟 K8s 互動</li>\n</ol>\n<h3 id=\"compliance-in-a-devops-culture\"><a class=\"direct-link\" href=\"#compliance-in-a-devops-culture\">#</a> <a href=\"https://martinfowler.com/articles/devops-compliance.html\">Compliance in a DevOps Culture</a></h3>\n<p>將 Compliance Control 和 Audit 整合進 CI/CD 的流程，對於想要在 DevOps 文化中滿足 Security Compliance 是滿直覺的作法，但根據不同的組織大小會遭遇到不同的挑戰，了解透過不同的實作方式所可能造成的影響是導致成功與否的重要關鍵，文中從理論開始談起 (講解得很細)，隨後提到各種模式，例如：Manual Compliance, Pipeline Compoiance, Composition Compliance 和 Point-of-Change Compliance，對於這塊領域有興趣的人可以參考看看</p>\n<h3 id=\"anatomy-of-a-terminal-emulator\"><a class=\"direct-link\" href=\"#anatomy-of-a-terminal-emulator\">#</a> <a href=\"https://www.poor.dev/blog/terminal-anatomy/\">Anatomy of a Terminal Emulator</a></h3>\n<p>Terminal 是一個無所不在的平台，多年來一直相當穩定地存在著，雖然目前有大量的資源可以用來理解 Terminal 的內部運作方式，但其中大多數要嘛相當的神秘，或是需要特定領域的深入知識，所以這篇文章希望提供一個平易近人且相對廣泛容易了解的內容，來讓大家知道要開發一個 Terminal Emulator 平台時需要具備的知識</p>\n",
      "date_published": "2021-11-09T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/106/larry-106/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/106/larry-106/",
      "title": "第 106 期 Testing 推薦文章",
      "content_html": "<h2 id=\"testing\"><a class=\"direct-link\" href=\"#testing\">#</a> Testing</h2>\n<!-- summary -->\n<h3 id=\"%E4%B8%80%E6%AC%A1%E6%90%9E%E6%87%82%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E3%80%81%E6%95%B4%E5%90%88%E6%B8%AC%E8%A9%A6%E3%80%81%E7%AB%AF%E5%B0%8D%E7%AB%AF%E6%B8%AC%E8%A9%A6%E4%B9%8B%E9%96%93%E7%9A%84%E5%B7%AE%E7%95%B0\"><a class=\"direct-link\" href=\"#%E4%B8%80%E6%AC%A1%E6%90%9E%E6%87%82%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E3%80%81%E6%95%B4%E5%90%88%E6%B8%AC%E8%A9%A6%E3%80%81%E7%AB%AF%E5%B0%8D%E7%AB%AF%E6%B8%AC%E8%A9%A6%E4%B9%8B%E9%96%93%E7%9A%84%E5%B7%AE%E7%95%B0\">#</a> <a href=\"https://blog.miniasp.com/post/2019/02/18/Unit-testing-Integration-testing-e2e-testing\">一次搞懂單元測試、整合測試、端對端測試之間的差異</a></h3>\n<p>大家都知道測試可以確保程式的正確性，但根據不同的目的，測試又可大略分成單元測試、整合測試、端對端測試三種，因此在真的開始寫測試之前，務必要先搞清楚你需要的是哪種測試，才不會花了一堆時間結果沒測到最重要的部分哦～</p>\n<!-- summary -->\n<h3 id=\"what's-in-a-story%3F\"><a class=\"direct-link\" href=\"#what's-in-a-story%3F\">#</a> <a href=\"https://dannorth.net/whats-in-a-story/\">What's in a Story?</a></h3>\n<p>身為工程師，在跟 PM 溝通需求時最怕的就是 PM 以為他講清楚了，工程師也以為自己聽懂了，結果做出來後得到的回覆卻是「這不是我要的！」。所以在真的開始實作之前，雙方可以用 User Story 把各種 scenario 一一列出來，雙方都同意之後這些 scenario 也可以直接寫成測試，真的是非常省時間的一套方法</p>\n<h3 id=\"mocks-and-explicit-contracts\"><a class=\"direct-link\" href=\"#mocks-and-explicit-contracts\">#</a> <a href=\"http://blog.plataformatec.com.br/2015/10/mocks-and-explicit-contracts/\">Mocks and explicit contracts</a></h3>\n<p>寫測試寫到一定程度之後，為了方便建立測試專用的環境，一定會需要用到 mock。而這篇文章雖然已經是多年前發表的，但我覺得他在講怎麼正確使用 mock 講得非常好，尤其是他內文有講到 mock 應該當作名詞而非動詞來用，看完之後覺得又更了解怎麼用 mock 跟 interface 了</p>\n",
      "date_published": "2021-11-09T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/106/gqsm-106/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/106/gqsm-106/",
      "title": "第 106 期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"creating-a-react-component-with-tdd\"><a class=\"direct-link\" href=\"#creating-a-react-component-with-tdd\">#</a> <a href=\"https://dev.to/mbarzeev/creating-a-react-component-with-tdd-2jn8\">Creating a React component with TDD</a></h3>\n<p>看那麼多文章說了什麼是單元測試、什麼是 TDD 或是該如何對 Component 用 TDD 開發，這篇文章的作者直接示範了整個 TDD 開發 Component 的流程，很適合剛接觸測試、不知道如何對 Component 做測試或是想用測試改變開發方式的讀者們一讀！</p>\n<!-- summary -->\n<h3 id=\"understanding-the-box-model-in-css\"><a class=\"direct-link\" href=\"#understanding-the-box-model-in-css\">#</a> <a href=\"https://dev.to/yamanidev/understanding-the-box-model-in-css-1af\">Understanding The Box Model in CSS</a></h3>\n<p>CSS 的屬性那麼多，真的不需要全部都記起來，只需要在用到的時候去搜尋相關的語法就行了，<strong>但是這並不代表你可以忽略那些在 CSS 中的重要觀念</strong>，這篇文章的作者講解了 CSS 的 Box Model（盒子模型），Box Model 是 CSS 非常重要的基本觀念，如果還不熟悉的話就快來看看這篇文章吧！</p>\n<h3 id=\"javascript-programming-styles%3A-best-practices\"><a class=\"direct-link\" href=\"#javascript-programming-styles%3A-best-practices\">#</a> <a href=\"https://www.ma-no.org/en/programming/javascript/javascript-programming-styles-best-practices\">JavaScript Programming Styles: Best Practices</a></h3>\n<p>不知道大家有沒有在使用 ESLint 等工具在檢查你的程式碼風格，除了一些客製化的部分，比較常見的其他應該是 <a href=\"https://google.github.io/styleguide/jsguide.html\">Google</a> 和 <a href=\"https://github.com/airbnb/javascript\">AirBnb</a> ，這裡我就不戰哪種風格比較優秀，不如先來看看作者選擇每種寫法的差異和理由吧！或許也能想想自己除了習慣外為什麼選擇了某種風格！</p>\n",
      "date_published": "2021-11-09T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/conference/20211030-JSDC-2021/",
      "url": "https://starbugs-blog.netlify.app/posts/conference/20211030-JSDC-2021/",
      "title": "JSDC 2021",
      "content_html": "<!-- summary -->\n<h2 id=\"javascript-%E9%96%8B%E7%99%BC%E8%80%85%E5%B9%B4%E6%9C%83\"><a class=\"direct-link\" href=\"#javascript-%E9%96%8B%E7%99%BC%E8%80%85%E5%B9%B4%E6%9C%83\">#</a> JavaScript 開發者年會</h2>\n<p>JSDC 打破了壁壘，整合來自獨立開發者、企業、組織及機構的科技力量。</p>\n<p>我們致力於知識全球化，並讓參與者重新認識 JavaScript。</p>\n<ul>\n<li><a href=\"https://2021.jsdc.tw/\">JSDC 2021 - 歡迎參加主年會</a></li>\n<li><a href=\"https://2021.jsdc.tw/timesheets\">JSDC 2021 - 大會議程</a></li>\n<li><a href=\"https://2021.jsdc.tw/speakers\">JSDC 2021 - 講者介紹</a></li>\n</ul>\n<!-- summary -->\n<h2 id=\"%E9%97%9C%E6%96%BCjsdc\"><a class=\"direct-link\" href=\"#%E9%97%9C%E6%96%BCjsdc\">#</a> 關於JSDC</h2>\n<p>JavaScript 開發者年會 (JavaScript Developer Conference，簡稱 JSDC) 是台灣最大的 JavaScript 年度性技術研討會， 旨在提供台灣中高階 JavaScript 技術人才與世界最新 JavaScript 相關技術討論與分享。<br>\nJSDC 由 2011 年底開始，由三個台灣開發者社群共同發起，近年各式開發者社群蓬勃發展Front-End Developer、 <a href=\"http://Angular.tw\">Angular.tw</a>、 <a href=\"http://ReactJS.tw\">ReactJS.tw</a> 等新興社群⼀⼀成立， 我們期許 JSDC 能成為每年網⾴技術開發者的中⾼階技術交流活動，整合來自獨立開發者、企業、組織及機構的科技力量，並致力於知識全球化，讓參與者重新認識 JavaScript。</p>\n",
      "date_published": "2021-10-30T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/conference/20211023-MOPCON-2021/",
      "url": "https://starbugs-blog.netlify.app/posts/conference/20211023-MOPCON-2021/",
      "title": "MOPCON 2021",
      "content_html": "<h2 id=\"%E6%88%91%E5%80%9110%E6%AD%B2%E5%9B%89\"><a class=\"direct-link\" href=\"#%E6%88%91%E5%80%9110%E6%AD%B2%E5%9B%89\">#</a> 我們10歲囉</h2>\n<p>_Growing With You</p>\n<ul>\n<li><a href=\"https://mopcon.org/2021/\">行動科技年會 2021 | Mobile / Open / Platform Conference</a></li>\n<li><a href=\"https://mopcon.org/2021/schedule\">主要議程 | MOPCON 2021</a></li>\n<li><a href=\"https://mopcon.org/2021/speaker\">講者陣容 | MOPCON 2021</a></li>\n</ul>\n<!-- summary -->\n<h2 id=\"%E5%A0%85%E6%8C%81%E5%8D%81%E5%B9%B4%EF%BC%8C%E5%BE%88%E3%80%8C%E5%8D%97%E3%80%8D\"><a class=\"direct-link\" href=\"#%E5%A0%85%E6%8C%81%E5%8D%81%E5%B9%B4%EF%BC%8C%E5%BE%88%E3%80%8C%E5%8D%97%E3%80%8D\">#</a> 堅持十年，很「南」</h2>\n<p>MOPCON (Mobile Open Platform Conference) 堅持濁水溪以南的行動科技年會，南台灣千人軟體圈盛事。時逢第十周年，秉持著 Growing with you 精神與您一同成長，今年主題聚焦 Mobile 與 AIoT，期待能邀請老朋友和新同學，我們線上見！</p>\n<!-- summary -->",
      "date_published": "2021-10-23T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/conference/20211012-ModernWeb-2021/",
      "url": "https://starbugs-blog.netlify.app/posts/conference/20211012-ModernWeb-2021/",
      "title": "ModernWeb 2021",
      "content_html": "<p><a href=\"https://modernweb.ithome.com.tw/\">ModernWeb'21 VIRTUAL EVENT</a></p>\n<!-- summary -->\n<p>身為企業 Web 開發者，除了要鍛鍊本職學能、培養扎實的 Web 開發技術底蘊外，必須切記技術的發展日新月異，因此在 Web 開發這一行，不可能老是憑著相同一招半式打天下。Web 開發人員需要學習更新穎、更多元也更精深的技術，且遍佈開發語言、架構設計、框架應用、敏捷管理流程，甚至是實作技巧等眾多環節。</p>\n<!-- summary -->\n<p>立即報名參加「ModernWeb'21 VIRTUAL EVENT」，我們以 Web 週規畫了多場精彩講座議程，讓 Web 技術大神們來幫您醍醐灌頂、打通任督二脈，在網路技術的浩瀚銀河創造更多的可能性！</p>\n",
      "date_published": "2021-10-12T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/conference/20211002-PyCon-2021%20copy/",
      "url": "https://starbugs-blog.netlify.app/posts/conference/20211002-PyCon-2021%20copy/",
      "title": "PyCon Taiwan 2021",
      "content_html": "<h2 id=\"pycon-taiwan\"><a class=\"direct-link\" href=\"#pycon-taiwan\">#</a> PyCon Taiwan</h2>\n<ul>\n<li>持續舉辦 9 年</li>\n<li>每年議程 30 場以上</li>\n<li>參與會眾 800 人以上</li>\n</ul>\n<p>PyCon，亦即 Python 年會，是全球 Python 社群的年度盛會。PyCon 由各地同好自發籌辦，而現在台灣也有自己的 Python 年會了。這個活動旨在聚集台灣各領域應用 Python 的組織與個人，交流彼此的經驗心得，分享最新的技術發展，並親身體驗社群獨有的熱情。</p>\n<p>2021 年是 PyCon Taiwan 的十周年，今年 PyCon Taiwan 除了傳承十年來的社群交流經驗，我們更做了一些新嘗試，像是 Podcast 等。以期 PyCon Taiwan 十周年能促進不同族群間的交流，激盪出不一樣的火花。</p>\n",
      "date_published": "2021-10-02T00:00:00Z"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/conference/20210731-COSCUP-2021/",
      "url": "https://starbugs-blog.netlify.app/posts/conference/20210731-COSCUP-2021/",
      "title": "COSCUP 2021",
      "content_html": "<p><a href=\"https://coscup.org/2021/zh-TW/\">COSCUP 2021 | Conference for Open Source Coders, Users, and Promoters</a></p>\n<!-- summary -->\n<h2 id=\"%E9%97%9C%E6%96%BC-coscup\"><a class=\"direct-link\" href=\"#%E9%97%9C%E6%96%BC-coscup\">#</a> 關於 COSCUP</h2>\n<p>COSCUP 是由台灣開放原始碼社群聯合推動的年度研討會，起源於 2006 年，是台灣自由軟體運動 (FOSSM) 重要的推動者之一。活動包括有講座、攤位、社團同樂會等，除了邀請國際的重量級演講者之外，台灣本土的自由軟體推動者也經常在此發表演說，會議的發起人、工作人員與講者都是志願參與的志工。COSCUP 的宗旨在於提供一個聯結開放原始碼開發者、使用者與推廣者的平台。希望藉由每年一度的研討會，來推動自由及開放原始碼軟體 (FLOSS)。由於有許多贊助商及熱心捐助者，所有議程都是免費參加，但因會場人數限制，通常在一開放網路報名後就會立刻額滿。</p>\n<!-- summary -->\n<p>開放原始碼 (Open source) 是在 1998 年出現的名詞，大家早已耳熟能詳。這種在網路上已經進行二、三十年的軟體開發模式之所以能成功，有許多原因。其中一個極為關鍵的因素，就是開發者與使用者的直接接觸。無屏障的交流加速了問題的回報和修補機制，而當這個機制被網路效應放大到極限時，Linus 定律就出現了：「臭蟲難逃眾人法眼」(With enough eyeballs, all bugs are shallow)，軟體品質因此顯著提昇。在開放原始碼的模式中，開發者和使用者中間的人不再是銷售員或客服，而是讓軟體更容易被接受的推廣者 (Promoters)，他們打包套件讓軟體更好裝、寫說明文件讓軟體更易學、辦推廣活動讓更多人接觸到好軟體、在網路上回答問題解決使用者的疑惑，而且不會把開發者藏在背後產生資訊的不對稱。</p>\n<p>開發者 (Coders)、使用者 (Users) 和推廣者 (Promoters) 是讓自由及開放原始碼軟體發光發熱的三大支柱，這個研討會就是專為這三種人舉辦的：你可以是 A 軟體的開發者、B 軟體的推廣者、C 軟體的使用者，不論你是已經踏入自由及開放原始碼軟體領域，還是一直站在門口不知如何入門，歡迎你來參加 COSCUP — Conference for Open Source Coders, Users and Promoters!</p>\n",
      "date_published": "2021-07-31T00:00:00Z"
    }
  ]
}
