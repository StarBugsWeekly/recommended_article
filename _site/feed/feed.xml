<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>StarBugs Weekly</title>
	<subtitle>StarBugs Weekly</subtitle>
	
	<link href="https://tech-blog.cymetrics.io/feed/feed.xml" rel="self"/>
	<link href="https://tech-blog.cymetrics.io"/>
	<updated>2021-11-16T08:00:00+08:00</updated>
	<id>https://tech-blog.cymetrics.io</id>
	<author>
		<name>StarBugs Weekly</name>
		<email></email>
	</author>
	
	<entry>
		<title>第107期 前端開發 推薦文章</title>
		<link href="https://tech-blog.cymetrics.io/posts/post/107/andy-107/"/>
		<updated>2021-11-16T08:00:00+08:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/post/107/andy-107/</id>
		<content type="html">
		  &lt;h3 id=&quot;%E8%A9%B2%E5%A6%82%E4%BD%95%E5%85%A5%E9%96%80-ctf-%E4%B8%AD%E7%9A%84-web-%E9%A1%8C%EF%BC%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E8%A9%B2%E5%A6%82%E4%BD%95%E5%85%A5%E9%96%80-ctf-%E4%B8%AD%E7%9A%84-web-%E9%A1%8C%EF%BC%9F&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://blog.techbridge.cc/2021/02/20/web-ctf-is-fun/?fbclid=IwAR2mOQnLA0NF7ukl8XLSBe03Ft2-F9qZR_8l9yj9Mg9H_LcKaCnmZ3FdE0Q&quot;&gt;該如何入門 CTF 中的 Web 題？&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CTF 一直是個很有趣的比賽，參賽者必須要想辦法在網頁上尋找相對應的 flag 或者讓網頁產生一些奇怪的行為，雖然自己身為一位前端工程師但玩了 CTF 才知道自己原來對前端這麼不熟，想要一起了解 CTF 是甚麼的讀者歡迎閱讀這篇文章，之後就可以慢慢摸索一些 CTF 的練習題了！&lt;/p&gt;
&lt;h3 id=&quot;custom-elements-defining-new-elements-in-html&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#custom-elements-defining-new-elements-in-html&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://www.html5rocks.com/en/tutorials/webcomponents/customelements/&quot;&gt;Custom Elements defining new elements in HTML&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;原來 HTML tag 是可以自己隨便定義一個出來的，不一定要是 HTML5 中規範的 tag，其實會突然分享這個文章也是因為上面的 CTF 有些技巧是需要用到這種手段才能達到的，所以假如讀者不知道 HTML tag 可以自己自定義的話也可以看看這篇文章，裡面都有一些作者對於自定義 tag 的見解。&lt;/p&gt;
&lt;h3 id=&quot;css-tricks-to-create-that-dark-futuristic-web3-look&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#css-tricks-to-create-that-dark-futuristic-web3-look&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://dev.to/trishathecookie/css-tricks-to-create-that-dark-futuristic-web3-look-53bm&quot;&gt;CSS Tricks to Create that Dark Futuristic Web3 Look&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;這個真的太酷了，沒想到 CSS 還有這麼多的玩法可以讓一個文字有這麼多不同的顯示方式，學會了這些技巧就不用擔心設計師突然設計出一個難以開發的樣式了XD&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>第107期 前端開發 推薦文章</title>
		<link href="https://tech-blog.cymetrics.io/posts/post/107/gqsm-107/"/>
		<updated>2021-11-16T08:00:00+08:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/post/107/gqsm-107/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;p&gt;該如何入門 CTF 中的 Web 題？, Custom Elements defining new elements in HTML, CSS Tricks to Create that Dark Futuristic Web3 Look&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h2 id=&quot;%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC&quot;&gt;#&lt;/a&gt; 前端開發&lt;/h2&gt;
&lt;h3 id=&quot;useref-or-usestate%2C-which-is-better%3F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#useref-or-usestate%2C-which-is-better%3F&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://dev.to/salehmubashar/useref-or-usestate-which-is-better-258j&quot;&gt;useRef or useState, which is better?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;雖然 &lt;code&gt;useRef&lt;/code&gt; 或 &lt;code&gt;useState&lt;/code&gt; 都可以存放想要的東西，在使用上貌似滿雷同的，但其實兩者對 Component render 的影響可是完全不一樣的！會分享這篇文章也是我突然想到 &lt;a href=&quot;https://swr.vercel.app/&quot;&gt;SWR&lt;/a&gt; 就是利用 &lt;code&gt;useRef&lt;/code&gt; 來存放 state 唷！&lt;/p&gt;
&lt;h3 id=&quot;writing-clean-code-in-javascript&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#writing-clean-code-in-javascript&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://blog.bitsrc.io/writing-clean-code-in-javascript-dd584bbe1874&quot;&gt;Writing Clean Code in JavaScript&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;JavaScript 在近幾年真的提供了很多方便的寫法，只要善用就可以讓程式碼變得更簡潔，當然同時也出現了各種古怪的寫法 😂，在使用上還是要考慮到之後的人容不容易看懂。&lt;/p&gt;
&lt;h3 id=&quot;react-router-dom-6.x-%E7%89%88%E6%9C%AC-%E8%AE%A9%E6%88%91%F0%9F%90%93-%F0%9F%90%9D-%E4%BA%86&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#react-router-dom-6.x-%E7%89%88%E6%9C%AC-%E8%AE%A9%E6%88%91%F0%9F%90%93-%F0%9F%90%9D-%E4%BA%86&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://juejin.cn/post/7030700352622034952&quot;&gt;react-router-dom 6.x 版本 让我🐓 🐝 了&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;最近在研究 React 的專案配置時，一如往常地裝了 react-router-dom，然後依照記憶寫下程式碼，結果在執行後卻發現錯誤狂噴，原來是 react-router-dom 更新到 v6 後，一堆寫法都變了，而今天又看到這篇文章就覺得不分享不行，希望之後的人少走一點坑。&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>第107期 Go 推薦文章</title>
		<link href="https://tech-blog.cymetrics.io/posts/post/107/larry-107/"/>
		<updated>2021-11-16T08:00:00+08:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/post/107/larry-107/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;p&gt;該如何入門 CTF 中的 Web 題？, Custom Elements defining new elements in HTML, CSS Tricks to Create that Dark Futuristic Web3 Look&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h2 id=&quot;go&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#go&quot;&gt;#&lt;/a&gt; Go&lt;/h2&gt;
&lt;h3 id=&quot;upcoming-features-in-go-1.18&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#upcoming-features-in-go-1.18&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://sebastian-holstein.de/post/2021-11-08-go-1.18-features/&quot;&gt;Upcoming Features in Go 1.18&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;除了泛型之外，預計在明年發布的 Go 1.18 其實還有一些其他 feature，像是用來做測試的 fuzzing、聽說（？）更快的 go fmt，還有新的 net/netip package，看完都等不及要開始用了&lt;/p&gt;
&lt;h3 id=&quot;best-practices-for-testing-in-go&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#best-practices-for-testing-in-go&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://fossa.com/blog/golang-best-practices-testing-go/&quot;&gt;Best Practices for Testing in Go&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;這篇文章除了跟你說在寫測試時有哪些該注意的重點之外，也教你怎麼把 function/struct 設計得更好測試，如果你最近想寫 unit test 來增加程式的可靠性，卻發現不知道從何著手，那可以參考看看這篇文章&lt;/p&gt;
&lt;h3 id=&quot;design-patterns-in-go&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#design-patterns-in-go&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://refactoring.guru/design-patterns/go&quot;&gt;Design Patterns in Go&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果想要從 Go 下手開始學習設計模式的話，這邊有一個很不錯的網站，他除了會把每個 pattern 畫成 UML 圖之外，還會給你非常實際的範例，對於理解 pattern 的應用場景非常有幫助&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>第107期 DevOps 推薦文章</title>
		<link href="https://tech-blog.cymetrics.io/posts/post/107/smalltown-107/"/>
		<updated>2021-11-16T08:00:00+08:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/post/107/smalltown-107/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;p&gt;該如何入門 CTF 中的 Web 題？, Custom Elements defining new elements in HTML, CSS Tricks to Create that Dark Futuristic Web3 Look&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h2 id=&quot;devops&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#devops&quot;&gt;#&lt;/a&gt; DevOps&lt;/h2&gt;
&lt;h3 id=&quot;announcing-grafana-oncall%2C-the-easiest-way-to-do-on-call-management&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#announcing-grafana-oncall%2C-the-easiest-way-to-do-on-call-management&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://grafana.com/blog/2021/11/09/announcing-grafana-oncall/&quot;&gt;Announcing Grafana OnCall, the easiest way to do on-call management&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在維運服務時，系統總是會有遇到問題需要求救的時候，設定一個彈性又有效的 On Call 輪值方式是相當重要的一件事情，很多既有的工具使用起來要嘛很麻煩，要嘛對於開發者來說很不友善，所以 Grafana 宣布推出簡單易用的 Grafana On Call 管理工具，用來降低管理 On Call 輪值所需要的功夫，目前在 Grafana Cloud 為 Beta 公測階段；Grafana On Call 主要是透過今年所收購 Amixr Inc 所開發出來的，而他主要有以下三個特點：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;簡單建立跟管理 On-Call 時程&lt;/li&gt;
&lt;li&gt;利用自動逐步升級 (Escalation)且彈性的引導方式 (Routing) 確保找到人協助系統問題&lt;/li&gt;
&lt;li&gt;讓 On-Call 與 Incidnet 的狀態在同一個 UI 中顯現管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;terraform-cloud-variable-sets-beta-now-available&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#terraform-cloud-variable-sets-beta-now-available&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://www.hashicorp.com/blog/terraform-cloud-variable-sets-beta-now-available&quot;&gt;Terraform Cloud Variable Sets Beta Now Available&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Terraform 的 Module 引用方式讓使用者可以一直重複利用既有的程式碼，而不需要重新造輪子，而現在 Terraform Cloud 針對變數也推出一樣的功能 - &lt;code&gt;variable sets&lt;/code&gt;，他讓使用者可以重複使用 Terraform 所定義或是環境變數，而且不止是從 Root 到 Child Module，還可以橫跨某些 Workspaces 甚至是 Organization；自己發現 Terragrunt 也有類似的功能，看來 Terraform 這邊也跟上來了&lt;/p&gt;
&lt;h3 id=&quot;flux-security-audit-has-concluded&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#flux-security-audit-has-concluded&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://www.cncf.io/blog/2021/11/11/flux-security-audit-has-concluded/&quot;&gt;Flux Security Audit has concluded&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CNCF 最近對旗下 Incubation Project 進行 Security Audit，做完馬上發現一個 CVE: CVE-2021-41254，可以讓有心人士可以在 Multi-Tenant Flux 提權成 Cluster Admin (有使用 Flux 的人要記得升級)，而整個詳細的&lt;a href=&quot;https://fluxcd.io/FluxFinalReport-v1.1.pdf&quot;&gt;稽核報告&lt;/a&gt;已經被公開在網路上，找到將近 22 條涵括各種不同的 Risk Level 的問題，目前 43% 的 Issue 在 TODO 階段，21% WIP，36% 已經修完，詳細的進度可以參考 &lt;a href=&quot;https://github.com/orgs/fluxcd/projects/5&quot;&gt;GitHub Project&lt;/a&gt;，看起來 Flux 從另外一個面向投入資源，試圖跟其他的 GitOps 競爭工具做出差異化&lt;/p&gt;

		</content>
	</entry>
</feed>
